
name: 部署文档

on:
  push:
    branches:
      # 确保这是你正在使用的分支名称
      - main

permissions:
  contents: write

jobs:

  build-docs:
    name: 构建文档
    runs-on: ubuntu-latest
    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 2. 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: 3. 安装依赖
        run: npm install

      # 构建文档，并将控制台输出重定向到文件.nojekyll
      # .nojekyll 文件用于跳过 Jekyll 的默认处理流程，直接原样托管静态文件，文件内容不重要，文件存在即可
      - name: 4. 构建文档
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          npm run build
          > docs/.vuepress/dist/.nojekyll

      - name: 5. 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: docs-dist
          path: docs/.vuepress/dist/

      - name: 输出构建产物
        run: |-
          echo "当前工作目录："
          pwd
          echo "构建产物："
          ls -l
          ls -l docs/.vuepress/dist/

  deploy-server:
    name: 部署到云服务器
    runs-on: ubuntu-latest
    needs: build-docs  # 确保先完成构建文档
    steps:
      - name: 输出当前目录
        run: |-
          echo "当前工作目录："
          pwd
          echo "当前工作目录文件列表："
          ls -l

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: docs-dist
          path: docs

      - name: 输出当前目录
        run: |-
          echo "下载构建产物后当前工作目录："
          pwd
          echo "下载构建产物后当前工作目录文件列表："
          ls -l

      - name: 1. 打包构建产物
        run: tar -czvf docs.tar.gz -C docs/ .

      - name: 2. 传输到服务器
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          source: docs.tar.gz
          target: /tmp/

      - name: 3. 部署到服务器
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          script: |
            mkdir -p /www/wwwroot/vuepress # 宝塔面板Nginx默认网站跟目录
            cd /www/wwwroot/vuepress
            rm -rf ./*
            echo "解压前文件列表：" && ls -l
            tar -xzvf /tmp/docs.tar.gz -C .
            echo "解压后文件列表：" && ls -l

  deploy-gh-pages:
    name: 部署文档到GitHub Pages
    runs-on: ubuntu-latest
    needs: build-docs  # 确保先完成构建文档
    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: docs-dist
          path: docs

      - name: 输出当前目录
        run: |-
          echo "下载构建产物后当前工作目录："
          pwd
          echo "下载构建产物后当前工作目录文件列表："
          ls -l

      - name: 部署文档
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: docs
          clean: true  # 自动清理旧文件
