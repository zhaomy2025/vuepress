import{_ as e,c as a,d as l,o as s}from"./app-BLwZODVo.js";const n={};function r(d,t){return s(),a("div",null,t[0]||(t[0]=[l(`<h3 id="核心原理" tabindex="-1"><a class="header-anchor" href="#核心原理"><span>核心原理</span></a></h3><p>Java 对象在堆中的存储包含<strong>对象头</strong>和<strong>实例数据</strong>。对象头又分为：</p><ul><li><strong>标记字 (Mark Word)</strong>：存储哈希码、GC 年龄、锁状态、线程持有的锁、偏向线程ID、偏向时间戳等运行时数据。</li><li><strong>类指针 (Class Pointer)</strong>：指向对象的类元数据。</li><li><strong>数组长度</strong>：数组对象的头部还会额外包含该字段。</li></ul><p>在 64 位 JVM 中，普通对象头通常占 <strong>12字节（96位） 至 16字节（128位）</strong>。对于许多平均大小仅为 32-64 字节的小对象来说，对象头的开销占比非常高，可能达到 <strong>20% 到 50%</strong>。JEP 450 通过以下方式将对象头压缩至 <strong>64 位 (8 字节)</strong>：</p><ul><li><strong>压缩类指针</strong>：将原本 32 位的压缩类指针进一步优化为 <strong>22 位</strong>，并将其编码嵌入标记字中。</li><li><strong>标记字的功能重组与升级</strong>：对固定的 64 位标记字空间进行了彻底的重新规划，将其划分为一个精细的功能位域集合，以同时承载原有和新增的信息</li><li><strong>锁机制革新</strong>：传统的<strong>偏向锁</strong> 和<strong>轻量级锁</strong> 会覆盖整个标记字（除锁标记位外），与紧凑对象头中必须保留类指针的设计冲突。因此，<strong>紧凑对象头不再支持偏向锁和栈锁</strong>。它依赖 <strong>JDK 22 中引入的对象监视表</strong> 来管理重量级锁信息。</li></ul><h3 id="新旧对象头布局对比" tabindex="-1"><a class="header-anchor" href="#新旧对象头布局对比"><span>新旧对象头布局对比</span></a></h3><p>为了更直观地理解其变化，可以参考下表对传统对象头与紧凑对象头进行的对比：</p><h4 id="java传统对象头" tabindex="-1"><a class="header-anchor" href="#java传统对象头"><span>Java传统对象头</span></a></h4><p><strong>传统对象头大小</strong></p><table><thead><tr><th style="text-align:left;">是否压缩</th><th style="text-align:left;">对象类型</th><th style="text-align:left;">大小</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">压缩</td><td style="text-align:left;">普通对象</td><td style="text-align:left;">12字节（96位）</td><td style="text-align:left;">标记字8B（64位）+ 类指针4B（32位）</td></tr><tr><td style="text-align:left;">压缩</td><td style="text-align:left;">数组对象</td><td style="text-align:left;">16字节（128位）</td><td style="text-align:left;">标记字8B（64位）+ 类指针4B（32位）<br>+ 数组长度4B（32位）</td></tr><tr><td style="text-align:left;">未压缩</td><td style="text-align:left;">普通对象</td><td style="text-align:left;">16字节（128位）</td><td style="text-align:left;">标记字8B（64位）+ 类指针8B（64位）</td></tr><tr><td style="text-align:left;">未压缩</td><td style="text-align:left;">数组对象</td><td style="text-align:left;">20字节（160位）</td><td style="text-align:left;">标记字8B（64位）+ 类指针8B（64位）<br>+ 数组长度4B（32位）</td></tr></tbody></table><p><strong>传统对象头标记字（Mark Word）</strong></p><table><thead><tr><th>状态</th><th>锁状态</th><th>偏向锁</th><th>GC分代<br>年龄</th><th>未使用</th><th>其他</th></tr></thead><tbody><tr><td>无锁状态</td><td>01</td><td>0</td><td>4位</td><td>1位</td><td>哈希码（31位）+ 未使用（25位）</td></tr><tr><td>偏向锁状态</td><td>01</td><td>1</td><td>4位</td><td>1位</td><td>线程ID（54位）+ epoch（2位）</td></tr><tr><td>轻量级锁状态</td><td>00</td><td colspan="4">指向锁记录的指针（62位）</td></tr><tr><td>重量级锁状态</td><td>10</td><td colspan="4">指向Monitor的指针（62位）</td></tr><tr><td>GC 分代年龄</td><td>11</td><td colspan="4">GC所需标记信息</td></tr></tbody></table><h4 id="紧凑对象头" tabindex="-1"><a class="header-anchor" href="#紧凑对象头"><span>紧凑对象头</span></a></h4><table><thead><tr><th style="text-align:left;">标记位</th><th style="text-align:left;">自转发标记位</th><th style="text-align:left;">GC分代年龄</th><th style="text-align:left;">预留</th><th style="text-align:left;">哈希码</th><th style="text-align:left;">压缩类指针</th></tr></thead><tbody><tr><td style="text-align:left;">2位</td><td style="text-align:left;">1位</td><td style="text-align:left;">4位</td><td style="text-align:left;">4位</td><td style="text-align:left;">31位</td><td style="text-align:left;">22位</td></tr></tbody></table><h3 id="启用方式" tabindex="-1"><a class="header-anchor" href="#启用方式"><span>启用方式</span></a></h3><p>Java 24 中，紧凑对象头是实验性功能，需要特定 JVM 参数启用，Java 25 成为正式功能，无需手动启动。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token parameter variable">-XX:+UnlockExperimentalVMOptions</span> <span class="token parameter variable">-XX:+UseCompactObjectHeaders</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h3><p>紧凑对象头尤其适用于以下场景：</p><ul><li><strong>大量小对象</strong>的应用（如微服务、DTO、缓存元素）。</li><li><strong>内存敏感型</strong>工作负载（希望降低内存占用和提高部署密度）。</li><li><strong>关注缓存效率和高吞吐量</strong>的应用。</li></ul><p>在决定是否启用时，需考虑：</p><ul><li><strong>应用程序特性</strong>：若应用严重依赖偏向锁，需评估其影响。</li><li><strong>GC 选择</strong>：目前该特性主要支持 G1 和 Parallel GC。对于 ZGC 的支持尚未完成。</li><li><strong>类加载数量</strong>：确保应用加载的类数量远低于 400 万的上限。</li></ul>`,22)]))}const i=e(n,[["render",r]]),g=JSON.parse('{"path":"/java/new-features/compact-object-headers-intro.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1757914089000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"0b4ed712e028b2125ee6f1e073cdfe17b60eaeb8","time":1757914089000,"email":"3036190149@qq.com","author":"zhaomy","message":"java 24 、java25 新特性"}]},"filePathRelative":"java/new-features/compact-object-headers-intro.md","excerpt":"<h3>核心原理</h3>\\n<p>Java 对象在堆中的存储包含<strong>对象头</strong>和<strong>实例数据</strong>。对象头又分为：</p>\\n<ul>\\n<li><strong>标记字 (Mark Word)</strong>：存储哈希码、GC 年龄、锁状态、线程持有的锁、偏向线程ID、偏向时间戳等运行时数据。</li>\\n<li><strong>类指针 (Class Pointer)</strong>：指向对象的类元数据。</li>\\n<li><strong>数组长度</strong>：数组对象的头部还会额外包含该字段。</li>\\n</ul>\\n<p>在 64 位 JVM 中，普通对象头通常占 <strong>12字节（96位） 至 16字节（128位）</strong>。对于许多平均大小仅为 32-64 字节的小对象来说，对象头的开销占比非常高，可能达到 <strong>20% 到 50%</strong>。JEP 450 通过以下方式将对象头压缩至 <strong>64 位 (8 字节)</strong>：</p>"}');export{i as comp,g as data};
