import{_ as s,c as a,d as e,o as p}from"./app-DSgHH1tE.js";const t={};function o(c,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="functools-wraps-详解" tabindex="-1"><a class="header-anchor" href="#functools-wraps-详解"><span><code>functools.wraps</code> 详解</span></a></h1><p><code>functools.wraps</code> 是 Python 标准库中的一个装饰器，主要用于 保留被装饰函数（原函数）的元信息，防止装饰器导致函数名 (<code>__name__</code>)、文档字符串 (<code>__doc__</code>)、注解 (<code>__annotations__</code>) 等属性丢失或被覆盖。</p><h2 id="为什么需要-wraps" tabindex="-1"><a class="header-anchor" href="#为什么需要-wraps"><span>为什么需要 <code>wraps</code>？</span></a></h2><p>在 Python 中，装饰器通常会返回一个新的函数（如 <code>wrapper</code>），这会导致原函数的元信息丢失：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;Wrapper docstring.&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Decorator is running!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@my_decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Greet someone by name.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># 输出 &#39;wrapper&#39;（而不是 &#39;greet&#39;）</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>   <span class="token comment"># 输出 &#39;Wrapper docstring.&#39;（而不是 &#39;Greet someone by name.&#39;）</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p><ul><li><code>greet.__name__</code> 变成了 <code>wrapper</code>（而不是 <code>greet</code>）。</li><li><code>greet.__doc__</code> 变成了 <code>wrapper</code> 的文档字符串（而不是原函数的文档字符串）。</li></ul><h2 id="wraps-的作用" tabindex="-1"><a class="header-anchor" href="#wraps-的作用"><span><code>wraps</code> 的作用</span></a></h2><p><code>wraps</code> 将原函数的元信息复制到装饰器返回的函数上，使其看起来像原函数：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>  <span class="token comment"># 关键：复制 func 的元信息到 wrapper</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token triple-quoted-string string">&quot;&quot;&quot;Wrapper docstring.&quot;&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Decorator is running!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@my_decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Greet someone by name.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># 输出 &#39;greet&#39;（正确保留）</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>greet<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>   <span class="token comment"># 输出 &#39;Greet someone by name.&#39;（正确保留）</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点：</p><ul><li><code>@wraps(func)</code> 将 <code>func</code> 的元信息（如 <code>__name__</code>、<code>__doc__</code>、<code>__module__</code> 等）复制到 <code>wrapper</code> 上。</li><li>这样，被装饰的函数 <code>greet</code> 仍然保留其原始名称、文档字符串等。</li></ul><h2 id="wraps-保留哪些属性" tabindex="-1"><a class="header-anchor" href="#wraps-保留哪些属性"><span><code>wraps</code> 保留哪些属性？</span></a></h2><p><code>wraps</code> 默认会复制以下属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>__name__</code></td><td>函数名</td></tr><tr><td><code>__doc__</code></td><td>文档字符串</td></tr><tr><td><code>__module__</code></td><td>所属模块</td></tr><tr><td><code>__annotations__</code></td><td>类型注解（Python 3+）</td></tr><tr><td><code>__dict__</code></td><td>其他自定义属性</td></tr></tbody></table><p>手动查看 <code>wraps</code> 复制的属性：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@my_decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>__wrapped__<span class="token punctuation">)</span>  <span class="token comment"># 获取原始函数（Python 3.3+）</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line"></span>
<span class="line">&lt;function foo at 0x7f8b1c3b5d30&gt;</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>__wrapped__</code> 是 <code>wraps</code> 自动添加的，指向原函数（可用于调试或绕过装饰器）。</p><h2 id="如果不使用-wraps-会怎样" tabindex="-1"><a class="header-anchor" href="#如果不使用-wraps-会怎样"><span>如果不使用 <code>wraps</code> 会怎样？</span></a></h2><p>如果不使用 <code>wraps</code>，可能会导致：</p><ol><li>调试困难：日志或报错信息显示的是 <code>wrapper</code> 而非原函数名。</li><li>文档工具失效：如 <code>help(greet)</code> 显示的是 <code>wrapper</code> 的文档，而非 <code>greet</code> 的文档。</li><li>序列化问题：某些序列化工具（如 <code>pickle</code>）依赖 <code>__name__</code> 和 <code>__module__</code>，可能导致错误。</li></ol><h2 id="进阶用法" tabindex="-1"><a class="header-anchor" href="#进阶用法"><span>进阶用法</span></a></h2><h3 id="自定义复制的属性" tabindex="-1"><a class="header-anchor" href="#自定义复制的属性"><span>自定义复制的属性</span></a></h3><p><code>wraps</code> 可以指定要复制的属性：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> assigned<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">&#39;__name__&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;__doc__&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 仅复制名称和文档</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="保留原函数的签名-inspect-signature" tabindex="-1"><a class="header-anchor" href="#保留原函数的签名-inspect-signature"><span>保留原函数的签名（<code>inspect.signature</code>）</span></a></h3><p><code>wraps</code> 还会让 <code>inspect.signature</code> 正确返回原函数的参数信息：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> inspect</span>
<span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@my_decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Greet someone.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>inspect<span class="token punctuation">.</span>signature<span class="token punctuation">(</span>greet<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出: (name: str, age: int = 18) -&gt; str</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不加 <code>wraps</code>，<code>inspect.signature(greet)</code> 会返回 <code>(*args, kwargs)</code>，丢失参数信息。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><table><thead><tr><th>场景</th><th>解决方案</th><th>作用</th></tr></thead><tbody><tr><td>防止装饰器覆盖元信息</td><td><code>@wraps(func)</code></td><td>保留 <code>__name__</code>、<code>__doc__</code> 等</td></tr><tr><td>调试和文档</td><td>使用 <code>wraps</code></td><td>让 <code>help()</code> 和日志显示正确的函数信息</td></tr><tr><td>序列化和反射</td><td>必须用 <code>wraps</code></td><td>确保 <code>pickle</code>、<code>inspect</code> 等工具正常工作</td></tr></tbody></table><p>最佳实践：</p><ul><li>始终在装饰器内部使用 <code>@wraps(func)</code>，除非有特殊需求。</li><li>如果需要自定义复制的属性，可以通过 <code>assigned</code> 参数调整。</li></ul><p>这样，你的装饰器既能增强函数功能，又能保持代码的清晰和可维护性！ 🚀</p>`,36)]))}const i=s(t,[["render",o]]),r=JSON.parse(`{"path":"/python/functools_wraps.html","title":"functools.wraps 详解","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754642986000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"cb442e484787959686fcf71435e2c3d5dbb77237","time":1754642986000,"email":"3036190149@qq.com","author":"zhaomy","message":"python 依赖管理、装饰器、functools、wraps"}]},"filePathRelative":"python/functools_wraps.md","excerpt":"\\n<p><code>functools.wraps</code> 是 Python 标准库中的一个装饰器，主要用于 保留被装饰函数（原函数）的元信息，防止装饰器导致函数名 (<code>__name__</code>)、文档字符串 (<code>__doc__</code>)、注解 (<code>__annotations__</code>) 等属性丢失或被覆盖。</p>\\n<h2>为什么需要 <code>wraps</code>？</h2>\\n<p>在 Python 中，装饰器通常会返回一个新的函数（如 <code>wrapper</code>），这会导致原函数的元信息丢失：</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"py\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">my_decorator</span><span class=\\"token punctuation\\">(</span>func<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">def</span> <span class=\\"token function\\">wrapper</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>args<span class=\\"token punctuation\\">,</span> kwargs<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span></span>\\n<span class=\\"line\\">        <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Wrapper docstring.\\"\\"\\"</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Decorator is running!\\"</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword\\">return</span> func<span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">*</span>args<span class=\\"token punctuation\\">,</span> kwargs<span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> wrapper</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token decorator annotation punctuation\\">@my_decorator</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">greet</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span></span>\\n<span class=\\"line\\">    <span class=\\"token triple-quoted-string string\\">\\"\\"\\"Greet someone by name.\\"\\"\\"</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-interpolation\\"><span class=\\"token string\\">f\\"Hello, </span><span class=\\"token interpolation\\"><span class=\\"token punctuation\\">{</span>name<span class=\\"token punctuation\\">}</span></span><span class=\\"token string\\">!\\"</span></span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>greet<span class=\\"token punctuation\\">.</span>__name__<span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 输出 'wrapper'（而不是 'greet'）</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>greet<span class=\\"token punctuation\\">.</span>__doc__<span class=\\"token punctuation\\">)</span>   <span class=\\"token comment\\"># 输出 'Wrapper docstring.'（而不是 'Greet someone by name.'）</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}`);export{i as comp,r as data};
