import{_ as o,c as i,a,d as l,e as t,w as e,r as c,o as r,b as p}from"./app-DW8Bfb9C.js";const d="/images/spring/spring-framework-aop-execution.png",u={},k={class:"table-of-contents"};function h(m,n){const s=c("router-link");return r(),i("div",null,[n[17]||(n[17]=a("h1",{id:"spring核心-aop",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#spring核心-aop"},[a("span",null,"Spring核心 - AOP")])],-1)),a("nav",k,[a("ul",null,[a("li",null,[t(s,{to:"#aop是什么"},{default:e(()=>n[0]||(n[0]=[p("AOP是什么")])),_:1,__:[0]})]),a("li",null,[t(s,{to:"#aop术语"},{default:e(()=>n[1]||(n[1]=[p("AOP术语")])),_:1,__:[1]}),a("ul",null,[a("li",null,[t(s,{to:"#joinpoint-连接点"},{default:e(()=>n[2]||(n[2]=[p("JoinPoint 连接点")])),_:1,__:[2]})]),a("li",null,[t(s,{to:"#pointcut-切入点"},{default:e(()=>n[3]||(n[3]=[p("PointCut 切入点")])),_:1,__:[3]})]),a("li",null,[t(s,{to:"#advice-通知"},{default:e(()=>n[4]||(n[4]=[p("Advice 通知")])),_:1,__:[4]})]),a("li",null,[t(s,{to:"#aspect-切面"},{default:e(()=>n[5]||(n[5]=[p("Aspect 切面")])),_:1,__:[5]})]),a("li",null,[t(s,{to:"#target-目标对象"},{default:e(()=>n[6]||(n[6]=[p("Target 目标对象")])),_:1,__:[6]})]),a("li",null,[t(s,{to:"#aop-proxy-代理对象"},{default:e(()=>n[7]||(n[7]=[p("AOP Proxy 代理对象")])),_:1,__:[7]})]),a("li",null,[t(s,{to:"#weaving-织入"},{default:e(()=>n[8]||(n[8]=[p("Weaving 织入")])),_:1,__:[8]})])])]),a("li",null,[t(s,{to:"#spring-aop的设计与实现"},{default:e(()=>n[9]||(n[9]=[p("Spring AOP的设计与实现")])),_:1,__:[9]}),a("ul",null,[a("li",null,[t(s,{to:"#aop的实现方式"},{default:e(()=>n[10]||(n[10]=[p("AOP的实现方式")])),_:1,__:[10]})]),a("li",null,[t(s,{to:"#两种动态代理区别"},{default:e(()=>n[11]||(n[11]=[p("两种动态代理区别")])),_:1,__:[11]})]),a("li",null,[t(s,{to:"#spring-aop-和-aspectj之间的关键区别"},{default:e(()=>n[12]||(n[12]=[p("Spring AOP 和 AspectJ之间的关键区别")])),_:1,__:[12]})])])]),a("li",null,[t(s,{to:"#aop的配置方式"},{default:e(()=>n[13]||(n[13]=[p("AOP的配置方式")])),_:1,__:[13]}),a("ul",null,[a("li",null,[t(s,{to:"#xml配置"},{default:e(()=>n[14]||(n[14]=[p("XML配置")])),_:1,__:[14]})]),a("li",null,[t(s,{to:"#aspectj注解方式"},{default:e(()=>n[15]||(n[15]=[p("@AspectJ注解方式")])),_:1,__:[15]})]),a("li",null,[t(s,{to:"#切点表达式"},{default:e(()=>n[16]||(n[16]=[p("切点表达式")])),_:1,__:[16]})])])])])]),n[18]||(n[18]=l(`<h2 id="aop是什么" tabindex="-1"><a class="header-anchor" href="#aop是什么"><span>AOP是什么</span></a></h2><p>AOP是Aspect Oriented Programming的缩写，意为：面向切面编程。面向切面编程是指将相同逻辑的重复代码横向抽取出来，使用预编译、代理等技术将这些重复代码织入到目标对象方法中，实现和原来一样的功能。这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无关的代码。</p><h2 id="aop术语" tabindex="-1"><a class="header-anchor" href="#aop术语"><span>AOP术语</span></a></h2><ul><li>连接点JoinPoint：方法的执行</li><li>织入Weaving：切面应用到目标对象的过程 <ul><li>切面Aspect：应该使用哪个通知并在哪个关注点使用它 <ul><li>切入点PointCut：匹配连接点的条件</li><li>通知Advice：做什么+何时做</li></ul></li><li>目标对象Target ：真正执行业务的核心逻辑对象</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>切面<code>Aspect</code>是设计概念，通知器<code>Advisor</code>是 Spring AOP 的实现方式：</p><ul><li>切面可以包含多个通知和切点</li><li>通知器仅组合一个通知和一个切点</li><li>在 Spring AOP 中，<code>@Aspect</code> 注解的类最终会被解析为多个 <code>Advisor</code> 对象</li></ul></div><h3 id="joinpoint-连接点" tabindex="-1"><a class="header-anchor" href="#joinpoint-连接点"><span>JoinPoint 连接点</span></a></h3><p>连接点，程序运行中的一些时间点，是插入横切关注点的扩展点，连接点可能是类初始化、方法执行，异常处理等等。在 Spring AOP 中，JoinPoint 总是方法的执行点。</p><h3 id="pointcut-切入点" tabindex="-1"><a class="header-anchor" href="#pointcut-切入点"><span>PointCut 切入点</span></a></h3><p>切入点决定通知应该作用于哪个连接点，可以认为是匹配连接点的条件。</p><h3 id="advice-通知" tabindex="-1"><a class="header-anchor" href="#advice-通知"><span>Advice 通知</span></a></h3><p>定义在连接点做什么，为切面增强提供织入接口，Spring AOP 提供了五种通知类型：</p><ul><li>@Before：在 JoinPoint 方法之前执行。</li><li>@AfterReturning：在连接点方法正常执行后执行。</li><li>@AfterThrowing：在 JoinPoint 方法通过抛出异常后执行。</li><li>@After：在连接点方法之后执行，无论方法退出是正常还是异常返回。</li><li>@Around：在连接点之前和之后执行。</li></ul><h3 id="aspect-切面" tabindex="-1"><a class="header-anchor" href="#aspect-切面"><span>Aspect 切面</span></a></h3><p>Aspect 由切入点和通知组成：切入点定义在哪里执行，通知定义何时执行以及在连接点干什么。</p><p>可以简单地认为, 使用 @Aspect 注解的类就是切面。</p><h3 id="target-目标对象" tabindex="-1"><a class="header-anchor" href="#target-目标对象"><span>Target 目标对象</span></a></h3><p>目标对象，即真正执行业务的核心逻辑对象。</p><p>因为 Spring AOP 使用运行时代理的方式来实现 Aspect ，因此目标对象总是一个代理对象。</p><h3 id="aop-proxy-代理对象" tabindex="-1"><a class="header-anchor" href="#aop-proxy-代理对象"><span>AOP Proxy 代理对象</span></a></h3><p>AOP代理，是客户端持有的增强后的对象引用，即AOP框架使用代理模式创建的对象，在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现。</p><h3 id="weaving-织入" tabindex="-1"><a class="header-anchor" href="#weaving-织入"><span>Weaving 织入</span></a></h3><p>织入可以理解为切面应用到目标函数(类)的过程。一般分为静态织入和动态织入。</p><h2 id="spring-aop的设计与实现" tabindex="-1"><a class="header-anchor" href="#spring-aop的设计与实现"><span>Spring AOP的设计与实现</span></a></h2><h3 id="aop的实现方式" tabindex="-1"><a class="header-anchor" href="#aop的实现方式"><span>AOP的实现方式</span></a></h3><p>实现 AOP 的技术，主要分为两大类：</p><ul><li>静态代理 - 指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强 <ul><li>编译时编织（特殊编译器实现）</li><li>类加载时编织（特殊的类加载器实现）</li></ul></li><li>动态代理 - 在运行时在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。 <ul><li>JDK 动态代理(Proxy，底层通过反射实现)</li><li>CGLIB(底层通过继承实现)</li></ul></li></ul><h3 id="两种动态代理区别" tabindex="-1"><a class="header-anchor" href="#两种动态代理区别"><span>两种动态代理区别</span></a></h3><ol><li>若目标对象实现了若干接口，spring使用JDK的java.lang.reflect.Proxy类代理。 <ol><li>优点：因为有接口，所以使系统更加松耦合</li><li>缺点：为每一个目标类创建接口</li></ol></li><li>若目标对象没有实现任何接口，spring使用CGLIB库生成目标对象的子类。 <ol><li>优点：因为代理类与目标类是继承关系，所以不需要有接口的存在。</li><li>缺点：因为没有使用接口，所以系统的耦合性没有使用JDK的动态代理好。</li></ol></li></ol><h3 id="spring-aop-和-aspectj之间的关键区别" tabindex="-1"><a class="header-anchor" href="#spring-aop-和-aspectj之间的关键区别"><span>Spring AOP 和 AspectJ之间的关键区别</span></a></h3><table><thead><tr><th>对比项</th><th>Spring AOP</th><th>AspectJ</th></tr></thead><tbody><tr><td>是否需要特殊编译器</td><td>×</td><td>√</td></tr><tr><td>织入方式</td><td>运行时织入</td><td>编译时、编译后和加载时织入</td></tr><tr><td>切入点</td><td>方法</td><td>字段、方法、构造函数、静态初始值设定项、最终类/方法</td></tr><tr><td>对象</td><td>Spring容器管理的bean上实现</td><td>所有域对象上实现</td></tr></tbody></table><h2 id="aop的配置方式" tabindex="-1"><a class="header-anchor" href="#aop的配置方式"><span>AOP的配置方式</span></a></h2><p>Spring AOP 支持对XML模式和基于@AspectJ注解的两种配置方式。</p><h3 id="xml配置" tabindex="-1"><a class="header-anchor" href="#xml配置"><span>XML配置</span></a></h3><ul><li><code>&lt;aop:aspect&gt;</code>定义切面</li><li><code>&lt;aop:pointcut&gt;</code> 定义切点</li><li><code>&lt;aop:before&gt;</code>、<code>&lt;aop:after&gt;</code>、<code>&lt;aop:around&gt;</code> 定义通知</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token operator">&lt;</span>aop:config<span class="token operator">&gt;</span></span>
<span class="line">		<span class="token operator">&lt;</span>aop:aspect <span class="token assign-left variable">ref</span><span class="token operator">=</span><span class="token string">&quot;operatorLoggerAop&quot;</span><span class="token operator">&gt;</span></span>
<span class="line">			<span class="token operator">&lt;</span>aop:pointcut <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> <span class="token assign-left variable">expression</span><span class="token operator">=</span><span class="token string">&quot;(execution(* ..service..*(..))&quot;</span> /<span class="token operator">&gt;</span></span>
<span class="line">			<span class="token operator">&lt;</span>aop:around <span class="token assign-left variable">method</span><span class="token operator">=</span><span class="token string">&quot;logAround&quot;</span>  pointcut-ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> /<span class="token operator">&gt;</span></span>
<span class="line">		<span class="token operator">&lt;</span>/aop:aspect<span class="token operator">&gt;</span></span>
<span class="line">	<span class="token operator">&lt;</span>/aop:config<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aspectj注解方式" tabindex="-1"><a class="header-anchor" href="#aspectj注解方式"><span>@AspectJ注解方式</span></a></h3><ul><li><code>@Aspect</code>定义切面</li><li><code>@Pointcut</code>定义切点</li><li><code>@Before</code>、<code>@After</code>、<code>@Around</code>定义通知</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Aspect</span></span>
<span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XXXAspect</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(com.shcf.iomp.core.annotation.Crypt)&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;pointcut()&quot;</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token class-name">Around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">		result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">		<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">		<span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="切点表达式" tabindex="-1"><a class="header-anchor" href="#切点表达式"><span>切点表达式</span></a></h3><p><code>execution</code> 是 Spring AOP 和 AspectJ 中最常用的切点表达式，用于精确匹配方法执行连接点。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>execution（annotation-pattern? modifiers-pattern? ret-type-pattern declaring-type-pattern? name-pattern（param-pattern） throws-pattern?）</p></div><table><thead><tr><th>组成部分</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>annotation-pattern</td><td>注解修饰符（可选）</td><td><code>@org.springframework.transaction.annotation.Transactional * *(..)</code></td></tr><tr><td>modifiers-pattern</td><td>访问修饰符（可选）</td><td><code>public</code> <code>protected</code> <code>*</code></td></tr><tr><td>ret-type-pattern</td><td>返回值类型（必选）</td><td><code>void\`\`String</code> <code>*</code></td></tr><tr><td>declaring-type-pattern</td><td>类路径（可选）</td><td><code>com.example.service.*</code></td></tr><tr><td>name-pattern</td><td>方法名（必选）</td><td><code>get* </code> <code>*</code></td></tr><tr><td>param-pattern</td><td>参数列表（必选）</td><td><code>()</code> <code>(..)</code> <code>(String,*)</code></td></tr><tr><td>throws-pattern</td><td>异常类型（极少用）</td><td><code>throws java.io.IOException</code></td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>常用通配符：</p><ul><li><code>*</code>：匹配任意字符（除包分隔符外）</li><li><code>..</code>： <ul><li>在包路径中：匹配当前包及其子包（如 <code>com.example..*</code>）</li><li>在参数列表中：匹配任意数量参数</li></ul></li><li><code>+</code>：匹配指定类型的子类型（如 <code>java.util.List+</code>）</li><li><code>!</code>：不匹配指定类型（如<code>!void</code>匹配非void返回类型的方法）</li></ul></div><h4 id="使用实例" tabindex="-1"><a class="header-anchor" href="#使用实例"><span>使用实例</span></a></h4><p><img src="`+d+`" alt=""></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 匹配所有public方法</span></span>
<span class="line"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token keyword">public</span> <span class="token operator">*</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 匹配所有以get开头的方法</span></span>
<span class="line"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token operator">*</span> get<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 匹配com.example.service包下所有类的所有方法</span></span>
<span class="line">execution <span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 匹配com.example.service包及其子包下所有类的所有方法</span></span>
<span class="line">execution <span class="token punctuation">(</span><span class="token operator">*</span> com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>service<span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 匹配带有@Transactional注解的方法</span></span>
<span class="line"><span class="token function">execution</span><span class="token punctuation">(</span><span class="token annotation punctuation">@org.springframework.transaction.annotation.Transactional</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,47))])}const v=o(u,[["render",h]]),b=JSON.parse('{"path":"/posts/spring/spring-framework-aop.html","title":"Spring核心 - AOP","lang":"zh-CN","frontmatter":{"title":"Spring核心 - AOP","date":"2025-05-14T05:14:04.345Z","category":["Spring","Spring Framework","AOP"],"tags":["Spring","Spring Framework","AOP"]},"git":{"updatedTime":1749101333000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"c2e0952b87ee92b775b726d15f9d5432d081cec7","time":1749101333000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Aop 2、Spring AOP 实现原理 3、Spring Boot 知识体系 4、Spring Boot 入门"}]},"filePathRelative":"posts/spring/spring-framework-aop.md","excerpt":"\\n\\n<h2>AOP是什么</h2>\\n<p>AOP是Aspect Oriented Programming的缩写，意为：面向切面编程。面向切面编程是指将相同逻辑的重复代码横向抽取出来，使用预编译、代理等技术将这些重复代码织入到目标对象方法中，实现和原来一样的功能。这样一来，我们就在写业务时只关心业务代码，而不用关心与业务无关的代码。</p>\\n<h2>AOP术语</h2>\\n<ul>\\n<li>连接点JoinPoint：方法的执行</li>\\n<li>织入Weaving：切面应用到目标对象的过程\\n<ul>\\n<li>切面Aspect：应该使用哪个通知并在哪个关注点使用它\\n<ul>\\n<li>切入点PointCut：匹配连接点的条件</li>\\n<li>通知Advice：做什么+何时做</li>\\n</ul>\\n</li>\\n<li>目标对象Target ：真正执行业务的核心逻辑对象</li>\\n</ul>\\n</li>\\n</ul>"}');export{v as comp,b as data};
