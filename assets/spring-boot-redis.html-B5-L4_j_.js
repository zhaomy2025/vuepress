import{_ as l,c as i,a as s,d as c,e as p,w as t,r as o,o as u,b as e}from"./app-CfDefuCP.js";const r={},d={class:"table-of-contents"};function k(m,n){const a=o("router-link");return u(),i("div",null,[n[15]||(n[15]=s("h1",{id:"spring-boot-集成-redis",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring-boot-集成-redis"},[s("span",null,"Spring Boot 集成 Redis")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[p(a,{to:"#简介"},{default:t(()=>n[0]||(n[0]=[e("简介")])),_:1,__:[0]})]),s("li",null,[p(a,{to:"#环境准备"},{default:t(()=>n[1]||(n[1]=[e("环境准备")])),_:1,__:[1]}),s("ul",null,[s("li",null,[p(a,{to:"#添加依赖"},{default:t(()=>n[2]||(n[2]=[e("添加依赖")])),_:1,__:[2]})]),s("li",null,[p(a,{to:"#配置-redis-连接"},{default:t(()=>n[3]||(n[3]=[e("配置 Redis 连接")])),_:1,__:[3]})])])]),s("li",null,[p(a,{to:"#基础使用"},{default:t(()=>n[4]||(n[4]=[e("基础使用")])),_:1,__:[4]}),s("ul",null,[s("li",null,[p(a,{to:"#注入-redistemplate"},{default:t(()=>n[5]||(n[5]=[e("注入 RedisTemplate")])),_:1,__:[5]})]),s("li",null,[p(a,{to:"#基本操作示例"},{default:t(()=>n[6]||(n[6]=[e("基本操作示例")])),_:1,__:[6]})])])]),s("li",null,[p(a,{to:"#高级配置"},{default:t(()=>n[7]||(n[7]=[e("高级配置")])),_:1,__:[7]}),s("ul",null,[s("li",null,[p(a,{to:"#自定义-redistemplate"},{default:t(()=>n[8]||(n[8]=[e("自定义 RedisTemplate")])),_:1,__:[8]})]),s("li",null,[p(a,{to:"#使用-redis-缓存"},{default:t(()=>n[9]||(n[9]=[e("使用 Redis 缓存")])),_:1,__:[9]})])])]),s("li",null,[p(a,{to:"#redis-集群和哨兵配置"},{default:t(()=>n[10]||(n[10]=[e("Redis 集群和哨兵配置")])),_:1,__:[10]}),s("ul",null,[s("li",null,[p(a,{to:"#集群模式配置"},{default:t(()=>n[11]||(n[11]=[e("集群模式配置")])),_:1,__:[11]})]),s("li",null,[p(a,{to:"#哨兵模式配置"},{default:t(()=>n[12]||(n[12]=[e("哨兵模式配置")])),_:1,__:[12]})])])]),s("li",null,[p(a,{to:"#性能优化建议"},{default:t(()=>n[13]||(n[13]=[e("性能优化建议")])),_:1,__:[13]})]),s("li",null,[p(a,{to:"#常见问题解决"},{default:t(()=>n[14]||(n[14]=[e("常见问题解决")])),_:1,__:[14]})])])]),n[16]||(n[16]=c(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Redis是最常用的KV数据库，Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p><p>Spring Boot 为 Redis 集成提供了开箱即用的支持，通过 spring-boot-starter-data-redis 简化了配置流程。该 starter 会自动配置 Redis 连接工厂和模板类，开发者只需关注业务实现即可。</p><p>在客户端选择方面，Spring Boot 2.x 默认使用高性能的 Lettuce 客户端（支持响应式编程和连接复用），而 1.x 版本则采用 Jedis。</p><p>当存在相关依赖时，还会激活可选功能：</p><ul><li>若检测到 commons-pool2 依赖，会自动配置连接池</li><li>支持与 @Transactional 注解集成，提供事务性支持</li><li>支持 @Cacheable 等注解的 Redis 缓存实现</li><li>引入 spring-boot-starter-data-redis-reactive 时支持 ReactiveRedisTemplate</li></ul><p>实际开发中只需三步：</p><ol><li>引入 starter 依赖，自动获取 RedisTemplate 和连接工厂</li><li>通过 @Bean 自定义 RedisTemplate，主要配置序列化器（推荐使用 JSON 格式）</li><li>直接注入 RedisTemplate 即可操作各种数据结构</li></ol><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h3><p>在 <code>pom.xml</code> 中添加 Spring Boot Redis Starter 依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment">&lt;!-- 如果需要连接池 --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-redis-连接" tabindex="-1"><a class="header-anchor" href="#配置-redis-连接"><span>配置 Redis 连接</span></a></h3><p>在 <code>application.yml</code> 或 <code>application.properties</code> 中配置 Redis：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost     <span class="token comment"># Redis服务器地址</span></span>
<span class="line">    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>         <span class="token comment"># Redis服务器端口</span></span>
<span class="line">    <span class="token key atrule">password</span><span class="token punctuation">:</span>          <span class="token comment"># Redis密码（没有则留空）</span></span>
<span class="line">    <span class="token key atrule">database</span><span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token comment"># 使用的数据库索引（0-15）</span></span>
<span class="line">    <span class="token key atrule">timeout</span><span class="token punctuation">:</span> 3000ms    <span class="token comment"># 连接超时时间</span></span>
<span class="line">    <span class="token key atrule">lettuce</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">pool</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token key atrule">max-active</span><span class="token punctuation">:</span> <span class="token number">8</span>  <span class="token comment"># 连接池最大连接数</span></span>
<span class="line">        <span class="token key atrule">max-idle</span><span class="token punctuation">:</span> <span class="token number">8</span>    <span class="token comment"># 连接池最大空闲连接数</span></span>
<span class="line">        <span class="token key atrule">min-idle</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token comment"># 连接池最小空闲连接数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基础使用" tabindex="-1"><a class="header-anchor" href="#基础使用"><span>基础使用</span></a></h2><h3 id="注入-redistemplate" tabindex="-1"><a class="header-anchor" href="#注入-redistemplate"><span>注入 RedisTemplate</span></a></h3><p>Spring Boot 自动配置了 <code>RedisTemplate</code> 和 <code>StringRedisTemplate</code>：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Autowired</span></span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="基本操作示例" tabindex="-1"><a class="header-anchor" href="#基本操作示例"><span>基本操作示例</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 字符串操作</span></span>
<span class="line">stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> value <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 对象操作（自动序列化）</span></span>
<span class="line"><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">User</span> cachedUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user:1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Hash操作</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user:2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user:2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;25&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token string">&quot;user:2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// List操作</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span><span class="token string">&quot;messages&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&quot;messages&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Set操作</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;tags&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;spring&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;redis&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 删除key</span></span>
<span class="line">redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="高级配置" tabindex="-1"><a class="header-anchor" href="#高级配置"><span>高级配置</span></a></h2><h3 id="自定义-redistemplate" tabindex="-1"><a class="header-anchor" href="#自定义-redistemplate"><span>自定义 RedisTemplate</span></a></h3><p>RedisTemplate 是 Spring Data Redis 提供的核心操作类，通过自定义配置可以优化序列化方式、增强功能并适应特定业务场景。</p><p>默认实现的局限性：</p><ul><li>使用 JDK 序列化，可读性差且占用空间大</li><li>所有 key 和 value 使用相同序列化方式</li><li>不支持复杂对象的 JSON 序列化</li></ul><p>扩展一般包含以下内容：</p><ol><li>配置连接工厂：有 JedisConnectionFactory、LettuceConnectionFactory 等</li><li>自定义 key 和 value 序列化器：key 采用 StringRedisSerializer，value 根据业务场景选择</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 配置连接工厂，有 JedisConnectionFactory、LettuceConnectionFactory 等</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 使用Jackson2JsonRedisSerializer序列化value</span></span>
<span class="line">        <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// ObjectMapper 是 Jackson 的核心类，负责序列化和反序列化</span></span>
<span class="line">        <span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 默认配置下会忽略 transient 字段，仅序列化 public 字段和方法</span></span>
<span class="line">        <span class="token comment">// PropertyAccessor.ALL 表示对所有属性类型生效</span></span>
<span class="line">        <span class="token comment">// Visibility.ANY 表示所有访问修饰符的字段都可见</span></span>
<span class="line">        mapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span><span class="token class-name">PropertyAccessor</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">,</span> <span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 为非 final 类添加类型信息</span></span>
<span class="line">        mapper<span class="token punctuation">.</span><span class="token function">activateDefaultTyping</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">getPolymorphicTypeValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                                   <span class="token class-name">ObjectMapper<span class="token punctuation">.</span>DefaultTyping</span><span class="token punctuation">.</span><span class="token constant">NON_FINAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        serializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>mapper<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 设置序列化器：key采用StringRedisSerializer，value采用上面配置的Jackson2JsonRedisSerializer</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>serializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> template<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化方案对比：</p><table><thead><tr><th>序列化方式</th><th>优点</th><th>缺点</th><th>适用场景</th></tr></thead><tbody><tr><td>StringRedisSerializer</td><td>可读性好，性能高</td><td>仅支持String</td><td>Key序列化</td></tr><tr><td>Jackson2JsonRedisSerializer</td><td>可读性好，支持复杂对象</td><td>稍慢于二进制，需处理类型信息</td><td>复杂对象存储（需明确类型）</td></tr><tr><td>GenericJackson2JsonRedisSerializer</td><td>自动类型信息，支持多态对象</td><td>额外存储类型信息，反序列化需要类型匹配</td><td>多类型Value</td></tr><tr><td>GenericFastJsonRedisSerializer</td><td>序列化速度快，中文支持好</td><td>安全性争议，类型信息处理不如 Jackson 灵活</td><td>高性能场景，中文内容存储</td></tr><tr><td>JdkSerializationRedisSerializer</td><td>支持所有Serializable对象</td><td>二进制不可读，兼容性差</td><td>不推荐使用</td></tr></tbody></table><p>各方案选型建议</p><ol><li>Key 序列化： ✅ 强制使用 StringRedisSerializer（所有方案统一）</li><li>简单 Value 场景： ✅ StringRedisSerializer（如缓存字符串、数字等）</li><li>复杂对象存储： <ul><li>需要类型安全 → Jackson2JsonRedisSerializer</li><li>追求极致性能 → GenericFastJsonRedisSerializer</li><li>多态对象支持 → GenericJackson2JsonRedisSerializer</li></ul></li><li>不推荐方案： ❌ JdkSerializationRedisSerializer（除非兼容旧系统）</li></ol><p>安全注意事项： 使用 FastJson 时需特别注意：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 必须配置安全模式（防止反序列化漏洞）</span></span>
<span class="line"><span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSafeMode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或白名单控制</span></span>
<span class="line"><span class="token class-name">ParserConfig</span><span class="token punctuation">.</span><span class="token function">getGlobalInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAccept</span><span class="token punctuation">(</span><span class="token string">&quot;com.yourpackage.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-redis-缓存" tabindex="-1"><a class="header-anchor" href="#使用-redis-缓存"><span>使用 Redis 缓存</span></a></h3><ol><li>启用缓存支持：</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token annotation punctuation">@EnableCaching</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MyApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@EnableCaching</code>也可放在<code>RedisConfig</code>类上（如果自定义RedisTemplate）。</p><ol start="2"><li>在方法上使用缓存注解：</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Service</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 模拟数据库查询</span></span>
<span class="line">        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        userRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="redis-集群和哨兵配置" tabindex="-1"><a class="header-anchor" href="#redis-集群和哨兵配置"><span>Redis 集群和哨兵配置</span></a></h2><h3 id="集群模式配置" tabindex="-1"><a class="header-anchor" href="#集群模式配置"><span>集群模式配置</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">cluster</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.1.1<span class="token punctuation">:</span><span class="token number">7000</span><span class="token punctuation">,</span>192.168.1.1<span class="token punctuation">:</span><span class="token number">7001</span><span class="token punctuation">,</span>192.168.1.2<span class="token punctuation">:</span><span class="token number">7000</span></span>
<span class="line">      <span class="token key atrule">max-redirects</span><span class="token punctuation">:</span> <span class="token number">3</span>  <span class="token comment"># 最大重定向次数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="哨兵模式配置" tabindex="-1"><a class="header-anchor" href="#哨兵模式配置"><span>哨兵模式配置</span></a></h3><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">redis</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">master</span><span class="token punctuation">:</span> mymaster</span>
<span class="line">      <span class="token key atrule">nodes</span><span class="token punctuation">:</span> 192.168.1.1<span class="token punctuation">:</span><span class="token number">26379</span><span class="token punctuation">,</span>192.168.1.2<span class="token punctuation">:</span><span class="token number">26379</span><span class="token punctuation">,</span>192.168.1.3<span class="token punctuation">:</span><span class="token number">26379</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="性能优化建议" tabindex="-1"><a class="header-anchor" href="#性能优化建议"><span>性能优化建议</span></a></h2><ol><li>合理使用连接池配置</li><li>对大value考虑压缩后再存储</li><li>批量操作使用 <code>multiSet</code>/<code>multiGet</code> 代替循环</li><li>高频访问数据考虑本地缓存+Redis多级缓存</li><li>监控Redis内存使用情况，设置合理的淘汰策略</li></ol><h2 id="常见问题解决" tabindex="-1"><a class="header-anchor" href="#常见问题解决"><span>常见问题解决</span></a></h2><ol><li><strong>连接超时</strong>：检查防火墙设置和Redis配置的<code>timeout</code></li><li><strong>序列化错误</strong>：确保所有存储的对象实现<code>Serializable</code>或配置了合适的序列化器</li><li><strong>内存溢出</strong>：监控Redis内存使用，配置<code>maxmemory-policy</code></li><li><strong>缓存穿透</strong>：对空结果也进行缓存或使用布隆过滤器</li></ol><p>通过以上配置和使用方式，Spring Boot应用可以高效地集成Redis，实现缓存、会话共享、分布式锁等功能。</p>`,51))])}const b=l(r,[["render",k]]),g=JSON.parse('{"path":"/posts/spring/spring-boot-redis.html","title":"Spring Boot 集成 Redis","lang":"zh-CN","frontmatter":{"title":"Spring Boot 集成 Redis","date":"2025-06-05T05:37:32.740Z","category":["spring","spring-boot-redis"],"tags":["spring","spring-boot-redis"]},"git":{"updatedTime":1750302794000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"5d4102577494afef85517112563f786cf6fdf9b4","time":1750302794000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Boot Redis 2、Spring 设计模式"}]},"filePathRelative":"posts/spring/spring-boot-redis.md","excerpt":"\\n\\n<h2>简介</h2>\\n<p>Redis是最常用的KV数据库，Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p>\\n<p>Spring Boot 为 Redis 集成提供了开箱即用的支持，通过 spring-boot-starter-data-redis 简化了配置流程。该 starter 会自动配置 Redis 连接工厂和模板类，开发者只需关注业务实现即可。</p>\\n<p>在客户端选择方面，Spring Boot 2.x 默认使用高性能的 Lettuce 客户端（支持响应式编程和连接复用），而 1.x 版本则采用 Jedis。</p>\\n"}');export{b as comp,g as data};
