import{_ as d,c as m,a as n,e as t,d as i,w as e,b as s,r as u,o as v}from"./app-BaJBWwWi.js";const y={},b={class:"table-of-contents"};function A(f,a){const p=u("router-link"),r=u("Tip"),o=u("Mermaid"),k=u("CodeTabs");return v(),m("div",null,[a[33]||(a[33]=n("h1",{id:"spring-aop-实现原理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-aop-实现原理"},[n("span",null,"Spring AOP 实现原理")])],-1)),n("nav",b,[n("ul",null,[n("li",null,[t(p,{to:"#spring-aop-初始化过程"},{default:e(()=>a[0]||(a[0]=[s("Spring AOP 初始化过程")])),_:1,__:[0]}),n("ul",null,[n("li",null,[t(p,{to:"#解析配置并创建aspectjawareadvisorautoproxycreator"},{default:e(()=>a[1]||(a[1]=[s("解析配置并创建AspectJAwareAdvisorAutoProxyCreator")])),_:1,__:[1]})]),n("li",null,[t(p,{to:"#代理的创建"},{default:e(()=>a[2]||(a[2]=[s("代理的创建")])),_:1,__:[2]})]),n("li",null,[t(p,{to:"#代理的生成"},{default:e(()=>a[3]||(a[3]=[s("代理的生成")])),_:1,__:[3]})])])]),n("li",null,[t(p,{to:"#关键类解析"},{default:e(()=>a[4]||(a[4]=[s("关键类解析")])),_:1,__:[4]}),n("ul",null,[n("li",null,[t(p,{to:"#aopnamespacehandler"},{default:e(()=>a[5]||(a[5]=[s("AopNamespaceHandler")])),_:1,__:[5]})]),n("li",null,[t(p,{to:"#abstractautoproxycreator"},{default:e(()=>a[6]||(a[6]=[s("AbstractAutoProxyCreator")])),_:1,__:[6]})]),n("li",null,[t(p,{to:"#aopproxyfactory-aopproxy"},{default:e(()=>a[7]||(a[7]=[s("AopProxyFactory & AopProxy")])),_:1,__:[7]})]),n("li",null,[t(p,{to:"#advisor"},{default:e(()=>a[8]||(a[8]=[s("Advisor")])),_:1,__:[8]})])])])])]),a[34]||(a[34]=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"AOP是基于IOC的Bean加载来实现的。")],-1)),a[35]||(a[35]=n("h2",{id:"spring-aop-初始化过程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-aop-初始化过程"},[n("span",null,"Spring AOP 初始化过程")])],-1)),n("ol",null,[n("li",null,[a[21]||(a[21]=s("解析配置并创建")),a[22]||(a[22]=n("code",null,"AspectJAwareAdvisorAutoProxyCreator",-1)),a[23]||(a[23]=s("，分为XML配置、注解配置和自动注册三种方式，下面以XML配置为例介绍： ")),n("ol",null,[n("li",null,[a[10]||(a[10]=s("Spring 容器解析 XML 配置文件的过程中会调用")),t(r,null,{default:e(()=>a[9]||(a[9]=[s("AopNamespaceHandler.init()")])),_:1,__:[9]})]),n("li",null,[a[12]||(a[12]=n("code",null,"AopNamespaceHandler.init()",-1)),a[13]||(a[13]=s("方法会注册")),a[14]||(a[14]=n("code",null,"aop:aspectj-autoproxy",-1)),a[15]||(a[15]=s("的解析类：")),t(r,null,{default:e(()=>a[11]||(a[11]=[s("AspectJAutoProxyBeanDefinitionParser")])),_:1,__:[11]})]),n("li",null,[a[17]||(a[17]=n("code",null,"AspectJAutoProxyBeanDefinitionParser",-1)),a[18]||(a[18]=s("的")),a[19]||(a[19]=n("code",null,"parse()",-1)),a[20]||(a[20]=s("方法创建了")),t(r,null,{default:e(()=>a[16]||(a[16]=[s("AspectJAwareAdvisorAutoProxyCreator")])),_:1,__:[16]})])])]),a[24]||(a[24]=i("<li>创建代理：识别需要代理的Bean，如需代理返回代理对象，否则返回原始Bean <ol><li><code>AspectJAwareAdvisorAutoProxyCreator</code>实现了接口<code>BeanPostProcessor</code></li><li>创建代理的方法是<code>postProcessAfterInitialization</code>：如果bean被子类标识为代理，则使用配置的拦截器创建一个代理；否则返回原始Bean。</li></ol></li><li>生成代理：代理对象的实际创建/生成过程，Spring AOP支持两种代理方式： <ol><li>JDK动态代理</li><li>CGLIB代理</li></ol></li><li>拦截器链构建 <ol><li>将各种通知类型（Before、After等）转换为MethodInterceptor</li><li>跟据通知的优先级和顺序注解(@Order)排序：@Around → @Before → @After → @AfterReturning/@AfterThrowing</li><li>代理对象增强：生成的代理对象内部包含原始对象和拦截器链，方法调用时，会按顺序执行拦截器链</li></ol></li>",3))]),a[36]||(a[36]=n("p",null,"初始化流程图如下：",-1)),t(o,{id:"mermaid-97",code:"eJyNU09v0zAcvfMpfNwODMExh0lZJ2ADISS4TUizUq9Y6uxge7ByKv+2oW5dD2MCdepApVu5tIxJQCiwL1M77mlfYUmcRFva/fEltvPe8/s9/8zRsyVEHDSNYYHBxWsgGC5kAjvYhUSAHCUCYoIYgBw8chkmBdnx5Kf2EPIuJPmiwdnUfQAXEXehg+LtCD7EeciogzinhkUIFVBgSuwXkCGbu8gRs/aSoAFsuZRjCApqhDIay6Xb0An+lUKZ0+sh8GPICkiEML/eUZ9XpxAkCQjM3ZwAer+pGrXBuw3/X0d6P+VaXfb+zCdeIl/55zhwnPU1/yTSCUea2fXJyXRuAYYWGOJPx8ZHAuOcLEywGBsHfm9TH63qSkt6P+TBa/39jb/VPv67rnbKfm/NLHW3pbY9dfgh2DdGr+AzuYbgODB3awL0e02/tmLoaQmnjaV3ZAF12JYr67JWDcP5+jbkxY2Q4ZiYLWBkw5Blp9H/X7lE36VcxEt7QSA2E2SBYRG/jLoiIaeEjLlmWe221MeurO0Ndsp675UpLaHBogCj9kdIpv1jAV39JTe345C6nj74kuGl2CHqoPxeVb7NTt+7kbtzf2bqXN7ZMvTRlqw3LjgwNnq2t85noSJHoP974/LSRynK6q7cr6SvJNQj+Wgafk8AkDy9zA=="}),a[37]||(a[37]=n("h3",{id:"解析配置并创建aspectjawareadvisorautoproxycreator",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#解析配置并创建aspectjawareadvisorautoproxycreator"},[n("span",null,[s("解析配置并创建"),n("code",null,"AspectJAwareAdvisorAutoProxyCreator")])])],-1)),t(o,{id:"mermaid-101",code:"eJyVkr1OwzAUhfc+hdWpHWj2SFQqjRADQigTY2+Tm8TCf9gOKSMTLCCYYGdi68CExOME1LfAbjs0QApstu453zm6ugbPShQJRhRyDbxDCBkzMOYYbHHC2UgpRhOwVIqxFBZndmc4HE2N1ZDY78OQaMw0mqLX96R24QYlXjlgyvAH4Jq3hyD2nVjqiyZ6q9ulRJhByewhNdZrNjghk5D6v5NQQb3NrNjtHgd0S2maYoQUdTutxbAFpTF30aj/iVvXbk4jmZQchdvT7+g/AFzMEXA0ChI8AJEy1DEayc6X7OWj1ydkcXlVX88nM86ECUGq3W5hrQqDoKqqgVGaijxz14aV1KcDqfPAJAVyCJy0OyH1/Vt9d/Px/Lp4eKmf5u+Pt75dW64/Jam+TkNf31chpPMJVGYYdw=="}),a[38]||(a[38]=n("h3",{id:"代理的创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代理的创建"},[n("span",null,"代理的创建")])],-1)),t(o,{id:"mermaid-105",code:"eJylU0FPE0EUvvMrxttuoiTtsQaSpUBSNS1pS6InMmxfYeN2Zp2ZpdZwaIwKxNhyMMTUCsFG8WYEExI58Gfc7fZfODO7trQ2GMJpdud9773v+94bDs98IDYsOniD4doMQh5mwrEdDxOBVjkwhLk+J0JZBlhQHbW4B7Z4YNUxA6uy5XDKLF/QFUafNxLY9OTUrbLTOnudC4Zt8Z8UHZJ3Ssi9+fkElEEe5ULGbODcqgpgOeIIB7vOCywcSmRCghzlpDJoA0QW25vwEBqGKTHYFQgwcxu6SxGqwJSlfJZBjW6BYSdgc24OrQMmKGzvB3vvws7PQfe033n1+6LX338jCw3bIdlPc82g6PJ98PEwaB0FJ28XZLKEgcvhH/SIXp1hL1fNgxKFWUwxJikwk9xL1Gc2VFQxPmtTIrBDuKGI5XENTLS9je5gNYi/GJkz0oCCry/Dw66Chx++D5qd6HKnfKVu2PoStHtR6zxoH4S7B1HzdQINdncGnz73f1xoOkPyqeu1xmqRw3OkyrCctW8Ln0HWxZwrpnyT+m6l9NTx1J9koVZIKrdIJVkmvkyZKmaYSPq/WFjLF8prK8XC4yeqeqxG0sPUC45+9Y+bkmHMOzo/k9rkfIY34elx2N2LhYRn36KTHpomZjSKMRs9f2TjXbRAqSuvZ5etR6WleEQ39ARd1zydQbb6Ar2Thnl/HJvWWB3LIAL1JKovJjQwkIYT5CUv6HZqy8XVpUkuk2V0p3LDkw9ovIgOqG3U0zfM6YVi266yjmFAKtoxec78AbvK4Tk="}),a[39]||(a[39]=i(`<p>创建代理的方法是postProcessAfterInitialization：如果bean被子类标识为代理，则使用配置的拦截器创建一个代理：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token comment">// 如果不是提前暴露的代理</span></span>
<span class="line">     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> bean<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>wrapIfNecessary()方法用于判断是否需要创建代理，如果Bean能够获取到advisor才需要创建代理：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 如果bean是通过TargetSource接口获取</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> bean<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 如果bean是切面类</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> bean<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 如果是aop基础类？是否跳过？</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 重点：获取所有advisor，如果没有获取到，那说明不要进行增强，也就不需要代理了。</span></span>
<span class="line">      <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">TargetSource</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> <span class="token constant">DO_NOT_PROXY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> proxy<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          <span class="token keyword">return</span> bean<span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> bean<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>getAdvicesAndAdvisorsForBean()方法获取所有的Advisor:</p>`,5)),t(o,{id:"mermaid-117",code:"eJydkk9LAkEYxu99ijkqFKFHKWGzolNGFNQpxt03G9h2t5kp6tY/SCksSoXKCiKiS1R0iLQ/X8aZ1VNfoXXdVVkzotMM7zy/533e4WWwsgqGCqMEpyle7kPIwpQTlVjY4GiWAUWYuWfgKUEBc9N9VVKMU6xyRVsjzKTKKjenqLm+4Ul+BiP/JqN/I93sA/G4j8VQGly5CkwxNA9k4yYdAWyEwg7iz9RBRWJokRjamE7SJKWDT3XKI536aAyp2NCIhnlLjIZdj0SwHgqjoRQdjNdyL+KwKLObspQVmb36xbX9VLHPdpt3WXyVzwU7fyUzRx7Z7h11e+NmeRo4JbCG9QnQLXAGbnT1kMaMv6bu0LKZJcydtIpl6RuhrnH6U45XQseseZvEy+ANIrMfIvNY23kXN1einLfzd9VyrqV2JurKH0wB6xzaOUIQ+Paw20bcbsvLUr20Wbvd+no7qJZv7MqpuD9yfk3un4inQm9/x8RfmZ7uD69eQeaORfmwh5mTNYAHFqixfzFU+8yL80vfsPBoV3aRzBTRaHJhMjmzMDWdnJvv+wblGGjE"}),a[40]||(a[40]=i(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Nullable</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TargetSource</span> targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> advisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">DO_NOT_PROXY</span> <span class="token operator">:</span> advisors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 获取所有切面类的切面方法生成Advisor</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> candidateAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 找到能够应用于beanClass的Advisor</span></span>
<span class="line">  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> eligibleAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span>candidateAdvisors<span class="token punctuation">,</span> beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 如果需要，交给子类拓展</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">extendAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 对Advisor排序</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eligibleAdvisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    eligibleAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sortAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> eligibleAdvisors<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorRetrievalHelper <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;No BeanFactoryAdvisorRetrievalHelper available&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorRetrievalHelper<span class="token punctuation">.</span><span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> <span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> candidateAdvisors<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">ProxyCreationContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxiedBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token class-name">List</span> var4<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    var4 <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span>candidateAdvisors<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">ProxyCreationContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxiedBeanName</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> var4<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代理的生成" tabindex="-1"><a class="header-anchor" href="#代理的生成"><span>代理的生成</span></a></h3><p>获取所有advisor后，如果有advisor，则说明需要增强，即需要创建代理，<code>AbstractAdvisorAutoProxyCreator::createProxy()</code>方法是创建代理的入口方法：</p>`,3)),t(o,{id:"mermaid-125",code:"eJx9kM1Kw0AUhfd9ilm2oLivUggWQRAtiA8wmdyW0TQz3pmI3QpKNxVXbqSLIm4rbhQN+jRJqm/h5GdCCNVVMnO/c87co+A8hIBBn9MR0nGLEElRc8YlDTQ5UYCEquJLGsNdBKpFPndcpZEy7XgXXAl0Qi0GKC4nJdIQ5qM9gwucZOr62aB52GavZwO6hGU/kGPtjiFscgbVxV2STB+S6COOHld3N8nbU3J7lT/7b8HP9Wz1uawLGnj1CDfkvlcuqNou0OCQjmGDKAmMDznbDzQgA2lg1dn+N3QEuliG+VSpA0E9wGyvOmVU9QqPQykFatuFI2RZR7beGtDI+zCkoa8tWqU3HYzBetR42BvbrHM0KLoiOy5u9eKveTpbpvNFHL3Wq2+femfp9J6NfO5m/tbGOFZ9IugQA1JW//z+/bJo/QIznQXx"}),a[41]||(a[41]=n("p",null,[s("核心方法是"),n("code",null,"DefaultAopProxyFactory::createAopProxy()"),s("，根据依据条件创建jdk或cglib代理：")],-1)),t(k,{id:"129",data:[{id:"AbstractAdvisorAutoProxyCreator"},{id:"ProxyFactory"},{id:"ProxyCreatorSupport"},{id:"DefaultAopProxyFactory"}],"tab-id":"java"},{title0:e(({value:l,isActive:c})=>a[25]||(a[25]=[s("AbstractAdvisorAutoProxyCreator")])),title1:e(({value:l,isActive:c})=>a[26]||(a[26]=[s("ProxyFactory")])),title2:e(({value:l,isActive:c})=>a[27]||(a[27]=[s("ProxyCreatorSupport")])),title3:e(({value:l,isActive:c})=>a[28]||(a[28]=[s("DefaultAopProxyFactory")])),tab0:e(({value:l,isActive:c})=>a[29]||(a[29]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"createProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" beanClass"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token annotation punctuation"},"@Nullable"),s(),n("span",{class:"token class-name"},"String"),s(" beanName"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token annotation punctuation"},"@Nullable"),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" specificInterceptors"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TargetSource"),s(" targetSource"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("beanFactory "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"ConfigurableListableBeanFactory"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"AutoProxyUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeTargetClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ConfigurableListableBeanFactory"),n("span",{class:"token punctuation"},")"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("beanFactory"),n("span",{class:"token punctuation"},","),s(" beanName"),n("span",{class:"token punctuation"},","),s(" beanClass"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 创建代理工厂")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"ProxyFactory"),s(" proxyFactory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ProxyFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"copyFrom"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isProxyTargetClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isProxyClass"),n("span",{class:"token punctuation"},"("),s("beanClass"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token class-name"},"ClassUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isLambdaClass"),n("span",{class:"token punctuation"},"("),s("beanClass"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"Class"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" var6 "),n("span",{class:"token operator"},"="),s(" beanClass"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getInterfaces"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"int"),s(" var7 "),n("span",{class:"token operator"},"="),s(" var6"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"int"),s(" var8 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" var8 "),n("span",{class:"token operator"},"<"),s(" var7"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token operator"},"++"),s("var8"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" ifc "),n("span",{class:"token operator"},"="),s(" var6"),n("span",{class:"token punctuation"},"["),s("var8"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addInterface"),n("span",{class:"token punctuation"},"("),s("ifc"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shouldProxyTargetClass"),n("span",{class:"token punctuation"},"("),s("beanClass"),n("span",{class:"token punctuation"},","),s(" beanName"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setProxyTargetClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"evaluateProxyInterfaces"),n("span",{class:"token punctuation"},"("),s("beanClass"),n("span",{class:"token punctuation"},","),s(" proxyFactory"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"Advisor"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" advisors "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"buildAdvisors"),n("span",{class:"token punctuation"},"("),s("beanName"),n("span",{class:"token punctuation"},","),s(" specificInterceptors"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addAdvisors"),n("span",{class:"token punctuation"},"("),s("advisors"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setTargetSource"),n("span",{class:"token punctuation"},"("),s("targetSource"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"customizeProxyFactory"),n("span",{class:"token punctuation"},"("),s("proxyFactory"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setFrozen"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("freezeProxy"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"advisorsPreFiltered"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setPreFiltered"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"ClassLoader"),s(" classLoader "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProxyClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("classLoader "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"SmartClassLoader"),s(),n("span",{class:"token operator"},"&&"),s(" classLoader "),n("span",{class:"token operator"},"!="),s(" beanClass"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        classLoader "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"SmartClassLoader"),n("span",{class:"token punctuation"},")"),s("classLoader"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getOriginalClassLoader"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" proxyFactory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),s("classLoader"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:l,isActive:c})=>a[30]||(a[30]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"Object"),s(),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@Nullable"),s(),n("span",{class:"token class-name"},"ClassLoader"),s(" classLoader"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createAopProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getProxy"),n("span",{class:"token punctuation"},"("),s("classLoader"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:e(({value:l,isActive:c})=>a[31]||(a[31]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token keyword"},"synchronized"),s(),n("span",{class:"token class-name"},"AopProxy"),s(),n("span",{class:"token function"},"createAopProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("active"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"activate"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAopProxyFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createAopProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"AopProxyFactory"),s(),n("span",{class:"token function"},"getAopProxyFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("aopProxyFactory"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab3:e(({value:l,isActive:c})=>a[32]||(a[32]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"AopProxy"),s(),n("span",{class:"token function"},"createAopProxy"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"AdvisedSupport"),s(" config"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"AopConfigException"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 没有优化 && 没有强制使用cglib代理 && 目标类实现了接口 时生成JDK动态代理")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},'// config.isProxyTargetClass()是通过<aop:config proxy-target-class="true" /> 来配置的，表示优先使用cglib代理，默认是false；')]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"NativeDetector"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"inNativeImage"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s()]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token operator"},"||"),s(),n("span",{class:"token operator"},"!"),s("config"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isOptimize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),s("config"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isProxyTargetClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"hasNoUserSuppliedProxyInterfaces"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"JdkDynamicAopProxy"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(" targetClass "),n("span",{class:"token operator"},"="),s(" config"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTargetClass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("targetClass "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"AopConfigException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"TargetSource cannot determine target class: Either an interface or a target is required for proxy creation."'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 目标类不是接口，不是代理类，不是Lambda表达式时生成Cglib代理，否则生成JDK动态代理")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"AopProxy"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"!"),s("targetClass"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isInterface"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token class-name"},"Proxy"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isProxyClass"),n("span",{class:"token punctuation"},"("),s("targetClass"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token class-name"},"ClassUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isLambdaClass"),n("span",{class:"token punctuation"},"("),s("targetClass"),n("span",{class:"token punctuation"},")"),s()]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ObjenesisCglibAopProxy"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"JdkDynamicAopProxy"),n("span",{class:"token punctuation"},"("),s("config"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[42]||(a[42]=n("h2",{id:"关键类解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#关键类解析"},[n("span",null,"关键类解析")])],-1)),a[43]||(a[43]=n("h3",{id:"aopnamespacehandler",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aopnamespacehandler"},[n("span",null,"AopNamespaceHandler")])],-1)),a[44]||(a[44]=n("p",null,"AopNamespaceHandler 注册了四个解析器，类图如下：",-1)),t(o,{id:"mermaid-152",code:"eJylkctKAzEUhvd5iiwrTnBfSmF0hOKiFHyCQ3I6RGZyQiaFirqtGxdupSCCC4vgyo248Gk6o49hZwZBcXqh3SUk3/efixCCee0TbPOQbB9SzCxI7IFRCTpevM7yyc38fZJPp/O356+nx+L+Nr+bsZKTCWRZpCF2kDL+j+1cCtEkZbwC+RGZoY4PEUyEQ22012QG4DJ0F4zzfVseW8cJpmh8UD8sEI9jv8frQjpAti0rzUG3eLj+fPlg/OrHH2YWpT8JR54GjsbnOydBJTwTsDDa0tgQemqdNnHd2sih2ir0t0+SRdVQf4SSHHiqbaq+YatPCgP+92uPEoUu4A0hTTsXortiN8uZTea9nN5kcCvotWNi3+iFHZA="}),a[45]||(a[45]=n("p",null,"时序图如下：",-1)),t(o,{id:"mermaid-156",code:"eJy1kDEKwkAQRfucYsuI7AVSBKIpxEKEnGDZjGFBd9bZXdALWFnYimBjodjaiOcx4jFUAhYmZWz/zP+P/znngVNuChFL0IzEDKwREgZC51Mg9ricytX6fluVu939en4eD4/9ptyego/PwtyDlpAqUZCYBcxbIB7H3d+YiCmtXNip0nogdAqTj6RQjwW9XQGroTmPa2LmjUFyESMolHVATVlhH/VEFU2nTqucxBqQbph4h2PCxfKPxBQkknBIYSbRQN7A+760WzIzpHRRTeoJ8uaSL2AA4hQ="}),a[46]||(a[46]=i('<h3 id="abstractautoproxycreator" tabindex="-1"><a class="header-anchor" href="#abstractautoproxycreator"><span>AbstractAutoProxyCreator</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>AbstractAutoProxyCreator 是 Spring AOP 自动代理创建机制的核心抽象类，它实现了 Spring 容器中 Bean 的自动代理功能。 AbstractAutoProxyCreator 是一个 BeanPostProcessor，它会在 Spring 容器初始化 Bean 后，检查该 Bean 是否需要被代理（根据切面配置），并在需要时创建代理对象。</p></div><h4 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系"><span>继承关系</span></a></h4>',3)),t(o,{id:"mermaid-168",code:"eJylkslK7EAUhvd5igI393LNqu/mNncTFUEXKvQTlLHSlqarQtWJ2g4gKHbrwmHbDjggigsHBFGD9st0hn4LK4m2Y7TFTQh1vv+v89c5uq5rQMEm+eDyODo68KuV5vZ+wzsI15f86qbv3YYXnhZTpo2l7KG4KHBJGxJ8qtzNmUWL6P+srqPkQH1MIiUXBddxuIAUe3uaCoxhCQKbYLjAUzdBMHChdRHMelWBi7IxiQX5Ak/aQrFoiEto3TWjIfTHeT7pIhYXpI9JwAwoBsrZr+5Y2lkAQVnx9xvesICIPkYVa9PplB8cHiMmtARzmoSyTZDBaAnbyKK2ne+w/lmdqlM+TvIduVzu8V+fpCMwmv/rTCXxXnWa5nvVWZL7Hai1waRmhRIW0I5ju2BbM8gqx6NAUeXEXzl+uVfB1q1fvQpri8HutV9fCFbuoou9eNkU7a+dNbzD5nwtqldC7yhYrme6I/90J1w9j/1Pa42b5ea8F91vqOFkCpIsccQBXCLvsnwua1VHJqh6l2z1x/WnWVsCK841wRXkR1aGdNRK9idTyzT6mnk0Y4zD8xY86b7fGFJmPcTCrp35UA9qwdIF"}),a[47]||(a[47]=i(`<p>AbstractAutoProxyCreator 实现了两个接口：</p><ul><li><p>BeanFactoryAware：BeanFactoryAware接口用于获取BeanFactory，并将BeanFactory注入到AbstractAutoProxyCreator中。</p></li><li><p>SmartInstantiationAwareBeanPostProcessor：SmartInstantiationAwareBeanPostProcessor接口是BeanPostProcessor的子接口，核心方法是<code>postProcessBeforeInstantiation</code>和<code>postProcessAfterInitialization</code>：</p><ul><li><code>postProcessBeforeInstantiation</code>在Bean初始化后调用，决定是否创建代理<br> 主要子类及功能：</li></ul></li><li><p>BeanNameAutoProxyCreator</p><ul><li>基于 Bean 名称的自动代理创建器</li><li>通过配置 Bean 名称列表来决定哪些 Bean 需要代理</li><li>不依赖 AspectJ 注解或 Pointcut 表达式</li><li>适合简单的、基于名称的代理需求</li></ul></li><li><p>AbstractAdvisorAutoProxyCreator</p><ul><li>AspectJAwareAdvisorAutoProxyCreator：支持 AspectJ 注解风格的切面定义的基础自动代理创建器，是 Spring AOP 自动代理创建器的基类，它的注册过程取决于 Spring 配置方式 <ul><li>能够识别容器中的 Advisor Bean</li><li>支持基于 Pointcut 的匹配</li></ul></li><li>AnnotationAwareAspectJAutoProxyCreator：支持 AspectJ 注解风格的自动代理创建器（最常用的实现） <ul><li>匹配 <code>@Aspect</code> 或 <code>Advisor</code> 注解的切面类</li><li>自动检测 @Before, @After, @Around 等注解</li><li>是 @EnableAspectJAutoProxy 默认注册的类型</li></ul></li><li>InfrastructureAdvisorAutoProxyCreator <ul><li>专门为 Spring 基础设施 Bean 提供自动代理支持。</li><li>只处理带有 InfrastructureAdvisor 的 Bean</li><li>通常用于 Spring 内部事务管理、缓存等基础设施</li><li>不处理常规应用 @Aspect 切面</li></ul></li><li>DefaultAdvisorAutoProxyCreator <ul><li>自动应用容器中所有的 Advisor</li><li>不需要显式配置每个 Bean 的代理</li><li>适合需要全局应用某些切面的场景</li></ul></li></ul></li></ul><table><thead><tr><th>类名</th><th>代理触发条件</th><th>主要用途</th><th>支持注解</th></tr></thead><tbody><tr><td>BeanNameAutoProxyCreator</td><td>匹配配置的 Bean 名称</td><td>简单名称匹配场景</td><td></td></tr><tr><td>AspectJAwareAdvisorAutoProxyCreator</td><td>能够识别容器中的 Advisor Bean</td><td></td><td></td></tr><tr><td>AnnotationAwareAspectJAutoProxyCreator</td><td>匹配 @Aspect 类或 Advisor</td><td>常规应用 AOP</td><td>@Before, @After, @Around</td></tr><tr><td>InfrastructureAdvisorAutoProxyCreator</td><td>匹配 InfrastructureAdvisor</td><td>Spring 内部基础设施</td><td></td></tr><tr><td>DefaultAdvisorAutoProxyCreator</td><td>匹配所有 Advisor</td><td>全局切面应用</td><td></td></tr></tbody></table><h4 id="注册过程" tabindex="-1"><a class="header-anchor" href="#注册过程"><span>注册过程</span></a></h4><h5 id="xml配置方式注册" tabindex="-1"><a class="header-anchor" href="#xml配置方式注册"><span>XML配置方式注册</span></a></h5><p>当使用传统 XML 配置 AOP 时，注册发生在 <a href="aop:config" target="_blank" rel="noopener noreferrer">aop:config</a> 或 <a href="aop:aspectj-autoproxy" target="_blank" rel="noopener noreferrer">aop:aspectj-autoproxy</a> 标签解析过程中：</p><ol><li>解析 aop 命名空间时，AopNamespaceHandler 会处理 <a href="aop:aspectj-autoproxy" target="_blank" rel="noopener noreferrer">aop:aspectj-autoproxy</a> 标签</li><li>调用 AspectJAutoProxyBeanDefinitionParser.parse() 方法</li><li>最终注册 AnnotationAwareAspectJAutoProxyCreator</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">AspectJAutoProxyBeanDefinitionParser</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionParser</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token annotation punctuation">@Nullable</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token class-name">BeanDefinition</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Element</span> element<span class="token punctuation">,</span> <span class="token class-name">ParserContext</span> parserContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">AopNamespaceUtils</span><span class="token punctuation">.</span><span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>parserContext<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">extendBeanDefinition</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> parserContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AopNamespaceUtils</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">ParserContext</span> parserContext<span class="token punctuation">,</span> <span class="token class-name">Element</span> sourceElement<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token class-name">AopConfigUtils</span><span class="token punctuation">.</span><span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>parserContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parserContext<span class="token punctuation">.</span><span class="token function">extractSource</span><span class="token punctuation">(</span>sourceElement<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">useClassProxyingIfNecessary</span><span class="token punctuation">(</span>parserContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sourceElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token function">registerComponentIfNecessary</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> parserContext<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="注解配置方式注册" tabindex="-1"><a class="header-anchor" href="#注解配置方式注册"><span>注解配置方式注册</span></a></h5><p>使用 @EnableAspectJAutoProxy 注解时：</p><ol><li>@EnableAspectJAutoProxy 注解通过 @Import(AspectJAutoProxyRegistrar.class) 引入注册逻辑</li><li>AspectJAutoProxyRegistrar 实现 ImportBeanDefinitionRegistrar 接口</li><li>在 registerBeanDefinitions() 方法中注册 AnnotationAwareAspectJAutoProxyCreator</li></ol><h5 id="自动注册机制" tabindex="-1"><a class="header-anchor" href="#自动注册机制"><span>自动注册机制</span></a></h5><p>在 Spring Boot 中，自动配置会隐式注册：</p><ol><li>通过 spring-boot-autoconfigure 中的 AopAutoConfiguration 自动配置类</li><li>当检测到存在 AOP 相关依赖时自动生效</li><li>同样注册的是 AnnotationAwareAspectJAutoProxyCreator</li></ol><h5 id="注册的具体位置" tabindex="-1"><a class="header-anchor" href="#注册的具体位置"><span>注册的具体位置</span></a></h5><p>在 Spring 内部，所有路径最终都会调用 AopConfigUtils 工具类的<code>registerAspectJAnnotationAutoProxyCreatorIfNecessary</code>方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BeanDefinition</span> <span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAwareAspectJAutoProxyCreator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> registry<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="aopproxyfactory-aopproxy" tabindex="-1"><a class="header-anchor" href="#aopproxyfactory-aopproxy"><span>AopProxyFactory &amp; AopProxy</span></a></h3><p>Spring AOP 中的 AopProxyFactory 和 AopProxy 是代理创建机制的核心接口，它们共同决定了 Spring 如何为目标对象创建代理。</p>`,19)),t(o,{id:"mermaid-489",code:"eJxLzkksLnbJTEwvSszlcswvCCjKr6h0S0wuyS+qVLCp0dVVcElNSyzNKUGTw1Crq2unABPjwq4HrMYrJdulMi8xNzOZGNX+SVmpeanFmcXO6TmZSXAdMAbEhViMRFWAolmBC5ULVoHDHgCcgGez"}),a[48]||(a[48]=i(`<h4 id="aopproxyfactory" tabindex="-1"><a class="header-anchor" href="#aopproxyfactory"><span>AopProxyFactory</span></a></h4><p>AopProxyFactory 是创建 AOP 代理的工厂接口，它根据配置决定使用 JDK 动态代理还是 CGLIB 代理。</p><h4 id="aopproxy" tabindex="-1"><a class="header-anchor" href="#aopproxy"><span>AopProxy</span></a></h4><p>常见实现类比较：</p><table><thead><tr><th>特性及性能</th><th>JdkDynamicAopProxy</th><th>ObjenesisCglibAopProxy</th></tr></thead><tbody><tr><td>实现原理</td><td>基于 JDK 动态代理实现</td><td>基于 CGLIB 字节码生成</td></tr><tr><td>创建方式</td><td>使用 java.lang.reflect.Proxy 创建</td><td>通过生成目标类的子类创建</td></tr><tr><td>目标类是否需要实现接口</td><td>需要</td><td>不需要</td></tr><tr><td>创建开销</td><td>低</td><td>高</td></tr><tr><td>调用性能</td><td>较高</td><td>略低</td></tr><tr><td>内存占用</td><td>低</td><td>较高</td></tr></tbody></table><p>选择建议：</p><ul><li>优先 JDK 动态代理</li><li>当目标没有接口或需要代理非public方法时只能选择CGLIB</li></ul><p>识别代理类型:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">isJdkDynamicProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;JDK动态代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxy</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;CGLIB代理&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常见问题：</p><ul><li>CGLIB 无法代理 final 方法</li><li>CGLIB 代理对象需要额外处理序列化</li></ul><h3 id="advisor" tabindex="-1"><a class="header-anchor" href="#advisor"><span>Advisor</span></a></h3>`,12))])}const x=d(y,[["render",A]]),w=JSON.parse('{"path":"/posts/spring/spring-framework-aop-impi.html","title":"Spring AOP 实现原理","lang":"zh-CN","frontmatter":{"title":"Spring AOP 实现原理","date":"2025-06-03T01:10:04.628Z","category":["Spring","Spring AOP"],"tags":["Spring","Spring AOP"]},"git":{"updatedTime":1749101333000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"c2e0952b87ee92b775b726d15f9d5432d081cec7","time":1749101333000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Aop 2、Spring AOP 实现原理 3、Spring Boot 知识体系 4、Spring Boot 入门"}]},"filePathRelative":"posts/spring/spring-framework-aop-impi.md","excerpt":"\\n\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>AOP是基于IOC的Bean加载来实现的。</p>\\n</div>\\n<h2>Spring AOP 初始化过程</h2>\\n<ol>\\n<li>解析配置并创建<code>AspectJAwareAdvisorAutoProxyCreator</code>，分为XML配置、注解配置和自动注册三种方式，下面以XML配置为例介绍：\\n<ol>\\n<li>Spring 容器解析 XML 配置文件的过程中会调用</li>\\n<li><code>AopNamespaceHandler.init()</code>方法会注册<code>aop:aspectj-autoproxy</code>的解析类：</li>\\n<li><code>AspectJAutoProxyBeanDefinitionParser</code>的<code>parse()</code>方法创建了</li>\\n</ol>\\n</li>\\n<li>创建代理：识别需要代理的Bean，如需代理返回代理对象，否则返回原始Bean\\n<ol>\\n<li><code>AspectJAwareAdvisorAutoProxyCreator</code>实现了接口<code>BeanPostProcessor</code></li>\\n<li>创建代理的方法是<code>postProcessAfterInitialization</code>：如果bean被子类标识为代理，则使用配置的拦截器创建一个代理；否则返回原始Bean。</li>\\n</ol>\\n</li>\\n<li>生成代理：代理对象的实际创建/生成过程，Spring AOP支持两种代理方式：\\n<ol>\\n<li>JDK动态代理</li>\\n<li>CGLIB代理</li>\\n</ol>\\n</li>\\n<li>拦截器链构建\\n<ol>\\n<li>将各种通知类型（Before、After等）转换为MethodInterceptor</li>\\n<li>跟据通知的优先级和顺序注解(@Order)排序：@Around → @Before → @After → @AfterReturning/@AfterThrowing</li>\\n<li>代理对象增强：生成的代理对象内部包含原始对象和拦截器链，方法调用时，会按顺序执行拦截器链</li>\\n</ol>\\n</li>\\n</ol>"}');export{x as comp,w as data};
