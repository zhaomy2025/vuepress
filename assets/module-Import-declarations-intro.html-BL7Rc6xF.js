import{_ as c,c as i,d as l,a as n,b as s,e as u,w as e,r,o as m}from"./app-ty-Ai2oG.js";const d={};function k(v,a){const o=r("CodeTabs");return m(),i("div",null,[a[7]||(a[7]=l(`<p>增强 Java 编程语言，使其能够简洁地导入某个模块所导出的所有包。这简化了模块化库的重用，且调用方代码自身不必是模块化的。这是一项预览语言特性。</p><p><strong>使用新特性导入整个模块</strong> 假设有一个名为 com.example.utils 的模块，其 module-info.java 文件导出了了一些包：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// module-info.java</span></span>
<span class="line"><span class="token keyword">module</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>math</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">exports</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logging</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在另一个非模块化的应用程序（即没有 module-info.java）中，现在可以使用一种新的导入语句来一次性导入 com.example.utils 模块导出的所有包。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 使用 &#39;import module&#39; 关键字一次性导入整个模块的所有导出包</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token keyword">module</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApp</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 现在可以直接使用被导入模块中所有导出包下的类，而无需逐个导入</span></span>
<span class="line">    <span class="token comment">// 来自 com.example.utils.math 包</span></span>
<span class="line">    <span class="token class-name">Calculator</span> calc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">double</span> result <span class="token operator">=</span> calc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 来自 com.example.utils.logging 包</span></span>
<span class="line">    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Result is: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>与之前方式的对比</strong></p>`,6)),n("ul",null,[a[5]||(a[5]=l(`<li>方式一（传统非模块化项目）： 必须逐个导入所需的每个类或包。<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">Calculator</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>logging<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// ... 还需要导入其他要用的类 ...</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li>`,1)),n("li",null,[a[4]||(a[4]=s("方式二（模块化项目）： 即使只想用一两个类，也必须在自己的 module-info.java 中声明对整个模块的依赖。")),u(o,{id:"25",data:[{id:"module-info.java"},{id:"MyApp.java"}]},{title0:e(({value:p,isActive:t})=>a[0]||(a[0]=[s("module-info.java")])),title1:e(({value:p,isActive:t})=>a[1]||(a[1]=[s("MyApp.java")])),tab0:e(({value:p,isActive:t})=>a[2]||(a[2]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"module"),s(),n("span",{class:"token namespace"},[s("my"),n("span",{class:"token punctuation"},"."),s("app")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token keyword"},"requires"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("utils")]),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("  "),n("span",{class:"token comment"},"// ... 其他依赖 ...")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:p,isActive:t})=>a[3]||(a[3]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token namespace"},[s("com"),n("span",{class:"token punctuation"},"."),s("example"),n("span",{class:"token punctuation"},"."),s("utils"),n("span",{class:"token punctuation"},".")]),n("span",{class:"token punctuation"},"."),s("math"),n("span",{class:"token punctuation"},"."),s("Calculator"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),_:1})]),a[6]||(a[6]=n("li",null,[s("使用新特性后的方式（简洁且无需模块化）： "),n("ul",null,[n("li",null,"无需自身的 module-info.java。"),n("li",null,"一行语句 import module com.example.utils.*; 即可获得该模块所有导出包的访问权，无需再写多个 import 语句。")])],-1))])])}const g=c(d,[["render",k]]),y=JSON.parse('{"path":"/java/new-features/module-Import-declarations-intro.html","title":"","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1757919595000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"a56dd23708c5d2f36ccc4bf8fe2380b4e747453c","time":1757919595000,"email":"3036190149@qq.com","author":"zhaomy","message":"java24、java25新特性修改"}]},"filePathRelative":"java/new-features/module-Import-declarations-intro.md","excerpt":"<p>增强 Java 编程语言，使其能够简洁地导入某个模块所导出的所有包。这简化了模块化库的重用，且调用方代码自身不必是模块化的。这是一项预览语言特性。</p>\\n<p><strong>使用新特性导入整个模块</strong>\\n假设有一个名为 com.example.utils 的模块，其 module-info.java 文件导出了了一些包：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\"><pre><code><span class=\\"line\\"><span class=\\"token comment\\">// module-info.java</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">module</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>example<span class=\\"token punctuation\\">.</span>utils</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">exports</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>example<span class=\\"token punctuation\\">.</span>utils<span class=\\"token punctuation\\">.</span>math</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">exports</span> <span class=\\"token namespace\\">com<span class=\\"token punctuation\\">.</span>example<span class=\\"token punctuation\\">.</span>utils<span class=\\"token punctuation\\">.</span>logging</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{g as comp,y as data};
