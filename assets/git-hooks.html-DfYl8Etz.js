import{_ as l,c as o,a as n,d,e as t,w as a,r,o as p,b as i}from"./app-CPSQE2j9.js";const c={},m={class:"table-of-contents"};function u(h,s){const e=r("router-link");return p(),o("div",null,[s[11]||(s[11]=n("h1",{id:"git钩子",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git钩子"},[n("span",null,"Git钩子")])],-1)),n("nav",m,[n("ul",null,[n("li",null,[t(e,{to:"#git-钩子的类型"},{default:a(()=>s[0]||(s[0]=[i("Git 钩子的类型")])),_:1,__:[0]}),n("ul",null,[n("li",null,[t(e,{to:"#客户端钩子-client-side-hooks"},{default:a(()=>s[1]||(s[1]=[i("客户端钩子（Client-Side Hooks）")])),_:1,__:[1]})]),n("li",null,[t(e,{to:"#服务端钩子-server-side-hooks"},{default:a(()=>s[2]||(s[2]=[i("服务端钩子（Server-Side Hooks）")])),_:1,__:[2]})])])]),n("li",null,[t(e,{to:"#git-钩子的存放位置"},{default:a(()=>s[3]||(s[3]=[i("Git 钩子的存放位置")])),_:1,__:[3]})]),n("li",null,[t(e,{to:"#示例-pre-commit-钩子"},{default:a(()=>s[4]||(s[4]=[i("示例：pre-commit 钩子")])),_:1,__:[4]}),n("ul",null,[n("li",null,[t(e,{to:"#功能"},{default:a(()=>s[5]||(s[5]=[i("功能")])),_:1,__:[5]})]),n("li",null,[t(e,{to:"#实现步骤"},{default:a(()=>s[6]||(s[6]=[i("实现步骤")])),_:1,__:[6]})])])]),n("li",null,[t(e,{to:"#管理-git-钩子的工具-husky-推荐"},{default:a(()=>s[7]||(s[7]=[i("管理 Git 钩子的工具：husky（推荐）")])),_:1,__:[7]})]),n("li",null,[t(e,{to:"#跳过钩子"},{default:a(()=>s[8]||(s[8]=[i("跳过钩子")])),_:1,__:[8]})]),n("li",null,[t(e,{to:"#最佳实践"},{default:a(()=>s[9]||(s[9]=[i("最佳实践")])),_:1,__:[9]})]),n("li",null,[t(e,{to:"#总结"},{default:a(()=>s[10]||(s[10]=[i("总结")])),_:1,__:[10]})])])]),s[12]||(s[12]=d(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>Git 钩子（Git Hooks）是 Git 在<strong>特定事件</strong>（如提交、推送、合并等）发生时自动触发的<strong>自定义脚本</strong>。它们允许开发者在 Git 工作流程的各个阶段插入自定义逻辑，例如：</p><ul><li><strong>代码检查</strong>（如 ESLint、Prettier）</li><li><strong>测试运行</strong>（如 <code>npm test</code>）</li><li><strong>提交信息验证</strong></li><li><strong>分支保护</strong>（如禁止直接推送到 <code>main</code> 分支）</li></ul></div><h2 id="git-钩子的类型" tabindex="-1"><a class="header-anchor" href="#git-钩子的类型"><span><strong>Git 钩子的类型</strong></span></a></h2><p>Git 钩子分为两大类：</p><h3 id="客户端钩子-client-side-hooks" tabindex="-1"><a class="header-anchor" href="#客户端钩子-client-side-hooks"><span><strong>客户端钩子（Client-Side Hooks）</strong></span></a></h3><p>在本地 Git 仓库触发，仅影响当前用户的操作：</p><table><thead><tr><th>钩子名称</th><th>触发时机</th><th>常见用途</th></tr></thead><tbody><tr><td><code>pre-commit</code></td><td>执行 <code>git commit</code> 前</td><td>检查代码风格、运行测试</td></tr><tr><td><code>prepare-commit-msg</code></td><td>生成提交信息后，编辑器打开前</td><td>自动生成提交信息模板</td></tr><tr><td><code>commit-msg</code></td><td>提交信息编辑完成后</td><td>验证提交信息格式（如符合 Conventional Commits）</td></tr><tr><td><code>post-commit</code></td><td>提交完成后</td><td>发送通知、记录日志</td></tr><tr><td><code>pre-push</code></td><td>执行 <code>git push</code> 前</td><td>运行完整测试，防止推送错误代码</td></tr></tbody></table><h3 id="服务端钩子-server-side-hooks" tabindex="-1"><a class="header-anchor" href="#服务端钩子-server-side-hooks"><span><strong>服务端钩子（Server-Side Hooks）</strong></span></a></h3><p>在 Git 服务器（如 GitHub、GitLab）上触发，用于强制执行团队规则：</p><table><thead><tr><th>钩子名称</th><th>触发时机</th><th>常见用途</th></tr></thead><tbody><tr><td><code>pre-receive</code></td><td>推送前（服务器端）</td><td>检查提交是否符合规范</td></tr><tr><td><code>update</code></td><td>每个分支更新前</td><td>精细控制分支权限</td></tr><tr><td><code>post-receive</code></td><td>推送完成后</td><td>触发 CI/CD、发送通知</td></tr></tbody></table><h2 id="git-钩子的存放位置" tabindex="-1"><a class="header-anchor" href="#git-钩子的存放位置"><span><strong>Git 钩子的存放位置</strong></span></a></h2><p>Git 钩子脚本存储在项目的 <code>.git/hooks/</code> 目录下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">.git/</span>
<span class="line">└── hooks/</span>
<span class="line">    ├── pre-commit.sample</span>
<span class="line">    ├── commit-msg.sample</span>
<span class="line">    ├── pre-push.sample</span>
<span class="line">    └── ...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认情况下，这些文件以 <code>.sample</code> 结尾，<strong>不会生效</strong>。</li><li><strong>启用钩子</strong>：删除 <code>.sample</code> 后缀并赋予可执行权限：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">mv</span> .git/hooks/pre-commit.sample .git/hooks/pre-commit</span>
<span class="line"><span class="token function">chmod</span> +x .git/hooks/pre-commit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="示例-pre-commit-钩子" tabindex="-1"><a class="header-anchor" href="#示例-pre-commit-钩子"><span><strong>示例：<code>pre-commit</code> 钩子</strong></span></a></h2><h3 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span><strong>功能</strong></span></a></h3><p>限制 dev 分支的提交。</p><h3 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤"><span><strong>实现步骤</strong></span></a></h3><ol><li>创建 <code>pre-commit</code> 文件（<code>.git/hooks/pre-commit</code>）：</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">#!/bin/sh</span>
<span class="line">#</span>
<span class="line"># An example hook script to verify what is about to be committed.</span>
<span class="line"># Called by &quot;git commit&quot; with no arguments.  The hook should</span>
<span class="line"># exit with non-zero status after issuing an appropriate message if</span>
<span class="line"># it wants to stop the commit.</span>
<span class="line">#</span>
<span class="line"># To enable this hook, rename this file to &quot;pre-commit&quot;.</span>
<span class="line">#!/bin/sh</span>
<span class="line"></span>
<span class="line">CURRENT_BRANCH=$(git branch --show-current)</span>
<span class="line"></span>
<span class="line">if [ &quot;$CURRENT_BRANCH&quot; = &quot;dev/dev&quot; ]; then</span>
<span class="line">    echo &quot;❌ 错误：不允许直接向 dev 分支提交代码！请创建新分支并提交 PR。&quot;</span>
<span class="line">    exit 1  # 阻止提交</span>
<span class="line">fi</span>
<span class="line">exit 0  # 允许提交</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>赋予执行权限：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">chmod</span> +x .git/hooks/pre-commit</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li>测试：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;test&quot;</span>  <span class="token comment"># 提交到 dev 分支会失败</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><h2 id="管理-git-钩子的工具-husky-推荐" tabindex="-1"><a class="header-anchor" href="#管理-git-钩子的工具-husky-推荐"><span><strong>管理 Git 钩子的工具：husky（推荐）</strong></span></a></h2><p>手动管理钩子容易出错，推荐使用工具：</p><ul><li><strong>安装</strong>：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> husky --save-dev</span>
<span class="line">npx husky <span class="token function">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>添加钩子</strong>：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npm test&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><strong>示例</strong>（<code>.husky/pre-commit</code>）：<div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/sh</span></span>
<span class="line"><span class="token builtin class-name">.</span> <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">dirname</span> <span class="token string">&quot;<span class="token variable">$0</span>&quot;</span><span class="token variable">)</span></span>/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">npm</span> run lint</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="跳过钩子" tabindex="-1"><a class="header-anchor" href="#跳过钩子"><span><strong>跳过钩子</strong></span></a></h2><p>如果临时需要绕过钩子检查：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">git</span> commit --no-verify  <span class="token comment"># 跳过 pre-commit 和 commit-msg 钩子</span></span>
<span class="line"><span class="token function">git</span> push --no-verify    <span class="token comment"># 跳过 pre-push 钩子</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span><strong>最佳实践</strong></span></a></h2><ol><li><strong>优先使用 <code>husky</code></strong>：避免手动管理钩子文件。</li><li><strong>轻量化钩子逻辑</strong>：避免在钩子中运行耗时操作（如完整构建）。</li><li><strong>团队共享钩子</strong>：将钩子脚本纳入版本控制（如放在 <code>.husky/</code> 目录）。</li><li><strong>结合 CI/CD</strong>：仅用钩子做快速检查，复杂逻辑交给 CI（如 GitHub Actions）。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span><strong>总结</strong></span></a></h2><table><thead><tr><th>场景</th><th>推荐方案</th></tr></thead><tbody><tr><td><strong>个人项目</strong></td><td>手动钩子或 <code>husky</code></td></tr><tr><td><strong>团队项目</strong></td><td><code>husky</code> + 分支保护规则</td></tr><tr><td><strong>服务端强制检查</strong></td><td>GitHub/GitLab 的 <code>pre-receive</code> 钩子</td></tr></tbody></table><p>Git 钩子是自动化工作流的强大工具，合理使用可以显著提升代码质量和团队协作效率！ 🚀</p>`,31))])}const v=l(c,[["render",u]]),b=JSON.parse('{"path":"/posts/git/git-hooks.html","title":"Git钩子","lang":"zh-CN","frontmatter":{"title":"Git钩子","date":"2025-05-30T05:26:27.248Z","category":["git"],"tags":["git","hooks","Git Hooks"]},"git":{"updatedTime":1750750917000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":2,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"d72ca8e867076fb230331ac91b3c1b164a0e500f","time":1750750917000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、java：json、MyBatis 2、Spring集成Oracle 3、源码解析 4、Markdown文件格式化：去除字体"},{"hash":"be725b60ba85d78160de7057ffb905092b5a4acb","time":1748585079000,"email":"3036190149@qq.com","author":"zhaomy","message":"GitHooks"}]},"filePathRelative":"posts/git/git-hooks.md","excerpt":"\\n\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>Git 钩子（Git Hooks）是 Git 在<strong>特定事件</strong>（如提交、推送、合并等）发生时自动触发的<strong>自定义脚本</strong>。它们允许开发者在 Git 工作流程的各个阶段插入自定义逻辑，例如：</p>\\n<ul>\\n<li><strong>代码检查</strong>（如 ESLint、Prettier）</li>\\n<li><strong>测试运行</strong>（如 <code>npm test</code>）</li>\\n<li><strong>提交信息验证</strong></li>\\n<li><strong>分支保护</strong>（如禁止直接推送到 <code>main</code> 分支）</li>\\n</ul>\\n</div>"}');export{v as comp,b as data};
