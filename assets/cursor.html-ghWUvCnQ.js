import{_ as i,c as r,a as n,d as p,e,w as l,b as a,r as o,o as c}from"./app-C95U6Hpw.js";const u={},k={class:"table-of-contents"};function m(v,s){const t=o("router-link"),d=o("Tip");return c(),r("div",null,[s[32]||(s[32]=n("h1",{id:"游标",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#游标"},[n("span",null,"游标")])],-1)),n("nav",k,[n("ul",null,[n("li",null,[e(t,{to:"#游标的概念"},{default:l(()=>s[0]||(s[0]=[a("游标的概念")])),_:1,__:[0]})]),n("li",null,[e(t,{to:"#游标的作用"},{default:l(()=>s[1]||(s[1]=[a("游标的作用")])),_:1,__:[1]})]),n("li",null,[e(t,{to:"#游标的类型"},{default:l(()=>s[2]||(s[2]=[a("游标的类型")])),_:1,__:[2]}),n("ul",null,[n("li",null,[e(t,{to:"#静态游标-static-cursor"},{default:l(()=>s[3]||(s[3]=[a("静态游标（Static Cursor）")])),_:1,__:[3]})]),n("li",null,[e(t,{to:"#动态游标-dynamic-cursor"},{default:l(()=>s[4]||(s[4]=[a("动态游标（Dynamic Cursor）")])),_:1,__:[4]})]),n("li",null,[e(t,{to:"#键集驱动游标-keyset-driven-cursor"},{default:l(()=>s[5]||(s[5]=[a("键集驱动游标（Keyset-Driven Cursor）")])),_:1,__:[5]})]),n("li",null,[e(t,{to:"#前向游标-forward-only-cursor"},{default:l(()=>s[6]||(s[6]=[a("前向游标（Forward-Only Cursor）")])),_:1,__:[6]})]),n("li",null,[e(t,{to:"#对比"},{default:l(()=>s[7]||(s[7]=[a("对比")])),_:1,__:[7]})]),n("li",null,[e(t,{to:"#选择建议"},{default:l(()=>s[8]||(s[8]=[a("选择建议：")])),_:1,__:[8]})])])]),n("li",null,[e(t,{to:"#游标的基本操作-以-pl-sql-为例"},{default:l(()=>s[9]||(s[9]=[a("游标的基本操作（以 PL/SQL 为例）")])),_:1,__:[9]}),n("ul",null,[n("li",null,[e(t,{to:"#基础用法-前向游标"},{default:l(()=>s[10]||(s[10]=[a("基础用法（前向游标）")])),_:1,__:[10]})]),n("li",null,[e(t,{to:"#带参数的游标"},{default:l(()=>s[11]||(s[11]=[a("带参数的游标")])),_:1,__:[11]})]),n("li",null,[e(t,{to:"#使用-for-循环简化游标"},{default:l(()=>s[12]||(s[12]=[a("使用 FOR 循环简化游标")])),_:1,__:[12]})]),n("li",null,[e(t,{to:"#动态游标"},{default:l(()=>s[13]||(s[13]=[a("动态游标")])),_:1,__:[13]})]),n("li",null,[e(t,{to:"#支持滚动功能的动态游标"},{default:l(()=>s[14]||(s[14]=[a("支持滚动功能的动态游标")])),_:1,__:[14]})]),n("li",null,[e(t,{to:"#键集驱动游标"},{default:l(()=>s[15]||(s[15]=[a("键集驱动游标")])),_:1,__:[15]})])])]),n("li",null,[e(t,{to:"#游标的属性"},{default:l(()=>s[16]||(s[16]=[a("游标的属性")])),_:1,__:[16]})]),n("li",null,[e(t,{to:"#游标的优缺点"},{default:l(()=>s[17]||(s[17]=[a("游标的优缺点")])),_:1,__:[17]}),n("ul",null,[n("li",null,[e(t,{to:"#优点"},{default:l(()=>s[18]||(s[18]=[a("优点")])),_:1,__:[18]})]),n("li",null,[e(t,{to:"#缺点"},{default:l(()=>s[19]||(s[19]=[a("缺点")])),_:1,__:[19]})])])]),n("li",null,[e(t,{to:"#适用场景"},{default:l(()=>s[20]||(s[20]=[a("适用场景")])),_:1,__:[20]})]),n("li",null,[e(t,{to:"#替代方案"},{default:l(()=>s[21]||(s[21]=[a("替代方案")])),_:1,__:[21]})]),n("li",null,[e(t,{to:"#不同数据库的游标支持"},{default:l(()=>s[22]||(s[22]=[a("不同数据库的游标支持")])),_:1,__:[22]})]),n("li",null,[e(t,{to:"#总结"},{default:l(()=>s[23]||(s[23]=[a("总结")])),_:1,__:[23]})])])]),s[33]||(s[33]=p(`<h2 id="游标的概念" tabindex="-1"><a class="header-anchor" href="#游标的概念"><span>游标的概念</span></a></h2><p>简单地使用 SELECT 语句，没有办法得到上一行、下一行或前 10 行，有时需要在检索出来的行中前进或后退一行或多行，这时就需要使用游标（Cursor）。游标（Cursor）不是一条SELECT语句，而是被该语句检索出来的结果集，使用游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用于存储过程、触发器或编程语言（如 PL/SQL、T-SQL）中，用于遍历结果集并逐行操作数据。</p><hr><h2 id="游标的作用" tabindex="-1"><a class="header-anchor" href="#游标的作用"><span>游标的作用</span></a></h2><ol><li>逐行处理数据：适用于大数据量查询，避免内存溢出。</li><li>支持定位更新：可以基于游标位置修改或删除数据。</li><li>支持滚动操作：某些游标可以向前或向后移动（如 <code>SCROLL</code> 游标）。</li><li>适用于复杂业务逻辑：在存储过程中实现多步骤数据处理。</li></ol><hr><h2 id="游标的类型" tabindex="-1"><a class="header-anchor" href="#游标的类型"><span>游标的类型</span></a></h2><h3 id="静态游标-static-cursor" tabindex="-1"><a class="header-anchor" href="#静态游标-static-cursor"><span>静态游标（Static Cursor）</span></a></h3><ul><li>在打开游标时生成数据的快照，后续数据变化不影响游标内容</li><li>内存中存储完整结果集，性能较好但占用内存较多</li><li>适用于数据稳定、不需要实时更新的场景</li><li>Oracle中无原生支持</li></ul><h3 id="动态游标-dynamic-cursor" tabindex="-1"><a class="header-anchor" href="#动态游标-dynamic-cursor"><span>动态游标（Dynamic Cursor）</span></a></h3><ul><li>实时反映数据变化，其他事务的修改会立即影响游标结果</li><li>不缓存数据，每次fetch都重新获取最新数据</li><li>适用于需要实时数据的场景，但性能较低</li><li>通过<code>REF CURSOR</code>实现，可使用<code>OPEN-FOR</code>动态绑定SQL语句</li><li>Oracle 12c+ 通过<code>SYS_REFCURSOR</code>有限支持滚动游标</li></ul><h3 id="键集驱动游标-keyset-driven-cursor" tabindex="-1"><a class="header-anchor" href="#键集驱动游标-keyset-driven-cursor"><span>键集驱动游标（Keyset-Driven Cursor）</span></a></h3><ul><li>仅缓存行的主键（Key），数据变化时会重新获取最新值</li><li>可用检测到已fetch行的变化，不能检测到新插入的行</li><li>平衡了静态和动态游标的优缺点</li><li>Oracle中无原生支持，通常用<code>FOR UPDATE</code>模拟，在SQL Server等数据库中可直接声明为<code>KEYSET</code></li></ul><h3 id="前向游标-forward-only-cursor" tabindex="-1"><a class="header-anchor" href="#前向游标-forward-only-cursor"><span>前向游标（Forward-Only Cursor）</span></a></h3><ul><li>只能单向（向前）遍历数据，不支持回滚</li><li>可能看到后续数据的变化</li><li>不缓存或少量缓存数据，内存占用较少</li><li>性能最高，适用于只读遍历</li><li>Oracle中默认游标为前向游标</li></ul><h3 id="对比" tabindex="-1"><a class="header-anchor" href="#对比"><span>对比</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在Oracle PL/SQL中</p><ul><li>默认游标为前向游标</li><li>动态游标通过<code>REF CURSOR</code>实现，Oracle 12c+ 通过<code>SYS_REFCURSOR</code>部分支持滚动游标(仅动态游标能支持滚动功能)</li><li>键集驱动游标通过<code>FOR UPDATE</code>模拟</li><li>不支持静态游标</li></ul></div><p>以下是四种PL/SQL游标类型的对比表格，从多个维度展示它们的区别：</p><table><thead><tr><th>对比维度</th><th>静态游标 (Static Cursor)</th><th>动态游标 (Dynamic Cursor)</th><th>键集驱动游标 (Keyset-Driven Cursor)</th><th>前向游标 (Forward-Only Cursor)</th></tr></thead><tbody><tr><td><strong>数据快照</strong></td><td>打开时创建完整快照</td><td>不创建快照，实时反映数据变化</td><td>仅缓存键值（主键）</td><td>不创建快照</td></tr><tr><td><strong>内存占用</strong></td><td>高（存储全部结果集）</td><td>低（每次fetch重新获取）</td><td>中（仅存储键值）</td><td>最低（仅缓存当前行）</td></tr><tr><td><strong>数据敏感性</strong></td><td>不敏感（INSENSITIVE）</td><td>敏感（SENSITIVE）</td><td>部分敏感（仅对已取出行敏感）</td><td>敏感</td></tr><tr><td><strong>遍历方向</strong></td><td>支持双向（若声明为SCROLL）</td><td>通常双向</td><td>通常双向</td><td>仅前向</td></tr><tr><td><strong>反映数据修改</strong></td><td>❌ 不反映任何后续修改</td><td>✔️ 实时反映所有修改</td><td>✔️ 仅反映已fetch行的更新/删除</td><td>取决于实现（通常反映）</td></tr><tr><td><strong>检测新增数据</strong></td><td>❌ 不检测</td><td>✔️ 可检测</td><td>❌ 不检测</td><td>取决于实现</td></tr><tr><td><strong>更新能力</strong></td><td>通常只读</td><td>可更新</td><td>✔️ 支持定位更新（WHERE CURRENT OF）</td><td>通常只读</td></tr><tr><td><strong>语法示例</strong></td><td><code>CURSOR c IS SELECT...</code></td><td><code>TYPE t IS REF CURSOR; c t;</code></td><td><code>CURSOR c IS SELECT... FOR UPDATE;</code></td><td><code>CURSOR c IS SELECT...</code>（默认前向）</td></tr><tr><td><strong>打开性能</strong></td><td>差（需加载全部数据）</td><td>优（无预加载）</td><td>中（需加载键值）</td><td>最优</td></tr><tr><td><strong>Fetch性能</strong></td><td>最优（内存访问）</td><td>差（需实时查询）</td><td>中（需通过键值获取数据）</td><td>优</td></tr><tr><td><strong>适用场景</strong></td><td>报表生成、需要数据一致性</td><td>实时监控、需反映最新数据</td><td>数据修改、需要平衡性能与实时性</td><td>大数据量只读遍历</td></tr><tr><td><strong>Oracle实现</strong></td><td>显式游标</td><td>REF CURSOR</td><td>通过FOR UPDATE模拟</td><td>默认游标类型</td></tr><tr><td><strong>事务隔离</strong></td><td>打开时锁定数据</td><td>不锁定（读最新提交）</td><td>锁定已fetch行</td><td>不锁定</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>数据敏感性是指游标是否会看到其他事务对数据的修改。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为什么动态游标内存 &gt; 前向游标？ 虽然两者都不缓存完整结果集，但动态游标需要：</p><ul><li>维护更复杂的游标状态（如敏感性与事务隔离）。</li><li>可能缓存部分元数据（如查询计划）。</li><li>支持动态 SQL 解析（如果是 REF CURSOR 绑定变量）。 而前向游标：</li><li>是数据库的最简实现，几乎无额外开销。</li><li>可能直接复用数据库引擎的流式查询接口。</li></ul></div><h3 id="选择建议" tabindex="-1"><a class="header-anchor" href="#选择建议"><span>选择建议：</span></a></h3><ul><li>需要数据一致性 → <strong>静态游标</strong></li><li>需要实时数据 → <strong>动态游标</strong></li><li>需要修改数据 → <strong>键集驱动游标</strong></li><li>只需快速遍历 → <strong>前向游标</strong></li></ul><hr><h2 id="游标的基本操作-以-pl-sql-为例" tabindex="-1"><a class="header-anchor" href="#游标的基本操作-以-pl-sql-为例"><span>游标的基本操作（以 PL/SQL 为例）</span></a></h2><p>使用游标涉及以下四个步骤：</p><ol><li>声明游标：使用游标前，必须声明它，这个过程实际上没有检索数据，它只是定义要使用的 SELECT 语句和游标选项</li><li>打开游标：使用 <code>OPEN</code> 语句打开游标，该语句实际上执行 SELECT 语句并生成结果集。</li><li>循环读取数据：使用 <code>LOOP</code> 循环，每次使用 <code>FETCH</code> 语句获取当前行数据，并处理数据。</li><li>关闭游标：使用 <code>CLOSE</code> 语句关闭游标，释放资源。</li></ol><h3 id="基础用法-前向游标" tabindex="-1"><a class="header-anchor" href="#基础用法-前向游标"><span>基础用法（前向游标）</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> cursor_name <span class="token operator">IS</span></span>
<span class="line">        <span class="token keyword">SELECT</span> column1<span class="token punctuation">,</span> column2 <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> condition<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">-- 定义变量存储游标数据</span></span>
<span class="line">    v_column1 table_name<span class="token punctuation">.</span>column1<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">    v_column2 table_name<span class="token punctuation">.</span>column2<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token comment">-- 打开游标</span></span>
<span class="line">    <span class="token keyword">OPEN</span> cursor_name<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">-- 循环读取数据</span></span>
<span class="line">    <span class="token keyword">LOOP</span></span>
<span class="line">        <span class="token comment">-- 获取当前行数据</span></span>
<span class="line">        <span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> v_column1<span class="token punctuation">,</span> v_column2<span class="token punctuation">;</span>        </span>
<span class="line">        <span class="token comment">-- 如果没有数据，退出循环</span></span>
<span class="line">        <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> cursor_name<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span>        </span>
<span class="line">        <span class="token comment">-- 处理数据（如打印或更新）</span></span>
<span class="line">        DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>v_column1 <span class="token operator">||</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">||</span> v_column2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">-- 关闭游标</span></span>
<span class="line">    <span class="token keyword">CLOSE</span> cursor_name<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="带参数的游标" tabindex="-1"><a class="header-anchor" href="#带参数的游标"><span>带参数的游标</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> emp_cursor <span class="token punctuation">(</span>dept_id NUMBER<span class="token punctuation">)</span> <span class="token operator">IS</span></span>
<span class="line">        <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> dept_id<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">OPEN</span> emp_cursor<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 查询部门ID=10的员工</span></span>
<span class="line">    <span class="token comment">-- ... 处理数据</span></span>
<span class="line">    <span class="token keyword">CLOSE</span> emp_cursor<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-for-循环简化游标" tabindex="-1"><a class="header-anchor" href="#使用-for-循环简化游标"><span>使用 <code>FOR</code> 循环简化游标</span></a></h3><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">FOR</span> emp_rec <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">)</span> <span class="token keyword">LOOP</span></span>
<span class="line">        DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>emp_rec<span class="token punctuation">.</span>employee_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><h3 id="动态游标" tabindex="-1"><a class="header-anchor" href="#动态游标"><span>动态游标</span></a></h3><p>动态游标是指游标内容实时反映数据库变化，其他事务的修改立即影响游标结果。使用动态游标涉及以下四个步骤：</p><ol><li>声明游标：使用<code>REF CURSOR</code>声明游标</li><li>打开游标：使用<code>OPEN cursor_name for select ...</code>打开游标并动态绑定SQL语句</li><li>循环读取数据：使用 <code>LOOP</code> 循环，每次使用 <code>FETCH</code> 语句获取当前行数据，并处理数据</li><li>关闭游标：使用 <code>CLOSE</code> 语句关闭游标，释放资源。</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>动态游标和静态游标只有前两个步骤是不同于的，后续步骤相同：</p><ul><li>步骤1：静态游标使用<code>CURSOR</code>声明游标并绑定SQL语句；动态游标先使用<code>TYPE cursor_type IS REF CURSOR</code>声明游标类型，再使用游标类型声明动态游标</li><li>步骤2：静态游标使用<code>OPEN</code>打开游标，并执行SQL语句；动态游标使用<code>OPEN cursor_name FOR select ...</code>打开游标并并动态绑定SQL语句</li></ul></div><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">  <span class="token comment">-- 动态游标声明(使用REF CURSOR)</span></span>
<span class="line">  <span class="token keyword">TYPE</span> emp_cursor_type <span class="token operator">IS</span> REF <span class="token keyword">CURSOR</span><span class="token punctuation">;</span></span>
<span class="line">  dynamic_emp_cursor emp_cursor_type<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  v_emp_id employees<span class="token punctuation">.</span>employee_id<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">  v_first_name employees<span class="token punctuation">.</span>first_name<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line">  v_last_name employees<span class="token punctuation">.</span>last_name<span class="token operator">%</span><span class="token keyword">TYPE</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">  <span class="token keyword">OPEN</span> dynamic_emp_cursor <span class="token keyword">FOR</span></span>
<span class="line">    <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name</span>
<span class="line">    <span class="token keyword">FROM</span> employees</span>
<span class="line">    <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;--- 动态游标结果 ---&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">LOOP</span></span>
<span class="line">    <span class="token keyword">FETCH</span> dynamic_emp_cursor <span class="token keyword">INTO</span> v_emp_id<span class="token punctuation">,</span> v_first_name<span class="token punctuation">,</span> v_last_name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">EXIT</span> <span class="token keyword">WHEN</span> dynamic_emp_cursor<span class="token operator">%</span>NOTFOUND<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span>v_emp_id <span class="token operator">||</span> <span class="token string">&#39; &#39;</span> <span class="token operator">||</span> v_first_name <span class="token operator">||</span> <span class="token string">&#39; &#39;</span> <span class="token operator">||</span> v_last_name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">CLOSE</span> dynamic_emp_cursor<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持滚动功能的动态游标" tabindex="-1"><a class="header-anchor" href="#支持滚动功能的动态游标"><span>支持滚动功能的动态游标</span></a></h3><p>Oracle 12c 引入了游标滚动功能，通过<code>SYS_REFCURSOR</code>的扩展功能实现。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">  c SYS_REFCURSOR<span class="token punctuation">;</span></span>
<span class="line">  v_emp employees<span class="token operator">%</span>ROWTYPE<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">  <span class="token keyword">OPEN</span> c <span class="token keyword">FOR</span> <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">-- 可以使用 FETCH FIRST/NEXT/PRIOR/LAST 等（需12c+）</span></span>
<span class="line">  <span class="token keyword">FETCH</span> c <span class="token keyword">INTO</span> v_emp<span class="token punctuation">;</span> <span class="token comment">-- 仍然默认前向</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="键集驱动游标" tabindex="-1"><a class="header-anchor" href="#键集驱动游标"><span>键集驱动游标</span></a></h3><p>键集驱动游标是指仅缓存行的主键（Key），数据变化时会重新获取最新值。Oracle中无原生支持，通常用<code>FOR UPDATE</code>模拟：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">DECLARE</span></span>
<span class="line">    <span class="token keyword">CURSOR</span> c_keyset <span class="token operator">IS</span></span>
<span class="line">        <span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> employees</span>
<span class="line">        <span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">        <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span> <span class="token comment">-- 锁定键值</span></span>
<span class="line"><span class="token keyword">BEGIN</span></span>
<span class="line">    <span class="token keyword">FOR</span> r_emp <span class="token operator">IN</span> c_keyset <span class="token keyword">LOOP</span></span>
<span class="line">            <span class="token comment">-- 每次FETCH需通过ROWID回表</span></span>
<span class="line">            <span class="token keyword">UPDATE</span> employees <span class="token keyword">SET</span> salary <span class="token operator">=</span> salary<span class="token operator">*</span><span class="token number">1.1</span></span>
<span class="line">            <span class="token keyword">WHERE</span> <span class="token keyword">CURRENT</span> <span class="token keyword">OF</span> c_keyset<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">END</span> <span class="token keyword">LOOP</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="游标的属性" tabindex="-1"><a class="header-anchor" href="#游标的属性"><span>游标的属性</span></a></h2><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>%ISOPEN</code></td><td>判断游标是否已打开（<code>TRUE/FALSE</code>）</td></tr><tr><td><code>%FOUND</code></td><td>检查 <code>FETCH</code> 是否成功获取数据</td></tr><tr><td><code>%NOTFOUND</code></td><td>检查 <code>FETCH</code> 是否没有数据</td></tr><tr><td><code>%ROWCOUNT</code></td><td>返回当前已读取的行数</td></tr></tbody></table><p>示例：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql"><pre><code><span class="line"><span class="token keyword">IF</span> cursor_name<span class="token operator">%</span>ISOPEN <span class="token keyword">THEN</span></span>
<span class="line">    DBMS_OUTPUT<span class="token punctuation">.</span>PUT_LINE<span class="token punctuation">(</span><span class="token string">&#39;游标已打开&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="游标的优缺点" tabindex="-1"><a class="header-anchor" href="#游标的优缺点"><span>游标的优缺点</span></a></h2><h3 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h3><ul><li>适用于逐行处理大数据集。</li><li>支持定位更新（剪辑驱动游标<code>WHERE CURRENT OF</code>）。</li><li>灵活控制数据访问（如 <code>SCROLL</code> 游标支持前后移动）。</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><ul><li>性能较低：相比直接 SQL 操作，游标需要额外资源。</li><li>可能引发锁问题：长时间打开的游标可能阻塞其他事务。</li><li>内存消耗：大数据量游标可能导致内存不足。</li></ul><hr><h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景"><span>适用场景</span></a></h2><ol><li>数据逐行处理（如批量更新、数据迁移）。</li><li>复杂业务逻辑（如财务对账、报表生成）。</li><li>需要定位更新的操作（如 <code>UPDATE ... WHERE CURRENT OF</code>）。</li></ol><hr><h2 id="替代方案" tabindex="-1"><a class="header-anchor" href="#替代方案"><span>替代方案</span></a></h2><p>如果游标性能较差，可考虑：</p>`,62)),n("ul",null,[s[29]||(s[29]=n("li",null,[a("批量 SQL 操作（如 "),n("code",null,"UPDATE ... WHERE ..."),a("）。")],-1)),s[30]||(s[30]=n("li",null,[a("临时表 + 集合操作（如 "),n("code",null,"INSERT INTO temp_table SELECT ..."),a("）")],-1)),n("li",null,[s[25]||(s[25]=a("使用 ")),s[26]||(s[26]=n("code",null,"FORALL",-1)),s[27]||(s[27]=a(" 或 ")),s[28]||(s[28]=n("code",null,"BULK COLLECT",-1)),e(d,null,{default:l(()=>s[24]||(s[24]=[a("Oracle PL/SQL 优化方式")])),_:1,__:[24]})]),s[31]||(s[31]=n("li",null,[a("使用 "),n("code",null,"MERGE INTO TABLE_NAME USING ... ON ... WHEN MATCHED THEN UPDATE ... WHEN NOT MATCHED THEN INSERT ..."),a(" 批量插入或更新数据")],-1))]),s[34]||(s[34]=p('<hr><h2 id="不同数据库的游标支持" tabindex="-1"><a class="header-anchor" href="#不同数据库的游标支持"><span>不同数据库的游标支持</span></a></h2><table><thead><tr><th>数据库</th><th>支持游标类型</th><th>基本语法</th><th>是否支持滚动</th></tr></thead><tbody><tr><td>Oracle</td><td>前向（默认）/ 动态（<code>REF CURSOR</code>）/键集（<code>FOR UPDATE</code>）游标</td><td><code>DECLARE CURSOR cursor_name IS SELECT ...</code></td><td>Oracle 12c+ 通过<code>SYS_REFCURSOR</code>有限支持滚动游标(仅动态游标能支持滚动功能)</td></tr><tr><td>SQL Server</td><td>静态/动态/键集游标</td><td><code>DECLARE cursor_name CURSOR FOR ...</code></td><td>完全支持，可明确声明 SCROLL 或 FAST_FORWARD（前向）游标</td></tr><tr><td>MySQL</td><td>仅支持存储过程中的游标</td><td><code>DECLARE cursor_name CURSOR FOR ...</code></td><td>不支持 SCROLL</td></tr><tr><td>PostgreSQL</td><td></td><td><code>DECLARE cursor_name CURSOR FOR ...</code></td><td>默认为 <code>NO SCROLL</code>，可声明为 <code>SCROLL</code></td></tr><tr><td>SQLite</td><td>支持的游标称为步骤（step）</td><td>\\</td><td>\\</td></tr><tr><td>Microsoft Access</td><td>不支持游标</td><td>\\</td><td>\\</td></tr></tbody></table><hr><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><ul><li>游标适用于逐行处理数据，但应避免滥用（大数据量时优先考虑集合操作）。</li><li>静态游标性能较好，动态游标数据最新。</li><li>可使用 <code>FOR</code> 循环简化游标代码。</li><li>注意游标的打开/关闭，避免资源泄漏。</li></ul>',6))])}const h=i(u,[["render",m]]),b=JSON.parse('{"path":"/posts/db/sql/cursor.html","title":"游标","lang":"zh-CN","frontmatter":{"title":"游标","date":"2025-07-03T07:19:02.057Z","category":["db","sql","cursor"],"tags":["db","sql","cursor"]},"git":{"updatedTime":1752628818000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":3,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"78ff1243cb10e9d83e5d96644eadd92f1163b762","time":1752628818000,"email":"3036190149@qq.com","author":"zhaomy","message":"1. deploy-docs.yml 2. nginx.conf 2. title"},{"hash":"f9665794b68cad9555665791c82dd469884f5bdf","time":1752046008000,"email":"3036190149@qq.com","author":"zhaomy","message":"1. SQL 2. 游标 3. 约束 4. 部署到云服务器"},{"hash":"d591477321478698e03213c788fc9b0e4b87a634","time":1751598423000,"email":"3036190149@qq.com","author":"zhaomy","message":"1. SQL 2. 游标 2. PL/SQL"}]},"filePathRelative":"posts/db/sql/cursor.md","excerpt":"\\n\\n<!-- TODO 滚动游标 -->\\n<h2>游标的概念</h2>\\n<p>简单地使用 SELECT 语句，没有办法得到上一行、下一行或前 10 行，有时需要在检索出来的行中前进或后退一行或多行，这时就需要使用游标（Cursor）。游标（Cursor）不是一条SELECT语句，而是被该语句检索出来的结果集，使用游标之后，应用程序可以根据需要滚动或浏览其中的数据。游标主要用于存储过程、触发器或编程语言（如 PL/SQL、T-SQL）中，用于遍历结果集并逐行操作数据。</p>\\n<hr>\\n<h2>游标的作用</h2>\\n<ol>\\n<li>逐行处理数据：适用于大数据量查询，避免内存溢出。</li>\\n<li>支持定位更新：可以基于游标位置修改或删除数据。</li>\\n<li>支持滚动操作：某些游标可以向前或向后移动（如 <code>SCROLL</code> 游标）。</li>\\n<li>适用于复杂业务逻辑：在存储过程中实现多步骤数据处理。</li>\\n</ol>"}');export{h as comp,b as data};
