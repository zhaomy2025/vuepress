import{_ as o,c as s,a as e,d as i,e as r,w as n,r as d,o as h,b as l}from"./app-CcWUB0ne.js";const p={},u={class:"table-of-contents"};function c(m,a){const t=d("router-link");return h(),s("div",null,[a[25]||(a[25]=e("h1",{id:"java-中级",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#java-中级"},[e("span",null,"Java 中级")])],-1)),e("nav",u,[e("ul",null,[e("li",null,[r(t,{to:"#泛型"},{default:n(()=>a[0]||(a[0]=[l("泛型")])),_:1,__:[0]}),e("ul",null,[e("li",null,[r(t,{to:"#泛型类和泛型方法"},{default:n(()=>a[1]||(a[1]=[l("泛型类和泛型方法")])),_:1,__:[1]})]),e("li",null,[r(t,{to:"#类型擦除"},{default:n(()=>a[2]||(a[2]=[l("类型擦除")])),_:1,__:[2]})])])]),e("li",null,[r(t,{to:"#集合框架深入"},{default:n(()=>a[3]||(a[3]=[l("集合框架深入")])),_:1,__:[3]}),e("ul",null,[e("li",null,[r(t,{to:"#arraylist、linkedlist、hashset、treeset、hashmap、treemap等"},{default:n(()=>a[4]||(a[4]=[l("ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等")])),_:1,__:[4]})]),e("li",null,[r(t,{to:"#迭代器"},{default:n(()=>a[5]||(a[5]=[l("迭代器")])),_:1,__:[5]})]),e("li",null,[r(t,{to:"#比较器-comparable和comparator"},{default:n(()=>a[6]||(a[6]=[l("比较器（Comparable和Comparator）")])),_:1,__:[6]})])])]),e("li",null,[r(t,{to:"#多线程编程"},{default:n(()=>a[7]||(a[7]=[l("多线程编程")])),_:1,__:[7]}),e("ul",null,[e("li",null,[r(t,{to:"#原子类-atomicinteger、atomicreference等"},{default:n(()=>a[8]||(a[8]=[l("原子类（AtomicInteger、AtomicReference等）")])),_:1,__:[8]})]),e("li",null,[r(t,{to:"#锁机制-reentrantlock、readwritelock、stampedlock等"},{default:n(()=>a[9]||(a[9]=[l("锁机制（ReentrantLock、ReadWriteLock、StampedLock等）")])),_:1,__:[9]})]),e("li",null,[r(t,{to:"#并发集合-concurrenthashmap、copyonwritearraylist等"},{default:n(()=>a[10]||(a[10]=[l("并发集合（ConcurrentHashMap、CopyOnWriteArrayList等）")])),_:1,__:[10]})]),e("li",null,[r(t,{to:"#线程池-executor、threadpoolexecutor等"},{default:n(()=>a[11]||(a[11]=[l("线程池（Executor、ThreadPoolExecutor等）")])),_:1,__:[11]})]),e("li",null,[r(t,{to:"#并发工具类-countdownlatch、cyclicbarrier、semaphore、completablefuture等"},{default:n(()=>a[12]||(a[12]=[l("并发工具类（CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture等）")])),_:1,__:[12]})])])]),e("li",null,[r(t,{to:"#网络编程"},{default:n(()=>a[13]||(a[13]=[l("网络编程")])),_:1,__:[13]}),e("ul",null,[e("li",null,[r(t,{to:"#socket编程"},{default:n(()=>a[14]||(a[14]=[l("Socket编程")])),_:1,__:[14]})]),e("li",null,[r(t,{to:"#http请求处理"},{default:n(()=>a[15]||(a[15]=[l("HTTP请求处理")])),_:1,__:[15]})]),e("li",null,[r(t,{to:"#nio-非阻塞i-o"},{default:n(()=>a[16]||(a[16]=[l("NIO（非阻塞I/O）")])),_:1,__:[16]})])])]),e("li",null,[r(t,{to:"#反射机制"},{default:n(()=>a[17]||(a[17]=[l("反射机制")])),_:1,__:[17]}),e("ul",null,[e("li",null,[r(t,{to:"#class类"},{default:n(()=>a[18]||(a[18]=[l("Class类")])),_:1,__:[18]})]),e("li",null,[r(t,{to:"#获取类信息"},{default:n(()=>a[19]||(a[19]=[l("获取类信息")])),_:1,__:[19]})]),e("li",null,[r(t,{to:"#动态代理"},{default:n(()=>a[20]||(a[20]=[l("动态代理")])),_:1,__:[20]})])])]),e("li",null,[r(t,{to:"#注解-annotation"},{default:n(()=>a[21]||(a[21]=[l("注解（Annotation）")])),_:1,__:[21]}),e("ul",null,[e("li",null,[r(t,{to:"#内置注解"},{default:n(()=>a[22]||(a[22]=[l("内置注解")])),_:1,__:[22]})]),e("li",null,[r(t,{to:"#自定义注解"},{default:n(()=>a[23]||(a[23]=[l("自定义注解")])),_:1,__:[23]})]),e("li",null,[r(t,{to:"#注解处理器"},{default:n(()=>a[24]||(a[24]=[l("注解处理器")])),_:1,__:[24]})])])])])]),a[26]||(a[26]=i('<h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><h3 id="泛型类和泛型方法" tabindex="-1"><a class="header-anchor" href="#泛型类和泛型方法"><span>泛型类和泛型方法</span></a></h3><h3 id="类型擦除" tabindex="-1"><a class="header-anchor" href="#类型擦除"><span>类型擦除</span></a></h3><h2 id="集合框架深入" tabindex="-1"><a class="header-anchor" href="#集合框架深入"><span>集合框架深入</span></a></h2><h3 id="arraylist、linkedlist、hashset、treeset、hashmap、treemap等" tabindex="-1"><a class="header-anchor" href="#arraylist、linkedlist、hashset、treeset、hashmap、treemap等"><span>ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等</span></a></h3><h3 id="迭代器" tabindex="-1"><a class="header-anchor" href="#迭代器"><span>迭代器</span></a></h3><h3 id="比较器-comparable和comparator" tabindex="-1"><a class="header-anchor" href="#比较器-comparable和comparator"><span>比较器（Comparable和Comparator）</span></a></h3><h2 id="多线程编程" tabindex="-1"><a class="header-anchor" href="#多线程编程"><span>多线程编程</span></a></h2><p>在Java中，多线程是一种并发编程技术，允许程序同时执行多个任务。通过多线程，可以充分利用CPU资源，提高程序的执行效率和响应速度。Java提供了丰富的API来支持多线程编程，主要通过<code>java.lang.Thread</code>类和<code>java.util.concurrent</code>包来实现。</p><p>这篇文章主要介绍Java多线程编程的基础知识，包括以下内容：</p><ul><li>线程的创建、启动、同步、通信与死锁等基本概念。</li><li>线程同步机制，包括：synchronized关键字、显式锁、读写锁和线程安全集合等，确保多线程环境下数据的一致性和安全性。</li><li>线程池和Executor框架，核心组件包括Executor、Future等接口及其实现类，通过合理配置线程池参数（核心线程数、最大线程数、工作队列等），优化线程资源的管理和使用。</li><li>高级并发工具（CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture等）的特性与应用。</li></ul><p>本文是Java多线程编程的快速入门指南，将帮助你建立并发编程的基本概念和使用技能。 详细的JUC（Java并发工具包）相关类的深入解析和实战应用，将在后续文章中陆续介绍。</p><h3 id="原子类-atomicinteger、atomicreference等" tabindex="-1"><a class="header-anchor" href="#原子类-atomicinteger、atomicreference等"><span>原子类（AtomicInteger、AtomicReference等）</span></a></h3><h3 id="锁机制-reentrantlock、readwritelock、stampedlock等" tabindex="-1"><a class="header-anchor" href="#锁机制-reentrantlock、readwritelock、stampedlock等"><span>锁机制（ReentrantLock、ReadWriteLock、StampedLock等）</span></a></h3><h3 id="并发集合-concurrenthashmap、copyonwritearraylist等" tabindex="-1"><a class="header-anchor" href="#并发集合-concurrenthashmap、copyonwritearraylist等"><span>并发集合（ConcurrentHashMap、CopyOnWriteArrayList等）</span></a></h3><h3 id="线程池-executor、threadpoolexecutor等" tabindex="-1"><a class="header-anchor" href="#线程池-executor、threadpoolexecutor等"><span>线程池（Executor、ThreadPoolExecutor等）</span></a></h3><h3 id="并发工具类-countdownlatch、cyclicbarrier、semaphore、completablefuture等" tabindex="-1"><a class="header-anchor" href="#并发工具类-countdownlatch、cyclicbarrier、semaphore、completablefuture等"><span>并发工具类（CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture等）</span></a></h3><h2 id="网络编程" tabindex="-1"><a class="header-anchor" href="#网络编程"><span>网络编程</span></a></h2><h3 id="socket编程" tabindex="-1"><a class="header-anchor" href="#socket编程"><span>Socket编程</span></a></h3><h3 id="http请求处理" tabindex="-1"><a class="header-anchor" href="#http请求处理"><span>HTTP请求处理</span></a></h3><h3 id="nio-非阻塞i-o" tabindex="-1"><a class="header-anchor" href="#nio-非阻塞i-o"><span>NIO（非阻塞I/O）</span></a></h3><h2 id="反射机制" tabindex="-1"><a class="header-anchor" href="#反射机制"><span>反射机制</span></a></h2><h3 id="class类" tabindex="-1"><a class="header-anchor" href="#class类"><span>Class类</span></a></h3><h3 id="获取类信息" tabindex="-1"><a class="header-anchor" href="#获取类信息"><span>获取类信息</span></a></h3><h3 id="动态代理" tabindex="-1"><a class="header-anchor" href="#动态代理"><span>动态代理</span></a></h3><h2 id="注解-annotation" tabindex="-1"><a class="header-anchor" href="#注解-annotation"><span>注解（Annotation）</span></a></h2><h3 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h3><h3 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h3><h3 id="注解处理器" tabindex="-1"><a class="header-anchor" href="#注解处理器"><span>注解处理器</span></a></h3>',29))])}const b=o(p,[["render",c]]),x=JSON.parse('{"path":"/java/intermediate/","title":"Java 中级","lang":"zh-CN","frontmatter":{"title":"Java 中级","date":"2025-08-04T05:25:29.633Z","category":["java","intermediate","multithreading"],"tags":["java","intermediate","multithreading"]},"git":{"updatedTime":1754642867000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":3,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"b2ec0058d9c52bcd768c04c96c8824ef5d82bbf4","time":1754642867000,"email":"3036190149@qq.com","author":"zhaomy","message":"Java目录移动"},{"hash":"2286a8eeceda2ff07a58ad660195a84e1bace514","time":1754549948000,"email":"3036190149@qq.com","author":"zhaomy","message":"多线程编程 概述"},{"hash":"3d42842f074771b72133a37302ce6a03d1cdd448","time":1754469218000,"email":"3036190149@qq.com","author":"zhaomy","message":"Java 中级 多线程编程"}]},"filePathRelative":"java/intermediate/index.md","excerpt":"\\n\\n<h2>泛型</h2>\\n<h3>泛型类和泛型方法</h3>\\n<h3>类型擦除</h3>\\n<h2>集合框架深入</h2>\\n<h3>ArrayList、LinkedList、HashSet、TreeSet、HashMap、TreeMap等</h3>\\n<h3>迭代器</h3>\\n<h3>比较器（Comparable和Comparator）</h3>\\n<h2>多线程编程</h2>\\n<p>在Java中，多线程是一种并发编程技术，允许程序同时执行多个任务。通过多线程，可以充分利用CPU资源，提高程序的执行效率和响应速度。Java提供了丰富的API来支持多线程编程，主要通过<code>java.lang.Thread</code>类和<code>java.util.concurrent</code>包来实现。</p>"}');export{b as comp,x as data};
