import{_ as r,c as d,a,d as i,e as t,w as e,b as s,r as o,o as c}from"./app-Er_l5xPQ.js";const u="/vuepress/images/spring/spring-boot-hello-world-annotation.jpg",g={},v={class:"table-of-contents"};function h(b,n){const p=o("router-link"),l=o("Tip");return c(),d("div",null,[n[28]||(n[28]=a("h1",{id:"spring-boot-入门",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#spring-boot-入门"},[a("span",null,"Spring Boot 入门")])],-1)),a("nav",v,[a("ul",null,[a("li",null,[t(p,{to:"#spring-boot简介"},{default:e(()=>n[0]||(n[0]=[s("Spring Boot简介")])),_:1,__:[0]})]),a("li",null,[t(p,{to:"#开发"},{default:e(()=>n[1]||(n[1]=[s("开发")])),_:1,__:[1]}),a("ul",null,[a("li",null,[t(p,{to:"#前提条件"},{default:e(()=>n[2]||(n[2]=[s("前提条件")])),_:1,__:[2]})]),a("li",null,[t(p,{to:"#使用maven建立项目"},{default:e(()=>n[3]||(n[3]=[s("使用Maven建立项目")])),_:1,__:[3]})]),a("li",null,[t(p,{to:"#编写代码"},{default:e(()=>n[4]||(n[4]=[s("编写代码")])),_:1,__:[4]})]),a("li",null,[t(p,{to:"#创建一个可执行jar"},{default:e(()=>n[5]||(n[5]=[s("创建一个可执行Jar")])),_:1,__:[5]})])])]),a("li",null,[t(p,{to:"#构建系统"},{default:e(()=>n[6]||(n[6]=[s("构建系统")])),_:1,__:[6]}),a("ul",null,[a("li",null,[t(p,{to:"#依赖管理"},{default:e(()=>n[7]||(n[7]=[s("依赖管理")])),_:1,__:[7]})])])]),a("li",null,[t(p,{to:"#常用注解"},{default:e(()=>n[8]||(n[8]=[s("常用注解")])),_:1,__:[8]}),a("ul",null,[a("li",null,[t(p,{to:"#springbootapplication"},{default:e(()=>n[9]||(n[9]=[s("@SpringBootApplication")])),_:1,__:[9]})]),a("li",null,[t(p,{to:"#配置类-文件"},{default:e(()=>n[10]||(n[10]=[s("配置类/文件")])),_:1,__:[10]})]),a("li",null,[t(p,{to:"#javabean"},{default:e(()=>n[11]||(n[11]=[s("JavaBean")])),_:1,__:[11]})]),a("li",null,[t(p,{to:"#依赖注入"},{default:e(()=>n[12]||(n[12]=[s("依赖注入")])),_:1,__:[12]})]),a("li",null,[t(p,{to:"#属性文件"},{default:e(()=>n[13]||(n[13]=[s("属性文件")])),_:1,__:[13]})]),a("li",null,[t(p,{to:"#属性绑定"},{default:e(()=>n[14]||(n[14]=[s("属性绑定")])),_:1,__:[14]})])])]),a("li",null,[t(p,{to:"#运行-部署spring-boot应用"},{default:e(()=>n[15]||(n[15]=[s("运行/部署Spring Boot应用")])),_:1,__:[15]}),a("ul",null,[a("li",null,[t(p,{to:"#java-jar-xxx-jar"},{default:e(()=>n[16]||(n[16]=[s("java -jar XXX.jar")])),_:1,__:[16]})]),a("li",null,[t(p,{to:"#热部署jrebel"},{default:e(()=>n[17]||(n[17]=[s("热部署JRebel")])),_:1,__:[17]})])])]),a("li",null,[t(p,{to:"#缓存"},{default:e(()=>n[18]||(n[18]=[s("缓存")])),_:1,__:[18]})]),a("li",null,[t(p,{to:"#开发者工具-developer-tools"},{default:e(()=>n[19]||(n[19]=[s("开发者工具（Developer Tools）")])),_:1,__:[19]}),a("ul",null,[a("li",null,[t(p,{to:"#属性的默认值"},{default:e(()=>n[20]||(n[20]=[s("属性的默认值")])),_:1,__:[20]})]),a("li",null,[t(p,{to:"#自动重启"},{default:e(()=>n[21]||(n[21]=[s("自动重启")])),_:1,__:[21]})]),a("li",null,[t(p,{to:"#livereload"},{default:e(()=>n[22]||(n[22]=[s("LiveReload")])),_:1,__:[22]})])])])])]),n[29]||(n[29]=i(`<h2 id="spring-boot简介" tabindex="-1"><a class="header-anchor" href="#spring-boot简介"><span>Spring Boot简介</span></a></h2><p>SpringBoot采用&quot;约定优于配置&quot;的理念，提供了大量默认配置，开发者只需调修改不符合默认约定的配置即可快速构建应用，无需繁琐的XML配置。</p><p>通过一个简单的HelloWorld示例，可以快速掌握SpringBoot项目的创建、开发、运行和打包流程。其核心特性之一是Starter机制，如spring-boot-starter-data-jpa、spring-boot-starter-web等，这些预置依赖能自动整合相关技术栈，实现开箱即用。</p><p>在开发过程中，常用注解如@SpringBootApplication、@Configuration等简化了配置工作，而属性绑定和组件扫描则进一步提升了开发效率。此外，SpringBoot支持热部署、缓存优化和开发者工具，为调试和测试提供了便利，最终打包生成的独立JAR文件可直接运行，极大简化了部署流程。</p><h2 id="开发" tabindex="-1"><a class="header-anchor" href="#开发"><span>开发</span></a></h2><h3 id="前提条件" tabindex="-1"><a class="header-anchor" href="#前提条件"><span>前提条件</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">java <span class="token operator">-</span>version</span>
<span class="line">mvn <span class="token operator">-</span>v</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用maven建立项目" tabindex="-1"><a class="header-anchor" href="#使用maven建立项目"><span>使用Maven建立项目</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">mvn package</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="编写代码" tabindex="-1"><a class="header-anchor" href="#编写代码"><span>编写代码</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line">@RestController</span>
<span class="line">@SpringBootApplication</span>
<span class="line">public class MyApplication {</span>
<span class="line"></span>
<span class="line">    @RequestMapping(&quot;/&quot;)</span>
<span class="line">    String home() {</span>
<span class="line">        return &quot;Hello World!&quot;;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">    public static void main(String[] args) {</span>
<span class="line">        SpringApplication.run(MyApplication.class, args);</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建一个可执行jar" tabindex="-1"><a class="header-anchor" href="#创建一个可执行jar"><span>创建一个可执行Jar</span></a></h3><p>通过spring-boot-maven-plugin，直接嵌套jar</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="构建系统" tabindex="-1"><a class="header-anchor" href="#构建系统"><span>构建系统</span></a></h2><h3 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理"><span>依赖管理</span></a></h3><h4 id="starter" tabindex="-1"><a class="header-anchor" href="#starter"><span>Starter</span></a></h4><p>Starter是一系列开箱即用的依赖，通过Starter可以获得所有你需要的Spring和相关技术的依赖。</p><p>jpa、data-redis、json、web、mail、test</p><table><thead><tr><th style="text-align:left;">Starter</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">spring-boot-starter-data-jpa</td><td style="text-align:left;">用于通过 Hibernate 使用 Spring Data JPA 的 Starter</td></tr><tr><td style="text-align:left;">spring-boot-starter-data-redis</td><td style="text-align:left;">用于通过 Spring Data Redis 和 Lettuce 客户端操作 Redis 键值存储的 Starter</td></tr><tr><td style="text-align:left;">spring-boot-starter-json</td><td style="text-align:left;">用于读写 JSON 数据的 Starter</td></tr><tr><td style="text-align:left;">spring-boot-starter-mail</td><td style="text-align:left;">用于 Java Mail 和 Spring 框架邮件发送支持的 Starter</td></tr><tr><td style="text-align:left;">spring-boot-starter-security</td><td style="text-align:left;">用于 Spring Security 的 Starter</td></tr><tr><td style="text-align:left;">spring-boot-starter-test</td><td style="text-align:left;">用于测试 Spring Boot 应用的 Starter（包含 JUnit Jupiter、Hamcrest 和 Mockito 等库）</td></tr><tr><td style="text-align:left;">spring-boot-starter-web</td><td style="text-align:left;">用于构建 Web/RESTful 应用的 Starter（使用 Spring MVC，默认内嵌 Tomcat 容器）</td></tr></tbody></table><h2 id="常用注解" tabindex="-1"><a class="header-anchor" href="#常用注解"><span>常用注解</span></a></h2><p><img src="`+u+`" alt="Spring Boot 常用注解"></p><h3 id="springbootapplication" tabindex="-1"><a class="header-anchor" href="#springbootapplication"><span>@SpringBootApplication</span></a></h3><p>@SpringBootApplication=@SpringBootConfiguration+@ComponentScan+@EnableAutoConfiguration</p><ul><li>可搭配@ImportResource导入配置文件</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootApplication</span></span>
<span class="line"><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;classpath:spring-context.xml&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;classpath*:META-INF/spring.xml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> myApplication <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如需明确导入用户定义的Bean，可去掉@ComponentScan（@SpringBootApplication换为@SpringBootConfiguration和@EnableAutoConfiguration），使用@Import注解导入指定配置类</li></ul><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line">@SpringBootConfiguration(proxyBeanMethods = false)</span>
<span class="line">@EnableAutoConfiguration</span>
<span class="line">@Import({SomeConfiguration.class, AnotherConfiguration.class})</span>
<span class="line">public class MyApplication {</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置类-文件" tabindex="-1"><a class="header-anchor" href="#配置类-文件"><span>配置类/文件</span></a></h3><h4 id="configuration配置类" tabindex="-1"><a class="header-anchor" href="#configuration配置类"><span>@Configuration配置类</span></a></h4><p>Spring Boot倾向于通过Java代码来进行配置的定义。 建议你通过 @Configuration 类来进行配置。 通常，可以把启动类是作为主要的 @Configuration 类。</p><h4 id="import导入-configuration类" tabindex="-1"><a class="header-anchor" href="#import导入-configuration类"><span>@Import导入@Configuration类</span></a></h4><p>不需要把所有的配置放在一个类中。 @Import 注解可以用来导入额外的配置类。 另外，你可以使用 @ComponentScan 来自动扫描加载所有Spring组件，包括 @Configuration 类。</p><h4 id="importresource-导入xml配置" tabindex="-1"><a class="header-anchor" href="#importresource-导入xml配置"><span>@ImportResource 导入XML配置</span></a></h4><p>如果你确实需要使用基于XML的配置，可用通过 @ImportResource 注解来加载XML配置文件。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line">@SpringBootApplication</span>
<span class="line">@ImportResource(value = { &quot;classpath:spring-context.xml&quot;,&quot;classpath*:META-INF/spring.xml&quot; })</span>
<span class="line">public class StartIompServiceMain {</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="autoconfiguration自动配置" tabindex="-1"><a class="header-anchor" href="#autoconfiguration自动配置"><span>@AutoConfiguration自动配置</span></a></h4><p>自动配置类通过添加 @AutoConfiguration 注解实现。因为 @AutoConfiguration 注解本身是以 @Configuration 注解的，所以自动配置类可以算是一个标准的基于 @Configuration 注解的类。</p><h4 id="enableautoconfiguration开启自动装配功能" tabindex="-1"><a class="header-anchor" href="#enableautoconfiguration开启自动装配功能"><span>@EnableAutoConfiguration开启自动装配功能</span></a></h4><p>Spring Boot的自动装配机制会试图根据你所添加的依赖来自动配置你的Spring应用程序。 例如，如果你添加了 HSQLDB 依赖，而且你没有手动配置任何DataSource Bean，那么Spring Boot就会自动配置内存数据库。</p><p>你需要将 @EnableAutoConfiguration 或 @SpringBootApplication 注解添加到你的 @Configuration 类中，从而开启自动配置功能。</p><p>如果你想禁用掉项目中某些自动装配类，你可以在 @SpringBootApplication 注解的 exclude 属性中指定。</p><h4 id="conditional-声明自动配置启用条件" tabindex="-1"><a class="header-anchor" href="#conditional-声明自动配置启用条件"><span>@Conditional 声明自动配置启用条件</span></a></h4><p>@Conditional 注解可以用于声明自动配置启用条件，包括以下注解：</p><ul><li>@ConditionalOnClass、@ConditionalOnMissingBean</li><li>@ConditionalOnProperty 基于 Spring 的环境变量判正</li><li>@ConditionalOnResource 基于是否存在特定的资源来判正</li><li>@ConditionalOnWebApplication、@ConditionalOnNotWebApplication基于当前是否为 Web 应用</li><li>@ConditionalOnWarDeployment、@ConditionalOnNotWarDeployment 判定当前应用是否为传统的部署到 servlet 容器的 WAR 包应用</li></ul><p>HttpMessageConvertersAutoConfiguration</p><h4 id="profile多环境配置" tabindex="-1"><a class="header-anchor" href="#profile多环境配置"><span>@Profile多环境配置</span></a></h4><p>可搭配@PropertySource使用</p><h3 id="javabean" tabindex="-1"><a class="header-anchor" href="#javabean"><span>JavaBean</span></a></h3><p>使用@Component、@Controller、@Service等注解标注的类都是Bean，可使用@ComponentScan注解来扫描。</p><p>第三方组件Bean可使用工厂方法（@Bean方法）来创建：在@Configuration配置类中使用@Bean注解修饰的方法即为工厂方法，工厂方法返回的对象即为JavaBean，也会交给Spring IoC容器管理。</p><p>如果一个Bean有多个构造函数，你需要用 @Autowired 注解来告诉Spring该用哪个构造函数进行注入。</p><h3 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h3>`,54)),a("p",null,[n[25]||(n[25]=s("通过@Resource")),t(l,null,{default:e(()=>n[23]||(n[23]=[s("JSR-250")])),_:1,__:[23]}),n[26]||(n[26]=s("或@Autowired ")),t(l,null,{default:e(()=>n[24]||(n[24]=[s("Spring")])),_:1,__:[24]}),n[27]||(n[27]=s("可以实现依赖注入。"))]),n[30]||(n[30]=i(`<h3 id="属性文件" tabindex="-1"><a class="header-anchor" href="#属性文件"><span>属性文件</span></a></h3><h4 id="propertysource加载指定的属性文件到-spring-环境" tabindex="-1"><a class="header-anchor" href="#propertysource加载指定的属性文件到-spring-环境"><span>@PropertySource加载指定的属性文件到 Spring 环境</span></a></h4><ul><li>加载指定的属性文件(.properties/.xml)到 Spring 环境</li><li>支持多文件同时加载</li><li>可配合 <code>**@Value**</code> 或 <code>**Environment**</code> 接口使用</li><li>可配合@Profile(&quot;dev&quot;)使用，支持多环境配置</li></ul><h4 id="enableconfigurationproperties-开启配置类属性绑定" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties-开启配置类属性绑定"><span>@EnableConfigurationProperties()开启配置类属性绑定</span></a></h4><p>配置文件的属性值自动绑定到 <code>**@ConfigurationProperties**</code><strong>修饰的JavaBean</strong></p><h3 id="属性绑定" tabindex="-1"><a class="header-anchor" href="#属性绑定"><span>属性绑定</span></a></h3><table><thead><tr><th></th><th>@value(&quot;\${}&quot;)</th><th>@ConfigurationProperties(prefix=&quot;&quot;)</th></tr></thead><tbody><tr><td>适用场景</td><td>单个属性</td><td>整个JavaBean的属性绑定，支持指定属性的通用前缀</td></tr><tr><td>属性值来源</td><td>Spring环境的属性，包括但不限于@PropertySource加载的属性</td><td>配置文件？？</td></tr><tr><td>启用注解</td><td></td><td>@EnableConfigurationProperties</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="运行-部署spring-boot应用" tabindex="-1"><a class="header-anchor" href="#运行-部署spring-boot应用"><span>运行/部署Spring Boot应用</span></a></h2><h3 id="java-jar-xxx-jar" tabindex="-1"><a class="header-anchor" href="#java-jar-xxx-jar"><span>java -jar XXX.jar</span></a></h3><h3 id="热部署jrebel" tabindex="-1"><a class="header-anchor" href="#热部署jrebel"><span>热部署JRebel</span></a></h3><p>由于Spring Boot应用程序是普通的Java应用程序，JVM的热替换功能可以直接使用。但是，JVM的热替换能替换的字节码有限。要想获得更完整的解决方案，可以使用 JRebel 。</p><p><a href="https://jrebel.qekang.com/" target="_blank" rel="noopener noreferrer">Welcome to JetBrains License Server!😃</a></p><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><p>在配置类添加@EnableCaching注解</p><p>在需要将查询结果返回值添加至缓存中的方法上面添加@Cacheable注解，使用默认缓存策略对方法的返回值进行缓存。其中@Cacheable注解可以包含 value 参数，指定配置文件中自定义的缓存策略。缓存 key 值有容器自动生成。</p><p>使用@CacheEvict注解清除缓存，其中@CacheEvict(allEntries=true)表示清除默认缓存策略中所有缓存。</p><h2 id="开发者工具-developer-tools" tabindex="-1"><a class="header-anchor" href="#开发者工具-developer-tools"><span>开发者工具（Developer Tools）</span></a></h2><p>如果你的应用程序是通过 java -jar 启动的，或者是从一个特殊的classloader启动的，那么它就被认为是一个 &quot;生产级别的应用程序&quot;，开发者工具会被自动禁用。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="属性的默认值" tabindex="-1"><a class="header-anchor" href="#属性的默认值"><span>属性的默认值</span></a></h3><p>默认禁用缓存选项</p><h3 id="自动重启" tabindex="-1"><a class="header-anchor" href="#自动重启"><span>自动重启</span></a></h3><h4 id="重启-vs-重载" tabindex="-1"><a class="header-anchor" href="#重启-vs-重载"><span>重启 VS 重载</span></a></h4><p>重启丢弃restart classloader，并创建一个新的。Spring Boot通过两个加载类实现重启，通常比“冷启动”快得多。</p><p>重载是在类被加载时对其进行重写，比重启更快。</p><h4 id="排除资源" tabindex="-1"><a class="header-anchor" href="#排除资源"><span>排除资源</span></a></h4><p>默认情况下，改变 /META-INF/maven, /META-INF/resources, /resources, /static, /public, /templates 中的资源不会触发重启，但会触发实时重载.。</p><p>如果你想自定义这些排除项，可以使用 spring.devtools.restart.exclude 属性。</p><p>如果你想保留这些默认值并增加额外的排除资源，请使用 spring.devtools.restart.extra-exclude 属性来代替。</p><h4 id="监控额外的路径" tabindex="-1"><a class="header-anchor" href="#监控额外的路径"><span>监控额外的路径</span></a></h4><p>当你对不在classpath上的文件进行修改时，你可能希望你的应用程序被重新启动或重新加载。为此，使用 spring.devtools.restart.extra-paths 属性来配置监控变化的额外路径。你可以使用前面说过的的 spring.devtools.restart.exclude 属性来控制额外路径下的变化是触发完全重启还是实时重载。</p><h4 id="禁止重启" tabindex="-1"><a class="header-anchor" href="#禁止重启"><span>禁止重启</span></a></h4><p>spring.devtools.restart.enabled 属性来禁用重启。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>application.properties 中设置这个属性仍然会初始化restart 类加载器，但不会监控文件变化。</p><p>若要完全禁用重启，需在调用 SpringApplication.run(…) 之前将 spring.devtools.restart.enabled 属性设置为 false。</p></div><h3 id="livereload" tabindex="-1"><a class="header-anchor" href="#livereload"><span>LiveReload</span></a></h3><p>spring-boot-devtools 模块包括一个内嵌的LiveReload服务器，可以用来在资源发生变化时触发浏览器刷新。</p><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>你一次只能运行一个LiveReload服务器。 在启动你的应用程序之前，确保没有其他LiveReload服务器正在运行。 如果你从你的IDE启动多个应用程序，只有第一个有LiveReload支持。</p></div>`,37))])}const k=r(g,[["render",h]]),f=JSON.parse('{"path":"/posts/spring/spring-boot-hello-world.html","title":"Spring Boot 入门","lang":"zh-CN","frontmatter":{"title":"Spring Boot 入门","date":"2025-06-04T08:59:20.234Z","category":["spring","spring-boot"],"tags":["spring","spring-boot"]},"git":{"updatedTime":1749101333000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"c2e0952b87ee92b775b726d15f9d5432d081cec7","time":1749101333000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Aop 2、Spring AOP 实现原理 3、Spring Boot 知识体系 4、Spring Boot 入门"}]},"filePathRelative":"posts/spring/spring-boot-hello-world.md","excerpt":"\\n\\n<h2>Spring Boot简介</h2>\\n<p>SpringBoot采用\\"约定优于配置\\"的理念，提供了大量默认配置，开发者只需调修改不符合默认约定的配置即可快速构建应用，无需繁琐的XML配置。</p>\\n<p>通过一个简单的HelloWorld示例，可以快速掌握SpringBoot项目的创建、开发、运行和打包流程。其核心特性之一是Starter机制，如spring-boot-starter-data-jpa、spring-boot-starter-web等，这些预置依赖能自动整合相关技术栈，实现开箱即用。</p>\\n<p>在开发过程中，常用注解如@SpringBootApplication、@Configuration等简化了配置工作，而属性绑定和组件扫描则进一步提升了开发效率。此外，SpringBoot支持热部署、缓存优化和开发者工具，为调试和测试提供了便利，最终打包生成的独立JAR文件可直接运行，极大简化了部署流程。</p>"}');export{k as comp,f as data};
