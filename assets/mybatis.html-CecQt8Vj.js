import{_ as n,c as o,a as t,d as r,e as s,w as l,r as m,o as p,b as e}from"./app-BunaFDua.js";const d={},y={class:"table-of-contents"};function b(u,a){const i=m("router-link");return p(),o("div",null,[a[8]||(a[8]=t("h1",{id:"mybatis-简介",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#mybatis-简介"},[t("span",null,"MyBatis 简介")])],-1)),t("nav",y,[t("ul",null,[t("li",null,[s(i,{to:"#什么是-mybatis"},{default:l(()=>a[0]||(a[0]=[e("什么是 MyBatis")])),_:1,__:[0]})]),t("li",null,[s(i,{to:"#mybatis栈技术演进"},{default:l(()=>a[1]||(a[1]=[e("MyBatis栈技术演进")])),_:1,__:[1]}),t("ul",null,[t("li",null,[s(i,{to:"#jdbc"},{default:l(()=>a[2]||(a[2]=[e("JDBC")])),_:1,__:[2]})]),t("li",null,[s(i,{to:"#ibatis"},{default:l(()=>a[3]||(a[3]=[e("iBatis")])),_:1,__:[3]})]),t("li",null,[s(i,{to:"#mybatis"},{default:l(()=>a[4]||(a[4]=[e("MyBatis")])),_:1,__:[4]})]),t("li",null,[s(i,{to:"#mybatis衍生-代码生成工具等"},{default:l(()=>a[5]||(a[5]=[e("MyBatis衍生：代码生成工具等")])),_:1,__:[5]})]),t("li",null,[s(i,{to:"#spring-mybatis"},{default:l(()=>a[6]||(a[6]=[e("Spring + MyBatis")])),_:1,__:[6]})]),t("li",null,[s(i,{to:"#mybatis-plus"},{default:l(()=>a[7]||(a[7]=[e("MyBatis-Plus")])),_:1,__:[7]})])])])])]),a[9]||(a[9]=r('<h2 id="什么是-mybatis" tabindex="-1"><a class="header-anchor" href="#什么是-mybatis"><span>什么是 MyBatis</span></a></h2><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。</p><ul><li>MyBatis是一款优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，无需关注加载驱动、创建连接、创建statement等繁杂的过程。</li><li>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</li></ul><h2 id="mybatis栈技术演进" tabindex="-1"><a class="header-anchor" href="#mybatis栈技术演进"><span>MyBatis栈技术演进</span></a></h2><h3 id="jdbc" tabindex="-1"><a class="header-anchor" href="#jdbc"><span>JDBC</span></a></h3><p>Java5的时代，通常的开发中会自行封装JDBC的Util，比如创建 Connection，以及确保关闭 Connection等。</p><h3 id="ibatis" tabindex="-1"><a class="header-anchor" href="#ibatis"><span>iBatis</span></a></h3><p>MyBatis的前身，它封装了绝大多数的 JDBC 样板代码，使得开发者只需关注 SQL 本身，无需处理注册驱动，创建 Connection，以及确保关闭 Connection 等代码。</p><h3 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis"><span>MyBatis</span></a></h3><p>伴随着JDK5+ 泛型和注解特性开始流行，IBatis在3.0变更为MyBatis，对泛型和注解等特性开始全面支持，同时支持了很多新的特性，比如：</p><ul><li>实现了接口绑定，通过Dao接口 和xml映射文件的绑定，自动生成接口的具体实现</li><li>支持 ognl表达式，比如 <code>&lt;if&gt;</code>, <code>&lt;else&gt;</code>使用ognl进行解析</li><li>支持插件机制，PageHelper分页插件应用而生，解决了数据库层的分页封装问题</li></ul><p>所以这个时期，MyBatis XML 配置方式 + PageHelper 成为重要的开发方式。</p><h3 id="mybatis衍生-代码生成工具等" tabindex="-1"><a class="header-anchor" href="#mybatis衍生-代码生成工具等"><span>MyBatis衍生：代码生成工具等</span></a></h3><p>MyBatis提供了开发上的便捷，但是依然需要写大量的xml配置，并且很多都是CRUD级别的，为了减少重复编码，衍生出了MyBatis代码生成工具, 比如CodeGenerator等。 由于后端视图解析引擎多样性（比如freemarker, volicty, thymeleaf等），以及前后端分离前端独立等，为了进一步减少重复代码的编写（包括视图层），自动生成的代码工具也开始演化为自动生成前端视图代码。</p><h3 id="spring-mybatis" tabindex="-1"><a class="header-anchor" href="#spring-mybatis"><span>Spring + MyBatis</span></a></h3><p>与此同时，Spring 2.5 开始完全支持基于注解的配置并且也支持JSR250 注解。在Spring后续的版本发展倾向于通过注解和Java配置结合使用。</p><p>Spring Boot的出现便是要解决配置过多的问题，通过自动配置和 mybatis-spring-boot-starter 依赖，可以简化 MyBatis 的配置。</p><p>这个阶段，主要的开发技术栈是 Spring + mybatis-spring-boot-starter 自动化配置 + PageHelper，并且很多数据库实体mapper还是通过xml方式配置的（伴随着使用一些自动化生成工具）。</p><h3 id="mybatis-plus" tabindex="-1"><a class="header-anchor" href="#mybatis-plus"><span>MyBatis-Plus</span></a></h3><p>为了更高的效率，出现了MyBatis-Plus这类工具，对MyBatis进行增强。</p><ul><li>全自动ORM <ul><li>MyBatis-Plus 启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li>内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作</li><li>强大的条件构造器，满足各类使用需求</li></ul></li><li>支持Lambda表达式</li><li>内置分页插件</li><li>内置diamond生成器</li><li>内置性能分析插件，可输出SQL语句以及其执行时间</li><li>支持主键自动生成：支持4种主键策略，可自由配置</li><li>内置全局拦截插件，提供全表delete、update操作只能分析阻断，也可自动逸拦截规则，预防误操作</li></ul>',21))])}const B=n(d,[["render",b]]),M=JSON.parse('{"path":"/posts/java/orm/mybatis.html","title":"MyBatis","lang":"zh-CN","frontmatter":{"title":"MyBatis","date":"2025-06-20T08:45:23.497Z","category":["framework","mybatis"],"tags":["framework","mybatis"]},"git":{"updatedTime":1750750917000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":2,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"d72ca8e867076fb230331ac91b3c1b164a0e500f","time":1750750917000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、java：json、MyBatis 2、Spring集成Oracle 3、源码解析 4、Markdown文件格式化：去除字体"},{"hash":"6d5eae914a088d19d1434bfdcb0cde6db26e6bae","time":1750728343000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、MyBatis"}]},"filePathRelative":"posts/java/orm/mybatis.md","excerpt":"\\n\\n<h2>什么是 MyBatis</h2>\\n<p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。</p>\\n<ul>\\n<li>MyBatis是一款优秀的基于java的持久层框架，它内部封装了jdbc，使开发者只需要关注sql语句本身，无需关注加载驱动、创建连接、创建statement等繁杂的过程。</li>\\n<li>mybatis通过xml或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</li>\\n</ul>"}');export{B as comp,M as data};
