import{_ as s,c as a,d as e,o as p}from"./app-BAyazsnA.js";const t={};function c(o,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="functools-模块" tabindex="-1"><a class="header-anchor" href="#functools-模块"><span>functools 模块</span></a></h1><p><code>functools</code> 是 Python 标准库中用于高阶函数（操作或返回其他函数的函数）的模块，提供了一些常用的函数式编程工具，用于增强或修改函数行为。以下是 <code>functools</code> 模块的核心函数及其用法详解：</p><h3 id="functools-partial-部分函数-参数绑定" tabindex="-1"><a class="header-anchor" href="#functools-partial-部分函数-参数绑定"><span><code>functools.partial</code>：部分函数（参数绑定）</span></a></h3><p>作用：固定函数的某些参数，生成一个新函数，简化调用。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> base  exp</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 固定 base=2，生成平方函数</span></span>
<span class="line">square <span class="token operator">=</span> partial<span class="token punctuation">(</span>power<span class="token punctuation">,</span> exp<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>square<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 9 (即 3^2)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适用场景：减少重复参数传递，适配接口。</p><h3 id="functools-reduce-累积计算" tabindex="-1"><a class="header-anchor" href="#functools-reduce-累积计算"><span><code>functools.reduce</code>：累积计算</span></a></h3><p>作用：对可迭代对象中的元素依次应用二元函数，累积结果。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span></span>
<span class="line"></span>
<span class="line">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line">sum_all <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> nums<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sum_all<span class="token punctuation">)</span>  <span class="token comment"># 输出 10 (1+2+3+4)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：Python 3 中 <code>reduce</code> 被移到 <code>functools</code> 中，推荐优先使用内置的 <code>sum()</code>、<code>max()</code> 等。</p><h3 id="functools-lru-cache-缓存装饰器" tabindex="-1"><a class="header-anchor" href="#functools-lru-cache-缓存装饰器"><span><code>functools.lru_cache</code>：缓存装饰器</span></a></h3><p>作用：缓存函数结果，避免重复计算（LRU 最近最少使用策略）。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> lru_cache</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@lru_cache</span><span class="token punctuation">(</span>maxsize<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token comment"># 缓存大小</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> n</span>
<span class="line">    <span class="token keyword">return</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> fibonacci<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>fibonacci<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 快速计算，避免递归重复</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数：</p><ul><li><code>maxsize</code>：缓存的最大条目数（设为 <code>None</code> 表示无限制）。</li><li><code>typed</code>：若为 <code>True</code>，不同参数类型（如 <code>3</code> 和 <code>3.0</code>）会分开缓存。</li></ul><h3 id="functools-wraps-保留原函数元信息" tabindex="-1"><a class="header-anchor" href="#functools-wraps-保留原函数元信息"><span><code>functools.wraps</code>：保留原函数元信息</span></a></h3><p>作用：修复装饰器导致的函数元信息（如 <code>__name__</code>、<code>__doc__</code>）丢失问题。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">my_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>  <span class="token comment"># 保留 f 的元信息</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Calling decorated function&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> wrapper</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@my_decorator</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;Example docstring.&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">pass</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>  <span class="token comment"># 输出 &quot;example&quot;（而非 &quot;wrapper&quot;）</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>example<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>   <span class="token comment"># 输出 &quot;Example docstring.&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functools-cached-property-缓存属性" tabindex="-1"><a class="header-anchor" href="#functools-cached-property-缓存属性"><span><code>functools.cached_property</code>：缓存属性</span></a></h3><p>作用：将方法结果缓存为实例属性（Python 3.8+）。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> cached_property</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>data <span class="token operator">=</span> data</span>
<span class="line"></span>
<span class="line">    <span class="token decorator annotation punctuation">@cached_property</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">processed_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Processing...&quot;</span><span class="token punctuation">)</span>  <span class="token comment"># 仅第一次调用时执行</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">[</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>data<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">d <span class="token operator">=</span> Data<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>processed_data<span class="token punctuation">)</span>  <span class="token comment"># 输出 Processing... [2, 4, 6]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>processed_data<span class="token punctuation">)</span>  <span class="token comment"># 直接输出缓存结果 [2, 4, 6]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functools-total-ordering-自动补全比较方法" tabindex="-1"><a class="header-anchor" href="#functools-total-ordering-自动补全比较方法"><span><code>functools.total_ordering</code>：自动补全比较方法</span></a></h3><p>作用：基于 <code>__eq__</code> 和任意一个比较方法（如 <code>__lt__</code>），自动生成全部比较方法。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> total_ordering</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@total_ordering</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score <span class="token operator">==</span> other<span class="token punctuation">.</span>score</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">__lt__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> self<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>score</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 自动生成 &gt;, &lt;=, &gt;= 等方法</span></span>
<span class="line">s1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span></span>
<span class="line">s2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>s1 <span class="token operator">&lt;=</span> s2<span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functools-singledispatch-单分派泛型函数" tabindex="-1"><a class="header-anchor" href="#functools-singledispatch-单分派泛型函数"><span><code>functools.singledispatch</code>：单分派泛型函数</span></a></h3><p>作用：根据第一个参数的类型选择不同的函数实现（类似重载）。<br> 示例：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> functools <span class="token keyword">import</span> singledispatch</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@singledispatch</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">process</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Generic processing:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@process<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Processing string:&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@process<span class="token punctuation">.</span>register</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">_</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Processing integer:&quot;</span><span class="token punctuation">,</span> data <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">process<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>      <span class="token comment"># 输出 &quot;Processing integer: 20&quot;</span></span>
<span class="line">process<span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token comment"># 输出 &quot;Processing string: HELLO&quot;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他函数" tabindex="-1"><a class="header-anchor" href="#其他函数"><span>其他函数</span></a></h3><ul><li><code>functools.partialmethod</code>：类似于 <code>partial</code>，但用于类方法。</li><li><code>functools.update_wrapper</code>：手动更新包装函数的元信息（<code>wraps</code> 的底层实现）。</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>| 函数/装饰器 | 主要用途 | ||| | <code>partial</code> | 固定函数参数，生成新函数 | | <code>reduce</code> | 可迭代对象的累积计算 | | <code>lru_cache</code> | 缓存函数结果，优化性能 | | <code>wraps</code> | 保留被装饰函数的元信息 | | <code>cached_property</code> | 将方法结果缓存为实例属性 | | <code>total_ordering</code> | 自动生成缺失的比较方法 | | <code>singledispatch</code> | 根据参数类型选择不同函数实现 |</p><p>通过灵活使用 <code>functools</code>，可以简化代码、提升性能，并增强函数的行为控制。</p>`,32)]))}const i=s(t,[["render",c]]),u=JSON.parse('{"path":"/python/functools.html","title":"functools 模块","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1754642986000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"cb442e484787959686fcf71435e2c3d5dbb77237","time":1754642986000,"email":"3036190149@qq.com","author":"zhaomy","message":"python 依赖管理、装饰器、functools、wraps"}]},"filePathRelative":"python/functools.md","excerpt":"\\n<p><code>functools</code> 是 Python 标准库中用于高阶函数（操作或返回其他函数的函数）的模块，提供了一些常用的函数式编程工具，用于增强或修改函数行为。以下是 <code>functools</code> 模块的核心函数及其用法详解：</p>\\n<h3><code>functools.partial</code>：部分函数（参数绑定）</h3>\\n<p>作用：固定函数的某些参数，生成一个新函数，简化调用。<br>\\n示例：</p>\\n<div class=\\"language-python line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"py\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">from</span> functools <span class=\\"token keyword\\">import</span> partial</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">def</span> <span class=\\"token function\\">power</span><span class=\\"token punctuation\\">(</span>base<span class=\\"token punctuation\\">,</span> exp<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">return</span> base  exp</span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token comment\\"># 固定 base=2，生成平方函数</span></span>\\n<span class=\\"line\\">square <span class=\\"token operator\\">=</span> partial<span class=\\"token punctuation\\">(</span>power<span class=\\"token punctuation\\">,</span> exp<span class=\\"token operator\\">=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">print</span><span class=\\"token punctuation\\">(</span>square<span class=\\"token punctuation\\">(</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>  <span class=\\"token comment\\"># 输出 9 (即 3^2)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{i as comp,u as data};
