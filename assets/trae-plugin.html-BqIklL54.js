import{_ as a,c as n,d as s,o as i}from"./app-ty-Ai2oG.js";const l={};function d(r,e){return i(),n("div",null,e[0]||(e[0]=[s(`<h1 id="如何利用trae开发vs-code插件" tabindex="-1"><a class="header-anchor" href="#如何利用trae开发vs-code插件"><span>如何利用Trae开发VS Code插件</span></a></h1><h2 id="插件需求-自定义markdown格式化工具" tabindex="-1"><a class="header-anchor" href="#插件需求-自定义markdown格式化工具"><span>插件需求：自定义Markdown格式化工具</span></a></h2><p>开发一个VS Code插件，用于格式化Markdown文档。这个插件不需要像一般Markdown格式化工具那样处理通用格式，而是专注于解决从文档平台导出的Markdown文件排版不规整的问题。</p><h3 id="具体功能" tabindex="-1"><a class="header-anchor" href="#具体功能"><span>具体功能</span></a></h3><ol><li><p><strong>自定义规则支持</strong>：</p><ul><li>删除特定的HTML标签（像<code>&lt;font&gt;</code>这种）</li><li>移除多余的符号（比如<code>**</code>加粗符号）</li><li>清理标题中的序号（比如<code>### 1.2 标题</code>变成<code>### 标题</code>）</li><li>处理各种分隔线（比如<code>---</code>）</li></ul></li><li><p><strong>换行符处理</strong>：</p><ul><li>支持Windows和Linux换行符</li><li>在标题后面自动加空行</li><li>在代码块前后加空行</li><li>调整列表项之间的间距</li></ul></li><li><p><strong>空行控制</strong>：</p><ul><li>支持合并多个连续空行</li><li>确保不同元素之间有合适的间距</li></ul></li></ol><h3 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h3><ul><li>打开Markdown文件，点击右键，选择“格式化文档”</li><li>针对当前打开的文件进行格式化</li></ul><h3 id="技术限制" tabindex="-1"><a class="header-anchor" href="#技术限制"><span>技术限制</span></a></h3><ul><li>不要引入额外的Markdown解析库，保持轻量</li><li>直接基于文本处理实现，不需要理解Markdown的完整语法结构</li></ul><h3 id="预期效果" tabindex="-1"><a class="header-anchor" href="#预期效果"><span>预期效果</span></a></h3><p>比如处理这样的内容：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">### 1.2 标题</span>
<span class="line">&lt;font color=red&gt;红色文字&lt;/font&gt;</span>
<span class="line">**加粗内容**</span>
<span class="line">---</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理后变成：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">### 标题</span>
<span class="line"></span>
<span class="line">红色文字</span>
<span class="line">加粗内容</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的项目放在 markdown-formatter 目录下</p><h2 id="trae协作开发-从需求到代码实现" tabindex="-1"><a class="header-anchor" href="#trae协作开发-从需求到代码实现"><span>Trae协作开发：从需求到代码实现</span></a></h2><p>将上述需求交给Trae，Trae会根据需求生成对应的代码。</p><p>{% asset_img trae-develop1.png trae-develop1 %}</p><p>{% asset_img trae-develop2.png trae-develop2 %}</p><p>{% asset_img trae-develop3.png trae-develop3 %}</p><p>{% asset_img trae-develop4.png trae-develop4 %}</p><p>{% asset_img trae-develop5.png trae-develop5 %}</p><p>{% asset_img trae-develop6.png trae-develop6 %}</p><p>生成的项目结构如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">markdown-formatter</span>
<span class="line">│  .gitignore - 指定哪些文件和目录不应该提交到Git仓库</span>
<span class="line">│  .vscodeignore - 指定哪些文件不应该包含在插件包中</span>
<span class="line">│  debug-helper.js - 调试辅助工具，用于测试格式化功能</span>
<span class="line">│  extension.js - 插件的主要逻辑文件，实现激活函数和格式化命令的注册</span>
<span class="line">│  formatter.js - 实现具体的格式化逻辑。包含所有根据需求定义的格式化规则</span>
<span class="line">│  package.json - 插件的配置文件，定义了插件的元数据、依赖和功能</span>
<span class="line">│  README.md - 提供插件的说明和使用方法</span>
<span class="line">│  test-format.js - 测试脚本，用于验证格式化功能的正确性</span>
<span class="line">│  test.md - 测试用的Markdown文件，用于验证插件的功能</span>
<span class="line">│</span>
<span class="line">└─.vscode</span>
<span class="line">        launch.json - 调试配置文件，以便在VS Code中测试插件</span>
<span class="line">        tasks.json - VS Code任务配置文件，定义构建和测试任务</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码修改" tabindex="-1"><a class="header-anchor" href="#代码修改"><span>代码修改</span></a></h3><p>Trae的Builder模式能够根据需求自动生成相应代码，我们只需在此基础上进行针对性修改即可。</p><p>调试过程中，你可以直接向Trae提问，例如：“我发现代码中有个问题，该如何解决？”</p><p>Trae会根据你的问题，智能生成具体的代码修改建议。</p><p>从下方案例可以看出，Trae的智能调试功能支持回归测试机制。修改代码后，Trae会自动生成测试脚本<code>test-merge-lines.js</code>，并执行测试用例来验证代码是否符合预期。若未达到预期效果，Trae会持续迭代优化代码直至满足要求（不过，偶尔也可能出现修改后仍不符合预期的情况，此时就需要我们手动介入调整）。</p><p>{% asset_img trae-debug1.png trae-debug1 %}</p><p>{% asset_img trae-debug2.png trae-debug2 %}</p><p>{% asset_img trae-debug3.png trae-debug3 %}</p><p>{% asset_img trae-debug4.png trae-debug4 %}</p><p>{% asset_img trae-debug5.png trae-debug5 %}</p><p>{% asset_img trae-debug6.png trae-debug6 %}</p><p>{% asset_img trae-debug7.png trae-debug7 %}</p><h3 id="打包插件" tabindex="-1"><a class="header-anchor" href="#打包插件"><span>打包插件</span></a></h3><ol><li>安装打包工具：打开终端，执行<code>npm install -g vsce</code>命令全局安装VSCE工具</li><li>执行打包命令：在项目根目录下运行<code>vsce package</code>命令进行打包</li><li>安装插件包：在VS Code插件市场点击右上角“...”菜单，选择“Install from VSIX...”选项，然后选择生成的.vsix文件</li><li>重启VS Code：插件安装完成后，重启VS Code使其生效</li></ol><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h3><p>在VS Code中打开一个Markdown文件，点击右键，选择“Format Markdown Document”，检查格式化效果是否符合预期。</p><h2 id="常见问题与解决方案" tabindex="-1"><a class="header-anchor" href="#常见问题与解决方案"><span>常见问题与解决方案</span></a></h2><p>开发过程中发现一个调试问题：按F5启动调试会话后，在调试窗口的Markdown文件编辑框中右击菜单找不到“Format Markdown Document”选项；通过Ctrl + Shift + P打开命令面板并输入“Format Document”，也无法搜索到相关命令。</p><p>一开始以为是代码或配置问题，折腾了好久还是不能调试，后来尝试跳过调试环节，直接将插件打包为VSIX文件，安装该插件并重启VS Code后，可以在Markdown文件编辑框的右击菜单中正常看到并使用“Format Markdown Document”选项。</p><p>怀疑是由于Trae与VS Code的API兼容性问题导致的，如果你也有类似的问题，可以试下这个方法。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>对于没有太多开发经验的人来说，用Trae开发VS Code插件真的是一个很好的选择。你不需要记住复杂的API，也不需要担心代码结构问题，只需要把需求说清楚，剩下的交给Trae就好。</p><p>如果你也想开发一个属于自己的VS Code插件，不妨试试用Trae来辅助。相信我，它会让你的开发过程变得轻松愉快很多！</p><p>最后附上项目地址：https://github.com/zmyAI/vscode-plugin/markdown-formatter</p>`,49)]))}const t=a(l,[["render",d]]),o=JSON.parse('{"path":"/ai/trae/trae-plugin.html","title":"如何利用Trae开发VS Code插件","lang":"zh-CN","frontmatter":{"title":"如何利用Trae开发VS Code插件","date":"2025-08-18T09:24:11.000Z","tags":null},"git":{"updatedTime":1755576068000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"97a2b235a024f048c91be8374544a522a447a243","time":1755576068000,"email":"3036190149@qq.com","author":"zhaomy","message":"如何利用Trae开发VS Code插件"}]},"filePathRelative":"ai/trae/trae-plugin.md","excerpt":"\\n<h2>插件需求：自定义Markdown格式化工具</h2>\\n<p>开发一个VS Code插件，用于格式化Markdown文档。这个插件不需要像一般Markdown格式化工具那样处理通用格式，而是专注于解决从文档平台导出的Markdown文件排版不规整的问题。</p>\\n<h3>具体功能</h3>\\n<ol>\\n<li>\\n<p><strong>自定义规则支持</strong>：</p>\\n<ul>\\n<li>删除特定的HTML标签（像<code>&lt;font&gt;</code>这种）</li>\\n<li>移除多余的符号（比如<code>**</code>加粗符号）</li>\\n<li>清理标题中的序号（比如<code>### 1.2 标题</code>变成<code>### 标题</code>）</li>\\n<li>处理各种分隔线（比如<code>---</code>）</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>换行符处理</strong>：</p>\\n<ul>\\n<li>支持Windows和Linux换行符</li>\\n<li>在标题后面自动加空行</li>\\n<li>在代码块前后加空行</li>\\n<li>调整列表项之间的间距</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>空行控制</strong>：</p>\\n<ul>\\n<li>支持合并多个连续空行</li>\\n<li>确保不同元素之间有合适的间距</li>\\n</ul>\\n</li>\\n</ol>"}');export{t as comp,o as data};
