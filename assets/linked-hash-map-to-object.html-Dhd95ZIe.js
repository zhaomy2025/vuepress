import{_ as u,c as k,a as n,e as p,d as r,w as t,r as i,o as d,b as s}from"./app-DbqavURa.js";const m={},b={class:"table-of-contents"};function v(g,a){const l=i("router-link"),o=i("CodeTabs");return d(),k("div",null,[a[14]||(a[14]=n("h1",{id:"linkedhashmap解析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#linkedhashmap解析"},[n("span",null,"LinkedHashMap解析")])],-1)),n("nav",b,[n("ul",null,[n("li",null,[p(l,{to:"#简介"},{default:t(()=>a[0]||(a[0]=[s("简介")])),_:1,__:[0]})]),n("li",null,[p(l,{to:"#使用反射"},{default:t(()=>a[1]||(a[1]=[s("使用反射")])),_:1,__:[1]})]),n("li",null,[p(l,{to:"#使用objectmap"},{default:t(()=>a[2]||(a[2]=[s("使用ObjectMap")])),_:1,__:[2]})]),n("li",null,[p(l,{to:"#objectmap-jsondeserialize"},{default:t(()=>a[3]||(a[3]=[s("ObjectMap + @JsonDeserialize")])),_:1,__:[3]})])])]),a[15]||(a[15]=n("h2",{id:"简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#简介"},[n("span",null,"简介")])],-1)),a[16]||(a[16]=n("p",null,"LinkedHashMap转为对象有多种方式，这里介绍两种常用的方式：",-1)),a[17]||(a[17]=n("ol",null,[n("li",null,"使用反射，需要手动编写转换代码"),n("li",null,"使用ObjectMap，直接调用方法转换，推荐使用")],-1)),a[18]||(a[18]=n("h2",{id:"使用反射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用反射"},[n("span",null,"使用反射")])],-1)),a[19]||(a[19]=n("p",null,"支持嵌套对象和列表。",-1)),p(o,{id:"30",data:[{id:"deepMapToObject"},{id:"使用实例"}],"tab-id":"java"},{title0:t(({value:e,isActive:c})=>a[4]||(a[4]=[s("deepMapToObject")])),title1:t(({value:e,isActive:c})=>a[5]||(a[5]=[s("使用实例")])),tab0:t(({value:e,isActive:c})=>a[6]||(a[6]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"static"),s(),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token class-name"},"T"),s(),n("span",{class:"token function"},"deepMapToObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" map"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},">")]),s(" clazz"),n("span",{class:"token punctuation"},")"),s()]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"T"),s(" obj "),n("span",{class:"token operator"},"="),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"newInstance"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Field"),s(" field "),n("span",{class:"token operator"},":"),s(" clazz"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getDeclaredFields"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAccessible"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"containsKey"),n("span",{class:"token punctuation"},"("),s("field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"Object"),s(" value "),n("span",{class:"token operator"},"="),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"deepMapToObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},")"),s(" value"),n("span",{class:"token punctuation"},","),s(" field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getType"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("value "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"List"),s(),n("span",{class:"token operator"},"&&"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},")"),s(" value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},")"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"stream"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),s("map "),n("span",{class:"token operator"},"->"),s(),n("span",{class:"token function"},"deepMapToObject"),n("span",{class:"token punctuation"},"("),s("map"),n("span",{class:"token punctuation"},","),s(" field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getType"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"collect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Collectors"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("              field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("field"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" obj"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:e,isActive:c})=>a[7]||(a[7]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" department "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 普通属性")]),s(`
`),n("span",{class:"line"},[s("department"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"研发部"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 嵌套对象")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" address "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("address"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"city"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"北京"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("address"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"street"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"朝阳区建国路88号"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("department"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"address"'),n("span",{class:"token punctuation"},","),s(" address"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// 嵌套列表")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(" employees "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ArrayList"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" user1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("user1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"张三"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("user1"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"age"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"30"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" user2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("user2"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"李四"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("user2"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"age"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"28"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("employees"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("user1"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("employees"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("user2"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("department"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"put"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"employees"'),n("span",{class:"token punctuation"},","),s(" employees"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"Department"),s(" departmentObj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"deepMapToObject"),n("span",{class:"token punctuation"},"("),s("department"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Department"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[20]||(a[20]=r(`<h2 id="使用objectmap" tabindex="-1"><a class="header-anchor" href="#使用objectmap"><span>使用ObjectMap</span></a></h2><p>ObjectMap是Java Jackson库的一个重要工具类，可以将LinkedHashMap转为对象。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果入参是JSON字符串，可以先将JSON字符串转换为LinkedHashMap，然后再转换为对象，不过不推荐使用这种方式。因为objectMapper可以直接将JSON字符串转换为对象，不需要使用LinkedHashMap作为中间转换，此处只是为了说明ObjectMap可以将JSON字符串转换为对象，重点介绍LinkedHashMap到对象的转换。</p></div><ol><li>通过<code>readValue</code>将JSON字符串转换为LinkedHashMap</li><li>通过<code>convertValue</code>将LinkedHashMap转换为对象</li><li>对于对象，需要指定对象类型<code>elementType</code></li><li>对于列表，需要通过<code>objectMapper.getTypeFactory().constructCollectionType(List.class, elementType)</code>指定列表及元素类型</li><li>对于嵌套列表，需要手动遍历，将LinkedHashMap转换为对象</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 将Json字符串转换为LinkedHashMap</span></span>
<span class="line"><span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;name\\&quot;:\\&quot;研发部\\&quot;,\\&quot;address\\&quot;:{\\&quot;city\\&quot;:\\&quot;北京\\&quot;},\\&quot;employees\\&quot;:[{\\&quot;name\\&quot;:\\&quot;张三\\&quot;,\\&quot;age\\&quot;:30},{\\&quot;age\\&quot;:28}]}&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> linkedHashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> <span class="token class-name">LinkedHashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 转换为对象，注意嵌套列表会解析为字符串，需要额外处理</span></span>
<span class="line"><span class="token class-name">Department</span> dept <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>department<span class="token punctuation">,</span> <span class="token class-name">Department</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 处理嵌套列表</span></span>
<span class="line"><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> employees <span class="token operator">=</span> linkedHashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;employees&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">convertValue</span><span class="token punctuation">(</span>employees<span class="token punctuation">,</span></span>
<span class="line">        objectMapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructCollectionType</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Employee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="objectmap-jsondeserialize" tabindex="-1"><a class="header-anchor" href="#objectmap-jsondeserialize"><span>ObjectMap + @JsonDeserialize</span></a></h2><p>通过<code>LinkedHashMap&lt;String, Object&gt; linkedHashMap = (LinkedHashMap&lt;String, Object&gt;) responseEntity.getBody(); </code>获取的LinkedHashMap，所有属性值都为String类型，需要自定义反序列化器将其转换为对象。</p>`,7)),p(o,{id:"83",data:[{id:"MyObject"},{id:"ContractVO"},{id:"ContractVOListDeserializer"}],"tab-id":"java"},{title0:t(({value:e,isActive:c})=>a[8]||(a[8]=[s("MyObject")])),title1:t(({value:e,isActive:c})=>a[9]||(a[9]=[s("ContractVO")])),title2:t(({value:e,isActive:c})=>a[10]||(a[10]=[s("ContractVOListDeserializer")])),tab0:t(({value:e,isActive:c})=>a[11]||(a[11]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyObject"),s("  "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@JsonDeserialize"),n("span",{class:"token punctuation"},"("),s("using "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ContractVOListDeserializer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"ContractVO"),n("span",{class:"token punctuation"},">")]),s(" phones"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:e,isActive:c})=>a[12]||(a[12]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ContractVO"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" phone"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:t(({value:e,isActive:c})=>a[13]||(a[13]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"ContractVOListDeserializer"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"JsonDeserializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"ContractVO"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"ContractVO"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"deserialize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"JsonParser"),s(" jp"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"DeserializationContext"),s(" ctxt"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"Object"),s(" fieldValue "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readValueAs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fieldValue "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果已经是List类型直接返回")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isInstance"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果是JSON字符串")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fieldValue "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"String"),s(" strValue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(" fieldValue"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("strValue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"["'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token keyword"},"return"),s(" mapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readValue"),n("span",{class:"token punctuation"},"("),s("strValue"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"TypeReference"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"ContractVO"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 默认转换")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),s(" mapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertValue"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Exception"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"转换嵌套字段失败"'),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1})])}const f=u(m,[["render",v]]),h=JSON.parse('{"path":"/posts/java/misc/linked-hash-map-to-object.html","title":"LinkedHashMap解析","lang":"zh-CN","frontmatter":{"title":"LinkedHashMap解析","date":"2025-06-18T01:08:11.652Z","category":["java","LinkedHashMap解析"],"tags":["java","LinkedHashMap解析","ObjectMap","JSON"]},"git":{"updatedTime":1750750917000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"d72ca8e867076fb230331ac91b3c1b164a0e500f","time":1750750917000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、java：json、MyBatis 2、Spring集成Oracle 3、源码解析 4、Markdown文件格式化：去除字体"}]},"filePathRelative":"posts/java/misc/linked-hash-map-to-object.md","excerpt":"\\n\\n<h2>简介</h2>\\n<p>LinkedHashMap转为对象有多种方式，这里介绍两种常用的方式：</p>\\n<ol>\\n<li>使用反射，需要手动编写转换代码</li>\\n<li>使用ObjectMap，直接调用方法转换，推荐使用</li>\\n</ol>\\n<h2>使用反射</h2>\\n<p>支持嵌套对象和列表。</p>\\n\\n<h2>使用ObjectMap</h2>\\n<p>ObjectMap是Java Jackson库的一个重要工具类，可以将LinkedHashMap转为对象。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>如果入参是JSON字符串，可以先将JSON字符串转换为LinkedHashMap，然后再转换为对象，不过不推荐使用这种方式。因为objectMapper可以直接将JSON字符串转换为对象，不需要使用LinkedHashMap作为中间转换，此处只是为了说明ObjectMap可以将JSON字符串转换为对象，重点介绍LinkedHashMap到对象的转换。</p>\\n</div>"}');export{f as comp,h as data};
