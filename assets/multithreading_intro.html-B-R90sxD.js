import{_ as e,c as t,d as i,o}from"./app-DSgHH1tE.js";const r={};function c(l,a){return o(),t("div",null,a[0]||(a[0]=[i("<p>在Java中，多线程是一种并发编程技术，允许程序同时执行多个任务。通过多线程，可以充分利用CPU资源，提高程序的执行效率和响应速度。Java提供了丰富的API来支持多线程编程，主要通过<code>java.lang.Thread</code>类和<code>java.util.concurrent</code>包来实现。</p><p>这篇文章主要介绍Java多线程编程的基础知识，包括以下内容：</p><ul><li>线程的创建、启动、同步、通信与死锁等基本概念。</li><li>线程同步机制，包括：synchronized关键字、显式锁、读写锁和线程安全集合等，确保多线程环境下数据的一致性和安全性。</li><li>线程池和Executor框架，核心组件包括Executor、Future等接口及其实现类，通过合理配置线程池参数（核心线程数、最大线程数、工作队列等），优化线程资源的管理和使用。</li><li>高级并发工具（CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture等）的特性与应用。</li></ul><p>本文是Java多线程编程的快速入门指南，将帮助你建立并发编程的基本概念和使用技能。 详细的JUC（Java并发工具包）相关类的深入解析和实战应用，将在后续文章中陆续介绍。</p>",4)]))}const m=e(r,[["render",c]]),d=JSON.parse('{"path":"/java/intermediate/multithreading_intro.html","title":"Java 多线程编程","lang":"zh-CN","frontmatter":{"title":"Java 多线程编程","date":"2025-08-04T05:25:29.625Z","category":["java","intermediate","multithreading"],"tags":["java","intermediate","multithreading"]},"git":{"updatedTime":1754642867000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":3,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"b2ec0058d9c52bcd768c04c96c8824ef5d82bbf4","time":1754642867000,"email":"3036190149@qq.com","author":"zhaomy","message":"Java目录移动"},{"hash":"2286a8eeceda2ff07a58ad660195a84e1bace514","time":1754549948000,"email":"3036190149@qq.com","author":"zhaomy","message":"多线程编程 概述"},{"hash":"3d42842f074771b72133a37302ce6a03d1cdd448","time":1754469218000,"email":"3036190149@qq.com","author":"zhaomy","message":"Java 中级 多线程编程"}]},"filePathRelative":"java/intermediate/multithreading_intro.md","excerpt":"<p>在Java中，多线程是一种并发编程技术，允许程序同时执行多个任务。通过多线程，可以充分利用CPU资源，提高程序的执行效率和响应速度。Java提供了丰富的API来支持多线程编程，主要通过<code>java.lang.Thread</code>类和<code>java.util.concurrent</code>包来实现。</p>\\n<p>这篇文章主要介绍Java多线程编程的基础知识，包括以下内容：</p>\\n<ul>\\n<li>线程的创建、启动、同步、通信与死锁等基本概念。</li>\\n<li>线程同步机制，包括：synchronized关键字、显式锁、读写锁和线程安全集合等，确保多线程环境下数据的一致性和安全性。</li>\\n<li>线程池和Executor框架，核心组件包括Executor、Future等接口及其实现类，通过合理配置线程池参数（核心线程数、最大线程数、工作队列等），优化线程资源的管理和使用。</li>\\n<li>高级并发工具（CountDownLatch、CyclicBarrier、Semaphore、CompletableFuture等）的特性与应用。</li>\\n</ul>"}');export{m as comp,d as data};
