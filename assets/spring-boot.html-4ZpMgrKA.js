import{_ as s,c as p,a as t,d as e,e as n,w as r,r as l,o as g,b as a}from"./app-C3OAnCym.js";const d={},b={class:"table-of-contents"};function h(S,o){const i=l("router-link");return g(),p("div",null,[o[13]||(o[13]=t("h1",{id:"spring-boot-知识体系",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#spring-boot-知识体系"},[t("span",null,"Spring Boot 知识体系")])],-1)),t("nav",b,[t("ul",null,[t("li",null,[n(i,{to:"#spring-boot-入门"},{default:r(()=>o[0]||(o[0]=[a("Spring Boot 入门")])),_:1,__:[0]})]),t("li",null,[n(i,{to:"#spring-boot-集成日志"},{default:r(()=>o[1]||(o[1]=[a("Spring Boot 集成日志")])),_:1,__:[1]})]),t("li",null,[n(i,{to:"#spring-boot-集成-oracle-jpa-mybatis-mybatis-plus"},{default:r(()=>o[2]||(o[2]=[a("Spring Boot 集成 Oracle（JPA，MyBatis，MyBatis-Plus）")])),_:1,__:[2]})]),t("li",null,[n(i,{to:"#spring-boot-集成-redis"},{default:r(()=>o[3]||(o[3]=[a("Spring Boot 集成 Redis")])),_:1,__:[3]})]),t("li",null,[n(i,{to:"#spring-boot-集成缓存"},{default:r(()=>o[4]||(o[4]=[a("Spring Boot 集成缓存")])),_:1,__:[4]})]),t("li",null,[n(i,{to:"#spring-boot-集成消息队列"},{default:r(()=>o[5]||(o[5]=[a("Spring Boot 集成消息队列")])),_:1,__:[5]})]),t("li",null,[n(i,{to:"#spring-boot-集成通知-email-短信-微信"},{default:r(()=>o[6]||(o[6]=[a("Spring Boot 集成通知（Email，短信，微信）")])),_:1,__:[6]})]),t("li",null,[n(i,{to:"#spring-boot-集成-websocket"},{default:r(()=>o[7]||(o[7]=[a("Spring Boot 集成 Websocket")])),_:1,__:[7]})]),t("li",null,[n(i,{to:"#spring-boot-集成定时任务"},{default:r(()=>o[8]||(o[8]=[a("Spring Boot 集成定时任务")])),_:1,__:[8]})]),t("li",null,[n(i,{to:"#spring-boot-集成视图解析"},{default:r(()=>o[9]||(o[9]=[a("Spring Boot 集成视图解析")])),_:1,__:[9]})]),t("li",null,[n(i,{to:"#spring-boot-集成工作流引擎"},{default:r(()=>o[10]||(o[10]=[a("Spring Boot 集成工作流引擎")])),_:1,__:[10]})]),t("li",null,[n(i,{to:"#spring-boot-集成监控"},{default:r(()=>o[11]||(o[11]=[a("Spring Boot 集成监控")])),_:1,__:[11]})]),t("li",null,[n(i,{to:"#spring-boot-应用部署"},{default:r(()=>o[12]||(o[12]=[a("Spring Boot 应用部署")])),_:1,__:[12]})])])]),o[14]||(o[14]=e('<h2 id="spring-boot-入门" tabindex="-1"><a class="header-anchor" href="#spring-boot-入门"><span>Spring Boot 入门</span></a></h2><p>SpringBoot采用&quot;约定优于配置&quot;的理念，提供了大量默认配置，开发者只需调修改不符合默认约定的配置即可快速构建应用，无需繁琐的XML配置。</p><p>通过一个简单的HelloWorld示例，可以快速掌握SpringBoot项目的创建、开发、运行和打包流程。其核心特性之一是Starter机制，如spring-boot-starter-data-jpa、spring-boot-starter-web等，这些预置依赖能自动整合相关技术栈，实现开箱即用。</p><p>在开发过程中，常用注解如@SpringBootApplication、@Configuration等简化了配置工作，而属性绑定和组件扫描则进一步提升了开发效率。此外，SpringBoot支持热部署、缓存优化和开发者工具，为调试和测试提供了便利，最终打包生成的独立JAR文件可直接运行，极大简化了部署流程。</p><h2 id="spring-boot-集成日志" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成日志"><span>Spring Boot 集成日志</span></a></h2><h2 id="spring-boot-集成-oracle-jpa-mybatis-mybatis-plus" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-oracle-jpa-mybatis-mybatis-plus"><span>Spring Boot 集成 Oracle（JPA，MyBatis，MyBatis-Plus）</span></a></h2><h2 id="spring-boot-集成-redis" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-redis"><span>Spring Boot 集成 Redis</span></a></h2><p>Redis是最常用的KV数据库，Spring 通过模板方式（RedisTemplate）提供了对Redis的数据查询和操作功能。</p><p>Spring Boot 为 Redis 集成提供了开箱即用的支持，通过 spring-boot-starter-data-redis 简化了配置流程。该 starter 会自动配置 Redis 连接工厂和模板类，开发者只需关注业务实现即可。</p><p>在客户端选择方面，Spring Boot 2.x 默认使用高性能的 Lettuce 客户端（支持响应式编程和连接复用），而 1.x 版本则采用 Jedis。</p><p>当存在相关依赖时，还会激活可选功能：</p><ul><li>若检测到 commons-pool2 依赖，会自动配置连接池</li><li>支持与 @Transactional 注解集成，提供事务性支持</li><li>支持 @Cacheable 等注解的 Redis 缓存实现</li><li>引入 spring-boot-starter-data-redis-reactive 时支持 ReactiveRedisTemplate</li></ul><p>实际开发中只需三步：</p><ol><li>引入 starter 依赖，自动获取 RedisTemplate 和连接工厂</li><li>通过 @Bean 自定义 RedisTemplate，主要配置序列化器（推荐使用 JSON 格式）</li><li>直接注入 RedisTemplate 即可操作各种数据结构</li></ol><h2 id="spring-boot-集成缓存" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成缓存"><span>Spring Boot 集成缓存</span></a></h2><h2 id="spring-boot-集成消息队列" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成消息队列"><span>Spring Boot 集成消息队列</span></a></h2><h2 id="spring-boot-集成通知-email-短信-微信" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成通知-email-短信-微信"><span>Spring Boot 集成通知（Email，短信，微信）</span></a></h2><h2 id="spring-boot-集成-websocket" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成-websocket"><span>Spring Boot 集成 Websocket</span></a></h2><h2 id="spring-boot-集成定时任务" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成定时任务"><span>Spring Boot 集成定时任务</span></a></h2><h2 id="spring-boot-集成视图解析" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成视图解析"><span>Spring Boot 集成视图解析</span></a></h2><h2 id="spring-boot-集成工作流引擎" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成工作流引擎"><span>Spring Boot 集成工作流引擎</span></a></h2><h2 id="spring-boot-集成监控" tabindex="-1"><a class="header-anchor" href="#spring-boot-集成监控"><span>Spring Boot 集成监控</span></a></h2><h2 id="spring-boot-应用部署" tabindex="-1"><a class="header-anchor" href="#spring-boot-应用部署"><span>Spring Boot 应用部署</span></a></h2>',23))])}const u=s(d,[["render",h]]),m=JSON.parse('{"path":"/posts/spring/spring-boot.html","title":"Spring Boot 知识体系","lang":"zh-CN","frontmatter":{"title":"Spring Boot 知识体系","date":"2025-05-14T02:55:10.135Z","category":["Spring","Spring Boot"],"tags":["Spring","Spring Boot"]},"git":{"updatedTime":1750302794000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":2,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"5d4102577494afef85517112563f786cf6fdf9b4","time":1750302794000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Boot Redis 2、Spring 设计模式"},{"hash":"c2e0952b87ee92b775b726d15f9d5432d081cec7","time":1749101333000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Aop 2、Spring AOP 实现原理 3、Spring Boot 知识体系 4、Spring Boot 入门"}]},"filePathRelative":"posts/spring/spring-boot.md","excerpt":"\\n\\n<h2>Spring Boot 入门</h2>\\n<p>SpringBoot采用\\"约定优于配置\\"的理念，提供了大量默认配置，开发者只需调修改不符合默认约定的配置即可快速构建应用，无需繁琐的XML配置。</p>\\n<p>通过一个简单的HelloWorld示例，可以快速掌握SpringBoot项目的创建、开发、运行和打包流程。其核心特性之一是Starter机制，如spring-boot-starter-data-jpa、spring-boot-starter-web等，这些预置依赖能自动整合相关技术栈，实现开箱即用。</p>\\n<p>在开发过程中，常用注解如@SpringBootApplication、@Configuration等简化了配置工作，而属性绑定和组件扫描则进一步提升了开发效率。此外，SpringBoot支持热部署、缓存优化和开发者工具，为调试和测试提供了便利，最终打包生成的独立JAR文件可直接运行，极大简化了部署流程。</p>"}');export{u as comp,m as data};
