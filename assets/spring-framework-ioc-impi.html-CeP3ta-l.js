import{_ as u,c as r,a as s,d as l,e,w as t,b as a,r as c,o as d}from"./app-C95U6Hpw.js";const k={},b={class:"table-of-contents"};function v(m,n){const p=c("router-link"),o=c("Tip"),i=c("Mermaid");return d(),r("div",null,[n[65]||(n[65]=s("h1",{id:"spring-ioc-实现原理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring-ioc-实现原理"},[s("span",null,"Spring IoC 实现原理")])],-1)),s("nav",b,[s("ul",null,[s("li",null,[e(p,{to:"#ioc-体系结构设计"},{default:t(()=>n[0]||(n[0]=[a("IoC 体系结构设计")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(p,{to:"#beanfactory-定义了ioc容器基本功能规范"},{default:t(()=>n[1]||(n[1]=[a("BeanFactory 定义了IoC容器基本功能规范")])),_:1,__:[1]})]),s("li",null,[e(p,{to:"#beandefinition定义bean对象及其依赖关系"},{default:t(()=>n[2]||(n[2]=[a("BeanDefinition定义Bean对象及其依赖关系")])),_:1,__:[2]})]),s("li",null,[e(p,{to:"#beanregistry-将bean注册到ioc容器中"},{default:t(()=>n[3]||(n[3]=[a("BeanRegistry 将Bean注册到IoC容器中")])),_:1,__:[3]})]),s("li",null,[e(p,{to:"#applicationcontext-继承beanfactory-提供更多功能"},{default:t(()=>n[4]||(n[4]=[a("ApplicationContext 继承BeanFactory，提供更多功能")])),_:1,__:[4]})])])]),s("li",null,[e(p,{to:"#ioc-容器初始化过程"},{default:t(()=>n[5]||(n[5]=[a("IoC 容器初始化过程")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(p,{to:"#beanfactory-容器初始化"},{default:t(()=>n[6]||(n[6]=[a("BeanFactory 容器初始化")])),_:1,__:[6]})]),s("li",null,[e(p,{to:"#applicationcontext-容器初始化"},{default:t(()=>n[7]||(n[7]=[a("ApplicationContext 容器初始化")])),_:1,__:[7]})]),s("li",null,[e(p,{to:"#beanfactory-vs-applicationcontext"},{default:t(()=>n[8]||(n[8]=[a("BeanFactory VS ApplicationContext")])),_:1,__:[8]})])])]),s("li",null,[e(p,{to:"#bean-实例化"},{default:t(()=>n[9]||(n[9]=[a("Bean 实例化")])),_:1,__:[9]}),s("ul",null,[s("li",null,[e(p,{to:"#创建bean实例"},{default:t(()=>n[10]||(n[10]=[a("创建Bean实例")])),_:1,__:[10]})]),s("li",null,[e(p,{to:"#循环依赖"},{default:t(()=>n[11]||(n[11]=[a("循环依赖")])),_:1,__:[11]})]),s("li",null,[e(p,{to:"#bean生命周期"},{default:t(()=>n[12]||(n[12]=[a("Bean生命周期")])),_:1,__:[12]})])])])])]),n[66]||(n[66]=l(`<h2 id="ioc-体系结构设计" tabindex="-1"><a class="header-anchor" href="#ioc-体系结构设计"><span>IoC 体系结构设计</span></a></h2><h3 id="beanfactory-定义了ioc容器基本功能规范" tabindex="-1"><a class="header-anchor" href="#beanfactory-定义了ioc容器基本功能规范"><span>BeanFactory 定义了IoC容器基本功能规范</span></a></h3><p>BeanFactory 作为最顶层的接口，定义了IoC容器基本功能规范：</p><ul><li>getBean()：提供多个重载方法，根据bean名称、bean类型等参数获取bean实例</li><li>containsBean(String name)：判断是否包含指定名称的bean</li><li>isSingleton(String name)：判断bean是否为单例模式</li><li>isPrototype(String name)：判断bean是否为原型模式</li><li>isTypeMatch(String name, typeToMatch)：提供多个重载方法，判断bean类型是否匹配</li><li>getType(String name)：获取bean类型</li><li>getAliases(String name)：获取bean的别名 BeanFactory 有三个子类：ListableBeanFactory、HierarchicalBeanFactory 和AutowireCapableBeanFactory。</li><li>ListableBeanFactory：提供了获取bean名称列表的功能</li><li>HierarchicalBeanFactory：提供了获取父BeanFactory的功能</li><li>AutowireCapableBeanFactory：提供了自动装配功能</li></ul><div class="language-plantuml line-numbers-mode" data-highlighter="prismjs" data-ext="plantuml"><pre><code><span class="line"><span class="token delimiter punctuation">@startuml</span></span>
<span class="line"><span class="token keyword">class</span> BeanFactory<span class="token punctuation">{</span></span>
<span class="line">	getBean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	containsBean<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	isSingleton<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	isPrototype<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	isTypeMatch<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	getType<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">	getAliases<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token delimiter punctuation">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beandefinition定义bean对象及其依赖关系" tabindex="-1"><a class="header-anchor" href="#beandefinition定义bean对象及其依赖关系"><span>BeanDefinition定义Bean对象及其依赖关系</span></a></h3><p>BeanDefinitionReader 是 BeanDefinition的解析器。<br> BeanDefinitionHolder 是 BeanDefination的包装类，用来存储BeanDefinition，name以及aliases等。</p><h3 id="beanregistry-将bean注册到ioc容器中" tabindex="-1"><a class="header-anchor" href="#beanregistry-将bean注册到ioc容器中"><span>BeanRegistry 将Bean注册到IoC容器中</span></a></h3><h3 id="applicationcontext-继承beanfactory-提供更多功能" tabindex="-1"><a class="header-anchor" href="#applicationcontext-继承beanfactory-提供更多功能"><span>ApplicationContext 继承BeanFactory，提供更多功能</span></a></h3><p>从ApplicationContext的继承关系分析ApplicationContext的功能：</p><ul><li>ApplicationEventPublisher：提供应用事件发布功能，包括容器启动事件、关闭事件等。 <ul><li>实现了 ApplicationListener 事件监听接口的 Bean 可以接收到容器事件 ， 并对事件进行响应处理 。</li></ul></li><li>LifeCycle：提供了容器生命周期管理功能，包括容器启动、停止等。</li><li>MessageSource：提供国际化消息访问功能</li><li>ResourceLoader：提供资源加载功能</li></ul><p>围绕着是否需要Refresh容器衍生出两个抽象类，根据不同的资源加载方式，衍生出了众多ApplicationContext的实现类，常见的ApplicationContext实现类有：</p><ul><li>AbstractRefreshableApplicationContext：提供了容器刷新功能 <ul><li>AbstractXmlApplicationContext xml相关的实现类 <ul><li>FileSystemXmlApplicationContext</li><li>ClassPathXmlApplicationContext</li></ul></li><li>AbstractRefreshableWebApplicationContext web相关的实现类 <ul><li>AnnotationConfigWebApplicationContext</li><li>XmlWebApplicationContext</li><li>GroovyWebApplicationContext</li></ul></li></ul></li><li>GenericApplicationContext：提供了容器基本功能，不提供刷新功能 <ul><li>AnnotationConfigApplicationContext</li><li>GenericXXX和StaticXXX 包括web相关的实现类和xml相关的实现类</li></ul></li></ul><p>注：</p><ul><li>AnnotationConfigApplicationContext不支持刷新功能，因为基于注解的配置，是不太会被运行时修改的</li><li>xml相关的常用实现类支持刷新功能，因为配置文件是容易修改的，需要支持刷新功能</li></ul><div class="language-plantuml line-numbers-mode" data-highlighter="prismjs" data-ext="plantuml"><pre><code><span class="line"><span class="token delimiter punctuation">@startuml</span></span>
<span class="line">ApplicationContext <span class="token arrow operator">&lt;|--</span> WebApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line">ApplicationContext <span class="token arrow operator">&lt;|--</span> ConfigurableApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line"><span class="token keyword">class</span> DefaultResourceLoader</span>
<span class="line">ResourceLoader <span class="token punctuation">(</span><span class="token punctuation">)</span>-- DefaultResourceLoader</span>
<span class="line"><span class="token keyword">class</span> AbstractApplicationContext<span class="token punctuation">{</span></span>
<span class="line">	refresh<span class="token punctuation">(</span><span class="token punctuation">)</span>容器初始化入口</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">DefaultResourceLoader <span class="token arrow operator">&lt;|--</span> AbstractApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line">ConfigurableApplicationContext <span class="token arrow operator">&lt;|--</span> AbstractApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line">DisposableBean <span class="token punctuation">(</span><span class="token punctuation">)</span>- AbstractApplicationContext</span>
<span class="line"><span class="token keyword">class</span> AbstractRefreshableApplicationContext<span class="token punctuation">{</span></span>
<span class="line">refreshBeanFactory<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">AbstractApplicationContext <span class="token arrow operator">&lt;|--</span> AbstractRefreshableApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line">BeanNameAware <span class="token punctuation">(</span><span class="token punctuation">)</span>- AbstractRefreshableApplicationContext</span>
<span class="line">AbstractRefreshableApplicationContext -<span class="token punctuation">(</span><span class="token punctuation">)</span>InitializingBean</span>
<span class="line"><span class="token keyword">class</span> AbstractXmlApplicationContext<span class="token punctuation">{</span></span>
<span class="line">loadBeanDefinitions<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">AbstractRefreshableApplicationContext <span class="token arrow operator">&lt;|--</span> AbstractXmlApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line"><span class="token keyword">class</span> FileSystemXmlApplicationContext<span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">AbstractXmlApplicationContext <span class="token arrow operator">&lt;|--</span> FileSystemXmlApplicationContext <span class="token color symbol">#blue</span></span>
<span class="line"><span class="token delimiter punctuation">@enduml</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ioc-容器初始化过程" tabindex="-1"><a class="header-anchor" href="#ioc-容器初始化过程"><span>IoC 容器初始化过程</span></a></h2><p>下面介绍BeanFactory容器和ApplicationContext容器的初始化过程。虽然BeanFactory容器是ApplicationContext容器的子集，但为了方便直观理解BeanFactory的初始化过程，还是单独介绍BeanFactory的初始化过程。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>BeanFactory 采用懒加载机制创建Bean实例，因此Bean的实例化过程发生在getBean()方法调用时。<br> ApplicationContext会在容器初始化时创建所有非懒加载的Bean实例，所以Bean的实例化也属于ApplicationContext初始化过程的一部分。<br> Bean的实例化过程比较多，放在下一节介绍，本节只介绍容器初始化主流程。</p></div><h3 id="beanfactory-容器初始化" tabindex="-1"><a class="header-anchor" href="#beanfactory-容器初始化"><span>BeanFactory 容器初始化</span></a></h3><p>BeanFactory 容器初始化过程主要分为以下几个步骤：</p><ol><li>创建BeanFactory实例（通常为 DefaultListableBeanFactory）</li><li>创建并配置读取器 BeanDefinitionReader</li><li>加载配置并注册Bean定义 <code>reader.loadBeanDefinitions()</code><ol><li>ResourceLoader 加载资源</li><li>BeanDefinitionReader 解析配置，生成 BeanDefinition</li><li>BeanDefinitionRegistry 将 BeanDefinition 注册到IoC容器中</li></ol></li><li>按需初始化 Bean 实例（放在<a href="#bean-%E5%AE%9E%E4%BE%8B%E5%8C%96">Bean 实例化</a>介绍）</li></ol><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// 1. 创建工厂</span></span>
<span class="line"><span class="token class-name">DefaultListableBeanFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 创建读取器</span></span>
<span class="line"><span class="token class-name">XmlBeanDefinitionReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 3. 加载配置</span></span>
<span class="line">reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;beans.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 4. 获取Bean（此时才初始化）</span></span>
<span class="line"><span class="token class-name">MyBean</span> bean <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">MyBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="设置资源解析器和环境" tabindex="-1"><a class="header-anchor" href="#设置资源解析器和环境"><span>设置资源解析器和环境</span></a></h4><h4 id="设置配置路径" tabindex="-1"><a class="header-anchor" href="#设置配置路径"><span>设置配置路径</span></a></h4><h3 id="applicationcontext-容器初始化" tabindex="-1"><a class="header-anchor" href="#applicationcontext-容器初始化"><span>ApplicationContext 容器初始化</span></a></h3><p>ApplicationContext有多个实现类，这些容器的初始化流程在细节上有差别，但大体流程相同，下面按照以下顺序介绍ApplicationContext容器的初始化过程：</p><ol><li>首先介绍ApplicationContext初始化流程框架。</li><li>然后以AnnotationConfigEmbeddedWebApplicationContext和ClasspathXmlApplicationContext为例介绍具体容器初始化过程。</li><li>最后介绍ApplicationContext初始化过程的核心方法refresh()。</li></ol><h4 id="applicationcontext-容器初始化框架" tabindex="-1"><a class="header-anchor" href="#applicationcontext-容器初始化框架"><span>ApplicationContext 容器初始化框架</span></a></h4><p>核心步骤：</p><ol><li>创建BeanFactory实例</li><li>创建Reader实例</li><li>调用<code>refresh()</code>方法</li><li>返回ApplicationContext实例</li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>AbstractRefreshableApplicationContext可省略步骤1和步骤2，会在<code>refresh() -&gt; obtainFreshBeanFactory() -&gt; refreshBeanFactory()</code>方法中创建BeanFactory实例</p></div><h4 id="annotationconfigembeddedwebapplicationcontext初始化过程" tabindex="-1"><a class="header-anchor" href="#annotationconfigembeddedwebapplicationcontext初始化过程"><span>AnnotationConfigEmbeddedWebApplicationContext初始化过程</span></a></h4>`,33)),s("p",null,[n[14]||(n[14]=a("在")),n[15]||(n[15]=s("code",null,"SpringApplication::run()",-1)),n[16]||(n[16]=a("方法中")),e(o,null,{default:t(()=>n[13]||(n[13]=[a(" 1.5.13版本")])),_:1,__:[13]}),n[17]||(n[17]=a("简化版本的初始化过程如下："))]),s("ol",null,[s("li",null,[n[28]||(n[28]=a("创建")),n[29]||(n[29]=s("code",null,"AnnotationConfigEmbeddedWebApplicationContext",-1)),n[30]||(n[30]=a("实例 ")),s("ol",null,[s("li",null,[n[19]||(n[19]=a("创建")),n[20]||(n[20]=s("code",null,"AnnotatedBeanDefinitionReader",-1)),n[21]||(n[21]=a("实例 ")),e(o,null,{default:t(()=>n[18]||(n[18]=[a("核心步骤2")])),_:1,__:[18]})]),s("li",null,[n[23]||(n[23]=a("父类构造函数")),n[24]||(n[24]=s("code",null,"GenericApplicationContext()",-1)),n[25]||(n[25]=a("中创建")),n[26]||(n[26]=s("code",null,"BeanFactory",-1)),n[27]||(n[27]=a("实例 ")),e(o,null,{default:t(()=>n[22]||(n[22]=[a("核心步骤1")])),_:1,__:[22]})])])]),s("li",null,[n[36]||(n[36]=a("刷新上下文 ")),n[37]||(n[37]=s("code",null,"refreshContext(context)",-1)),s("ol",null,[s("li",null,[n[33]||(n[33]=a("调用")),n[34]||(n[34]=s("code",null,"refresh(context)",-1)),n[35]||(n[35]=a("方法 ")),s("ol",null,[s("li",null,[n[32]||(n[32]=a("context.refresh() ")),e(o,null,{default:t(()=>n[31]||(n[31]=[a("核心步骤3")])),_:1,__:[31]})])])])])]),s("li",null,[n[39]||(n[39]=a("返回")),n[40]||(n[40]=s("code",null,"ApplicationContext",-1)),n[41]||(n[41]=a("实例 ")),e(o,null,{default:t(()=>n[38]||(n[38]=[a("核心步骤4")])),_:1,__:[38]}),n[42]||(n[42]=a(" 时序图如下： create AnnotationConfigEmbeddedWebApplicationContext create AnnotatedBeanDefinitionReader"))])]),e(i,{id:"mermaid-364",code:"eJyVUUFOwzAQvOcVPoKQP5BDpUL5ABfOrr0JltqNWW8EPwCpnLlxhl/wmgie0dhN0lRuItUHS9bOzM6MpZQZW95ALpaIFSu2Fd5VWNjyfrsGY8A8wnrp3Mbqfsbwys37V/O9az4+/3/f/n52WdDx8FwDalhZVZLaiky0R2muSNQeKD6dIrbaOoUsvCOL5Ug7QejDMqH8Ze4SIQJlgEY6YG5B4QoKizYQHyIg8uIVDAu5WKQmc0E1Xl0foQliiqdbFwyp207svE5XQS4QXoaVfS8BcIgW53HWRZVhdlFpbbBjCcOGqSyjomfc35yrDwoC/9SH75TmOpDTKqf0GY3woYHFNeHgfg/rvAz2"}),n[67]||(n[67]=l(`<p>简化版本的代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line">    context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> context<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> contextClass <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContextClass<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>contextClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        contextClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webEnvironment</span>
<span class="line">        <span class="token operator">?</span> <span class="token constant">DEFAULT_WEB_CONTEXT_CLASS</span> <span class="token operator">:</span> <span class="token constant">DEFAULT_CONTEXT_CLASS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;Unable create a default ApplicationContext, &quot;</span></span>
<span class="line">        <span class="token operator">+</span> <span class="token string">&quot;please specify an ApplicationContextClass&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">)</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>contextClass<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">refreshContext</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">refresh</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerShutdownHook<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">        context<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AccessControlException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Not allowed in some environments.</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AnnotationConfigEmbeddedWebApplicationContext的构造方法中创建了AnnotatedBeanDefinitionReader：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">AnnotationConfigEmbeddedWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="classpathxmlapplicationcontext初始化过程" tabindex="-1"><a class="header-anchor" href="#classpathxmlapplicationcontext初始化过程"><span>ClasspathXmlApplicationContext初始化过程</span></a></h4><p>ClasspathXmlApplicationContext可以在代码中直接创建，初始化过程放在了构造函数中：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> configLocations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ApplicationContext</span> parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)),s("ol",null,[n[63]||(n[63]=s("li",null,"调用父类的构造方法，设置id、name、资源加载器等属性，合并父容器的Environment",-1)),n[64]||(n[64]=s("li",null,[a("设置配置路径"),s("code",null,"setConfigLocations")],-1)),s("li",null,[n[60]||(n[60]=a("初始化容器")),n[61]||(n[61]=s("code",null,"refresh()",-1)),n[62]||(n[62]=a()),e(o,null,{default:t(()=>n[43]||(n[43]=[a("核心步骤3")])),_:1,__:[43]}),s("ul",null,[s("li",null,[n[59]||(n[59]=s("code",null,"AbstractApplicationContext::obtainFreshBeanFactory()",-1)),e(o),s("ul",null,[s("li",null,[n[57]||(n[57]=s("code",null,"AbstractRefreshableApplicationContext::refreshBeanFactory()",-1)),n[58]||(n[58]=a()),e(o,null,{default:t(()=>n[44]||(n[44]=[a("子类扩展点")])),_:1,__:[44]}),s("ul",null,[s("li",null,[n[48]||(n[48]=s("code",null,"AbstractRefreshableApplicationContext::createBeanFactory()",-1)),n[49]||(n[49]=a()),e(o,null,{default:t(()=>n[45]||(n[45]=[a("子类扩展点")])),_:1,__:[45]}),s("ul",null,[s("li",null,[n[47]||(n[47]=a("创建 DefaultListableBeanFactory ")),e(o,null,{default:t(()=>n[46]||(n[46]=[a("核心步骤1")])),_:1,__:[46]})])])]),s("li",null,[n[55]||(n[55]=s("code",null,"AbstractXmlApplicationContext::loadBeanDefinitions(beanFactory)",-1)),n[56]||(n[56]=a()),e(o,null,{default:t(()=>n[50]||(n[50]=[a("子类扩展点")])),_:1,__:[50]}),s("ul",null,[s("li",null,[n[52]||(n[52]=a("创建")),n[53]||(n[53]=s("code",null,"XmlBeanDefinitionReader",-1)),n[54]||(n[54]=a("实例")),e(o,null,{default:t(()=>n[51]||(n[51]=[a("核心步骤2")])),_:1,__:[51]})])])])])])])])])])]),n[68]||(n[68]=l(`<div class="hint-container tip"><p class="hint-container-title">提示</p><p>ClasspathXmlApplicationContext并没有显示创建BeanFactory实例和Reader实例，在<code>refresh() -&gt; obtainFreshBeanFactory() -&gt; refreshBeanFactory()</code>方法中传教。</p></div><h4 id="核心方法refresh" tabindex="-1"><a class="header-anchor" href="#核心方法refresh"><span>核心方法refresh()</span></a></h4><p><code>refresh()</code> 方法是Spring容器初始化的核心，主要完成以下工作：</p><ol><li>准备刷新 <code>prepareRefresh()</code></li><li>创建/刷新 BeanFactory <code>obtainFreshBeanFactory()</code></li><li>准备BeanFactory <code>prepareBeanFactory</code><ul><li>设置类加载器、表达式解析器、属性编辑器注册器、Bean后置处理器、忽略的依赖接口</li><li>注册可解析的依赖、早期后置处理器</li></ul></li><li>执行 BeanFactory 后置处理 <ul><li><code>postProcessBeanFactory()</code><ul><li>模板方法，子类可以通过覆盖 postProcessBeanFactory() 添加专有逻辑</li></ul></li><li><code>invokeBeanFactoryPostProcessors()</code><ul><li>具体实现方法，执行所有注册的BeanFactoryPostProcessor的核心逻辑</li></ul></li></ul></li><li>注册 Bean 后置处理器 <code>registerBeanPostProcessors()</code></li><li>初始化消息源 <code>initMessageSource()</code></li><li>初始化事件广播器 <code>initApplicationEventMulticaster()</code></li><li>刷新（模板方法，子类扩展点） <code>onRefresh()</code></li><li>注册监听器 <code>registerListeners()</code></li><li>完成 BeanFactory 初始化（实例化所有非懒加载的单例Bean） <code>finishBeanFactoryInitialization()</code></li><li>完成刷新并发布相应事件 <code>finishRefresh()</code></li></ol><h5 id="准备刷新-preparerefresh" tabindex="-1"><a class="header-anchor" href="#准备刷新-preparerefresh"><span>准备刷新 <code>prepareRefresh()</code></span></a></h5><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 记录启动时间</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>startupDate <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 设置容器状态为活跃</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>closed<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>active<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 初始化属性源</span></span>
<span class="line">  <span class="token comment">// Initialize any placeholder property sources in the context environment</span></span>
<span class="line">  <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 验证必要的属性</span></span>
<span class="line">  <span class="token comment">// Validate that all properties marked as required are resolvable</span></span>
<span class="line">  <span class="token comment">// see ConfigurablePropertyResolver#setRequiredProperties</span></span>
<span class="line">  <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">validateRequiredProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 存储早期应用事件</span></span>
<span class="line">  <span class="token comment">// Allow for the collection of early ApplicationEvents,</span></span>
<span class="line">  <span class="token comment">// to be published once the multicaster is available...</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取-刷新beanfactory-obtainfreshbeanfactory" tabindex="-1"><a class="header-anchor" href="#获取-刷新beanfactory-obtainfreshbeanfactory"><span>获取/刷新BeanFactory <code>obtainFreshBeanFactory()</code></span></a></h4><p>围绕着是否需要Refresh容器衍生出两个抽象类：</p><ul><li>AbstractRefreshableApplicationContext：提供了容器刷新功能，执行<code>refreshBeanFactory()</code>方法会创建新BeanFactory并加载定义</li><li>GenericApplicationContext：提供了容器基本功能，不提供刷新功能，执行<code>refreshBeanFactory()</code>方法仅验证状态，不重建BeanFactory</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里的刷新功能有点绕，和<code>refreshBeanFactory()</code>方法中的刷新含义不太一样：</p><ul><li>提供Refresh功能的ApplicationContext，在<code>refreshBeanFactory()</code>方法中重建BeanFactory。</li><li>不提供Refresh功能的ApplicationContext，在<code>refreshBeanFactory()</code>方法中仅验证状态。</li></ul></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 1. 如果是GenericApplicationContext，刷新内部BeanFactory</span></span>
<span class="line">  <span class="token comment">// 2. 如果是AbstractRefreshableApplicationContext，创建新BeanFactory并加载定义</span></span>
<span class="line">  <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="abstractrefreshableapplicationcontext-refreshbeanfactory" tabindex="-1"><a class="header-anchor" href="#abstractrefreshableapplicationcontext-refreshbeanfactory"><span>AbstractRefreshableApplicationContext::refreshBeanFactory()</span></a></h5><p>创建新BeanFactory并加载Bean定义：</p><ol><li>判断BeanFactory是否存在，如果存在则销毁</li><li>创建新BeanFactory实例 <code>createBeanFactory()</code></li><li>创建Reader并加载Bean定义 <code>loadBeanDefinitions()</code><ul><li>子类扩展点,以AbstractXmlApplicationContext为例说明：</li><li><strong>new XmlBeanDefinitionReader(beanFactory) 创建XmlBeanDefinitionReader</strong></li><li>loadBeanDefinitions(beanDefinitionReader) <ul><li><strong>reader.loadBeanDefinitions(configResources) 加载Bean定义</strong></li></ul></li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这里初始化 BeanFactory 的过程和 BeanFactory 容器初始化中的创建过程类似，只是分散在不同的方法中。</p></div>`,15)),e(i,{id:"mermaid-635",code:"eJyNkr9OwzAQh/c+hcd24AU6VCpUTEyZGFiuzqW15NjBdkQ7s/BnBQaQECNThYSEFFB5mqb0MbCTVHUDoay+73df7i4aT1MUFAcMRgriFiEJKMMoS0AYkmpUtSdCpTA4MQQ06Q+1UUBNgJFCPYYhx36ScEbBMCkOSrCWn8S8KvgdjmO+MxlZTqqpiw0wgpSbI6aNk+4jiMOyWssohBCVi1iDw2ySCeYkQVGyvBuS7PV668m6NlXM47VtdywI3JAx6PrzeiFbLUK0g8mpY3UzRbnU/tcXJIqwkbfzmB8BH62W1CUCz/5YU7tzIkh+8ZB/vHuv+exx8Xld67g5WJdLCLeXqNvNjo2ivEKeveVXT6v53DH57H6RXVqV9z/8w9ZwRV+lZaooWtnq5fzr5rl0L++y5evtbn1J/6q2O4nYKKj660JZ79f6Bmp0Td0="}),n[69]||(n[69]=l(`<div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">DefaultListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactoryMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">&quot;I/O error parsing bean definition source for &quot;</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token class-name">DefaultListableBeanFactory</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token function">getInternalParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>loadBeanDefinitions(DefaultListableBeanFactory)</code>是模板方法，子类通过覆盖该方法实现加载Bean定义，以AbstractXmlApplicationContext为例说明：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">XmlBeanDefinitionReader</span> beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">XmlBeanDefinitionReader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="准备beanfactory-preparebeanfactory" tabindex="-1"><a class="header-anchor" href="#准备beanfactory-preparebeanfactory"><span>准备BeanFactory <code>prepareBeanFactory</code></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 设置类加载器</span></span>
<span class="line">  <span class="token comment">// Tell the internal bean factory to use the context&#39;s class loader etc.</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 设置表达式解析器</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">setBeanExpressionResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StandardBeanExpressionResolver</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 设置属性编辑器注册器</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEditorRegistrar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 添加Bean后置处理器</span></span>
<span class="line">  <span class="token comment">// Configure the bean factory with context callbacks.</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 设置忽略的依赖接口</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EnvironmentAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">EmbeddedValueResolverAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisherAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">MessageSourceAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">ignoreDependencyInterface</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContextAware</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 注册可解析的依赖</span></span>
<span class="line">  <span class="token comment">// BeanFactory interface not registered as resolvable type in a plain factory.</span></span>
<span class="line">  <span class="token comment">// MessageSource registered (and found for autowiring) as a bean.</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEventPublisher</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">registerResolvableDependency</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 注册早期后置处理器</span></span>
<span class="line">  <span class="token comment">// Register early post-processor for detecting inner beans as ApplicationListeners.</span></span>
<span class="line">  beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationListenerDetector</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Detect a LoadTimeWeaver and prepare for weaving, if found.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">LOAD_TIME_WEAVER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// Set a temporary ClassLoader for type matching.</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// Register default environment beans.</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTIES_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_PROPERTIES_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsLocalBean</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token constant">SYSTEM_ENVIRONMENT_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSystemEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="执行-beanfactory-后置处理-postprocessbeanfactory" tabindex="-1"><a class="header-anchor" href="#执行-beanfactory-后置处理-postprocessbeanfactory"><span>执行 BeanFactory 后置处理 <code>postProcessBeanFactory()</code></span></a></h4><p>供子类扩展的钩子方法，在BeanFactory准备完成后，处理器执行前调用，是子类添加特定的BeanFactory初始化逻辑。典型子类实现：</p><ul><li>GenericWebApplicationContext：添加ServletContext相关处理器</li><li>AnnotationConfigWebApplicationContext：注册配置类后置处理器</li></ul><h4 id="调用-beanfactory-后置处理器-invokebeanfactorypostprocessors" tabindex="-1"><a class="header-anchor" href="#调用-beanfactory-后置处理器-invokebeanfactorypostprocessors"><span>调用 BeanFactory 后置处理器 <code>invokeBeanFactoryPostProcessors()</code></span></a></h4><p>委托给PostProcessorRegistrationDelegate执行，实例化并调用所有已注册的BeanFactoryPostProcessor，包含完整的执行逻辑，通常不需要子类覆盖：</p><ul><li>先执行 BeanDefinitionRegistryPostProcessor 的 postProcessBeanDefinitionRegistry()</li><li>再执行 BeanFactoryPostProcessor 的 postProcessBeanFactory()</li><li>按照优先级顺序执行（PriorityOrdered &gt; Ordered &gt; 普通）</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 委托给PostProcessorRegistrationDelegate执行</span></span>
<span class="line">  <span class="token class-name">PostProcessorRegistrationDelegate</span><span class="token punctuation">.</span><span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token function">getBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检测LoadTimeWeaver并准备编织</span></span>
<span class="line">  <span class="token comment">// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span>
<span class="line">  <span class="token comment">// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getTempClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">LOAD_TIME_WEAVER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LoadTimeWeaverAwareProcessor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextTypeMatchClassLoader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注册-bean-后置处理器-registerbeanpostprocessors" tabindex="-1"><a class="header-anchor" href="#注册-bean-后置处理器-registerbeanpostprocessors"><span>注册 Bean 后置处理器 <code>registerBeanPostProcessors()</code></span></a></h4><p>委托给PostProcessorRegistrationDelegate执行，注册Bean后置处理器。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">PostProcessorRegistrationDelegate</span><span class="token punctuation">.</span><span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beanfactory-vs-applicationcontext" tabindex="-1"><a class="header-anchor" href="#beanfactory-vs-applicationcontext"><span>BeanFactory VS ApplicationContext</span></a></h3><p>通过BeanFactory和ApplicationContext的初始化过程，可以看出BeanFactory和ApplicationContext的区别：</p><ul><li>BeanFactory：提供了IoC容器基本功能，加载资源、解析配置、注册Bean，但不提供生命周期管理和事件发布功能。</li><li>ApplicationContext：继承BeanFactory，提供了生命周期管理和事件发布功能。</li></ul><table><thead><tr><th></th><th>BeanFactory</th><th>ApplicationContext</th></tr></thead><tbody><tr><td>后置处理器</td><td>需要手动注册</td><td>自动检测并注册</td></tr><tr><td>AOP支持</td><td>需手动配置ProxyFactoryBean</td><td>自动代理创建</td></tr><tr><td>事件机制</td><td>不支持</td><td>内置支持</td></tr></tbody></table><h2 id="bean-实例化" tabindex="-1"><a class="header-anchor" href="#bean-实例化"><span>Bean 实例化</span></a></h2><p>IoC 容器初始化实现了将资源文件的元数据转换为BeanDefinition，并将BeanDefinition注册到IoC容器中，Bean实例化的过程就是从IoC容器中根据BeanDefinition获取Bean实例的过程。 实例化过程主要分为以下几个步骤：</p><ol><li>根据BeanDefinition的配置信息，创建Bean实例</li><li>处理Bean的依赖关系，将依赖的Bean注入到Bean实例中</li><li>调用Bean的初始化方法，完成Bean的实例化</li><li>将Bean实例注册到IoC容器中</li></ol><h3 id="创建bean实例" tabindex="-1"><a class="header-anchor" href="#创建bean实例"><span>创建Bean实例</span></a></h3><p>BeanFactory会在调用getBean()方法时创建Bean实例。</p><h4 id="getbean-方法" tabindex="-1"><a class="header-anchor" href="#getbean-方法"><span>getBean()方法</span></a></h4><p>getBean()方法的实现主要分为以下几个步骤：</p><ol><li>解析bean的真正name，如果bean是工厂类，name会增加前缀<code>&amp;</code>，需去掉</li><li>无参单例尝试从缓存中获取Bean实例</li><li>如果bean实例还在创建中，直接抛异常</li><li>如果bean definition 存在于父的bean工厂中，委派给父Bean工厂获取</li><li>标记这个beanName的实例正在创建</li><li>根据Bean名称从IoC容器中获取BeanDefinition</li><li>初始化它依赖的Bean</li><li>创建bean实例，按照单例、原型、scope等不同模式创建实例 <ul><li>单例：</li><li>原型：</li><li>scope：</li></ul></li></ol><p>从BeanDefinition中获取Bean的类名 通过反射机制创建Bean实例</p><ul><li>getConstructorArgumentValues()：获取Bean的构造方法参数值</li><li>getPropertyValue()：获取Bean的属性值 返回Bean实例</li></ul><ol start="4"><li>处理Bean的依赖关系，将依赖的Bean注入到Bean实例中</li></ol><h3 id="循环依赖" tabindex="-1"><a class="header-anchor" href="#循环依赖"><span>循环依赖</span></a></h3><p>Spring只解决了单例模式下属性依赖的循环问题。</p><h4 id="单例模式下属性循环依赖的解决方案" tabindex="-1"><a class="header-anchor" href="#单例模式下属性循环依赖的解决方案"><span>单例模式下属性循环依赖的解决方案</span></a></h4><p>Spring 使用三个缓存层存储不同状态的 Bean：</p><ul><li>一级缓存（单例池） singletonObjects：存放完全初始化好的 Bean。</li><li>二级缓存 earlySingletonObjects：存放提前暴露的半成品 Bean（已实例化但未填充属性）。</li><li>三级缓存 singletonFactories：存放 Bean 的工厂对象，用于生成半成品 Bean。</li></ul><p>解决流程（以 A → B → A 为例）：</p><ol><li>创建 A：实例化 A，将 A 的工厂对象放入三级缓存。</li><li>填充 A 的属性：发现需要注入 B，开始创建 B。</li><li>创建 B： 实例化 B，将 B 的工厂对象放入三级缓存。</li><li>解决依赖：填充 B 的属性，发现需要注入 A： <ul><li>从三级缓存中找到 A 的工厂，生成半成品 A 并放入二级缓存。</li><li>将半成品 A 注入 B，完成 B 的初始化。</li><li>将 B 放入一级缓存。</li></ul></li><li>完成A的初始化： <ul><li>将初始化好的 B 注入 A</li><li>将 A 放入一级缓存。</li></ul></li></ol><h4 id="非单例属性之外的循环依赖" tabindex="-1"><a class="header-anchor" href="#非单例属性之外的循环依赖"><span>非单例属性之外的循环依赖</span></a></h4><p>构造器循环依赖</p><ul><li>改为Setter/字段注入</li><li>使用@Lazy注解，延迟加载 使用@DependsOn注解，指定加载先后关系，避免循环依赖 多例循环依赖</li><li>改为单例模式</li></ul><h3 id="bean生命周期" tabindex="-1"><a class="header-anchor" href="#bean生命周期"><span>Bean生命周期</span></a></h3><h4 id="流程" tabindex="-1"><a class="header-anchor" href="#流程"><span>流程</span></a></h4>`,42)),e(i,{id:"mermaid-1001",code:"eJyVU8tq20AU3fsrBu/1A10URjYBbYxA3YkuJs44GVA1YjQhTXeF0AcpaQKtadOSQNNS04I3IYWEJl+Tkdy/6J0ZWR7LrZ1oIw5z7r3n3IfneS3JZEIfIJ+StDzeK9+dqqNrdTQqPp8WF8/L0b76dNPSvEHCd/pbREj0yG8h+PLt9U1Bsi0U8lyGgvdpnnMRt+cgUl9O1O+r9mMT4gTpemukL7nYbcT/78UNUYcH5fVYfd0rD1+oj6M6PUKhvxZnszAnZsqh6UZTTJDmkqSSEcl4ineIoDquoesOJGQ0qvHJ7c2+ejNcpjKYVzngggYpg+wJe2YqOGQ8R8YDSUWDizzvIQpDlwa/jArJaL7E+D9sLpoynpZYuY+TVUYaUqf/+YXTgqxQNHn5Y3L1sxheFufva1FB3OEwLLGt5257E8URlVBuSoH+63gIV+Pj28vXsPqIgRSbqWZ1F1kbFDLzXZe4TGXtj6WbRnFx8E29Pau1hlHcpEAVolszmyBot/WKV0M9m9pecT6afD9braLLcmg8WU/MzjY1dMGntgVHMisjaLdyurKGOQabM24bUFX48+FXMb5wlsXvmYb2yBNqeHY4cLLOnToPuBPjLEtY3ywHuJb0qbTvi3Lg8u0Z+EGFA4MrFAHQtSzUCKi4egytjp5BuFPlqdJYFBlU5QyxfcMGQf9afwETePAL"})])}const f=u(k,[["render",v]]),B=JSON.parse('{"path":"/posts/spring/spring-framework-ioc-impi.html","title":"Spring IoC 实现原理","lang":"zh-CN","frontmatter":{"title":"Spring IoC 实现原理","date":"2025-05-12T02:46:31.916Z","category":["Spring","Spring Framework","IoC"],"tags":["Spring","Spring Framework","IoC"]},"git":{"updatedTime":1749101333000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":2,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"c2e0952b87ee92b775b726d15f9d5432d081cec7","time":1749101333000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、Spring Aop 2、Spring AOP 实现原理 3、Spring Boot 知识体系 4、Spring Boot 入门"},{"hash":"da5a302ca2c42f09f1ed2f26d6599d5b47380fc9","time":1748588379000,"email":"3036190149@qq.com","author":"zhaomy","message":"Spring Framework &#x26; Spring IoC"}]},"filePathRelative":"posts/spring/spring-framework-ioc-impi.md","excerpt":"\\n\\n<h2>IoC 体系结构设计</h2>\\n<h3>BeanFactory 定义了IoC容器基本功能规范</h3>\\n<p>BeanFactory 作为最顶层的接口，定义了IoC容器基本功能规范：</p>\\n<ul>\\n<li>getBean()：提供多个重载方法，根据bean名称、bean类型等参数获取bean实例</li>\\n<li>containsBean(String name)：判断是否包含指定名称的bean</li>\\n<li>isSingleton(String name)：判断bean是否为单例模式</li>\\n<li>isPrototype(String name)：判断bean是否为原型模式</li>\\n<li>isTypeMatch(String name, typeToMatch)：提供多个重载方法，判断bean类型是否匹配</li>\\n<li>getType(String name)：获取bean类型</li>\\n<li>getAliases(String name)：获取bean的别名\\nBeanFactory 有三个子类：ListableBeanFactory、HierarchicalBeanFactory 和AutowireCapableBeanFactory。</li>\\n<li>ListableBeanFactory：提供了获取bean名称列表的功能</li>\\n<li>HierarchicalBeanFactory：提供了获取父BeanFactory的功能</li>\\n<li>AutowireCapableBeanFactory：提供了自动装配功能</li>\\n</ul>"}');export{f as comp,B as data};
