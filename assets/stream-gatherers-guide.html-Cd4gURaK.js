import{_ as r,c as d,a as n,d as c,e,w as t,r as i,o as k,b as s}from"./app-CfDefuCP.js";const m={},v={class:"table-of-contents"};function g(b,a){const p=i("router-link"),u=i("CodeTabs");return k(),d("div",null,[a[19]||(a[19]=n("h1",{id:"jep-485-流收集器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jep-485-流收集器"},[n("span",null,"JEP 485：流收集器")])],-1)),n("nav",v,[n("ul",null,[n("li",null,[e(p,{to:"#核心目标-为什么需要流收集器"},{default:t(()=>a[0]||(a[0]=[s("核心目标：为什么需要流收集器？")])),_:1,__:[0]})]),n("li",null,[e(p,{to:"#一个生动的例子-before-vs-after"},{default:t(()=>a[1]||(a[1]=[s("一个生动的例子：Before vs After")])),_:1,__:[1]}),n("ul",null,[n("li",null,[e(p,{to:"#以前的-蹩脚-方法-使用-map"},{default:t(()=>a[2]||(a[2]=[s("以前的“蹩脚”方法（使用 map）")])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#现在的-优雅-方法-使用-gatherer"},{default:t(()=>a[3]||(a[3]=[s("现在的“优雅”方法（使用 Gatherer）")])),_:1,__:[3]})])])]),n("li",null,[e(p,{to:"#核心概念与-api"},{default:t(()=>a[4]||(a[4]=[s("核心概念与 API")])),_:1,__:[4]}),n("ul",null,[n("li",null,[e(p,{to:"#新方法-stream-gather-gatherer"},{default:t(()=>a[5]||(a[5]=[s("新方法：Stream::gather(Gatherer)")])),_:1,__:[5]})]),n("li",null,[e(p,{to:"#核心接口-gatherer-t-a-r"},{default:t(()=>a[6]||(a[6]=[s("核心接口：Gatherer<T, A, R>")])),_:1,__:[6]})]),n("li",null,[e(p,{to:"#如何造-机器人-gatherer-of-工厂方法"},{default:t(()=>a[7]||(a[7]=[s("如何造“机器人”？Gatherer.of() 工厂方法")])),_:1,__:[7]})])])]),n("li",null,[e(p,{to:"#gatherers-工具类及替代方案对比"},{default:t(()=>a[8]||(a[8]=[s("Gatherers 工具类及替代方案对比")])),_:1,__:[8]}),n("ul",null,[n("li",null,[e(p,{to:"#windowfixed-固定大小窗口"},{default:t(()=>a[9]||(a[9]=[s("windowFixed 固定大小窗口")])),_:1,__:[9]})]),n("li",null,[e(p,{to:"#windowsliding-滑动窗口"},{default:t(()=>a[10]||(a[10]=[s("windowSliding 滑动窗口")])),_:1,__:[10]})]),n("li",null,[e(p,{to:"#fold-累积并发出中间结果"},{default:t(()=>a[11]||(a[11]=[s("fold 累积并发出中间结果")])),_:1,__:[11]})]),n("li",null,[e(p,{to:"#scan-init-scanner-带初始值的累积"},{default:t(()=>a[12]||(a[12]=[s("scan(init, scanner) 带初始值的累积")])),_:1,__:[12]})]),n("li",null,[e(p,{to:"#distinctby"},{default:t(()=>a[13]||(a[13]=[s("distinctBy")])),_:1,__:[13]})])])]),n("li",null,[e(p,{to:"#最终总结"},{default:t(()=>a[14]||(a[14]=[s("最终总结")])),_:1,__:[14]})])])]),a[20]||(a[20]=c(`<h2 id="核心目标-为什么需要流收集器" tabindex="-1"><a class="header-anchor" href="#核心目标-为什么需要流收集器"><span>核心目标：为什么需要流收集器？</span></a></h2><p>想象一下，Java 的流（Stream）是一条智能工厂流水线。流水线上有各种现成的机器人（内置操作）：</p><ul><li><p><code>map</code> 机器人：把每个零件换成另一个零件。</p></li><li><p><code>filter</code> 机器人：把不合格的零件扔掉。</p></li><li><p><code>limit</code> 机器人：只放行前 N 个零件。</p></li></ul><p>这些机器人很好用，但功能是固定的。有一天，厂长想：</p><blockquote><p>“能不能每两个零件来了，就把它俩打包成一个盒子，然后继续在流水线上传送？”</p></blockquote><p>你用现有的机器人试试？你会发现非常别扭。你只有两个选择：</p><ol><li><p>强行终止流水线：用 <code>collect</code> 把零件都搬下来，在流水线外手动打包，然后再开一条新流水线。又慢又麻烦。</p></li><li><p>使用复杂的组合技：：尝试用 filter 机器人筛选位置，让 map 机器人强行记住状态，再请 reduce 机器人帮忙组装。这套组合拳指令复杂、容易出错，又脆又难维护。</p></li></ol><p>JEP 485 就是为了解决这个问题！</p><p>它让你可以定制自己的机器人，也就是 Gatherer。你可以给它编程，让它完成像“打包”、“分组”、“去重”这类复杂任务，然后把它安装到流水线上，和其他机器人协同工作。</p><p>它的核心价值是：让复杂的流转换操作变得声明式、可组合、可重用。</p><h2 id="一个生动的例子-before-vs-after" tabindex="-1"><a class="header-anchor" href="#一个生动的例子-before-vs-after"><span>一个生动的例子：Before vs After</span></a></h2><p>任务： 将流 <code>[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;]</code> 每两个元素打成一个包，变成 <code>[[&quot;A&quot;, &quot;B&quot;], [&quot;C&quot;, &quot;D&quot;], [&quot;E&quot;]]</code></p><h3 id="以前的-蹩脚-方法-使用-map" tabindex="-1"><a class="header-anchor" href="#以前的-蹩脚-方法-使用-map"><span>以前的“蹩脚”方法（使用 <code>map</code>）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">int</span> windowSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// “魔法”开始：用 map 实现固定窗口分组</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> windowSize<span class="token punctuation">)</span> <span class="token comment">// 生成索引 0, 2, 4...</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>startIndex <span class="token operator">-&gt;</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">)</span>          <span class="token comment">// 性能陷阱！</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>windowSize<span class="token punctuation">)</span>         <span class="token comment">// 取2个</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>window <span class="token operator">-&gt;</span> <span class="token operator">!</span>window<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 直到窗口为空</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [[A, B], [C, D], [E]]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>缺点：</p><ul><li><p>性能差：每次 <code>skip</code> 都可能从头遍历列表，是 O(n²) 的时间复杂度。</p></li><li><p>难懂：这代码是在“生成索引的流上映射一个从原列表跳过的子流”？没人一眼能看懂。</p></li><li><p>不通用：只能在 <code>List</code> 上这样玩，如果是来自网络或文件的流，这招完全失效。</p></li></ul><h3 id="现在的-优雅-方法-使用-gatherer" tabindex="-1"><a class="header-anchor" href="#现在的-优雅-方法-使用-gatherer"><span>现在的“优雅”方法（使用 Gatherer）</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Gatherers</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;E&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span><span class="token class-name">Gatherers</span><span class="token punctuation">.</span><span class="token function">windowFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 一句话，意思明确</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [[A, B], [C, D], [E]]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：</p><ul><li><p>高性能：内部维护一个缓冲区，顺序处理，是 O(n) 复杂度。</p></li><li><p>易读：“windowFixed(2)” 就是“固定窗口大小为2”，意图清晰。</p></li><li><p>通用：适用于任何流（集合、IO、生成器）。</p></li></ul><h2 id="核心概念与-api" tabindex="-1"><a class="header-anchor" href="#核心概念与-api"><span>核心概念与 API</span></a></h2><h3 id="新方法-stream-gather-gatherer" tabindex="-1"><a class="header-anchor" href="#新方法-stream-gather-gatherer"><span>新方法：<code>Stream::gather(Gatherer)</code></span></a></h3><p>这是将自定义操作接入流管道的“万能接口”。它是一个中间操作，用完后流还在。</p><h3 id="核心接口-gatherer-t-a-r" tabindex="-1"><a class="header-anchor" href="#核心接口-gatherer-t-a-r"><span>核心接口：<code>Gatherer&lt;T, A, R&gt;</code></span></a></h3><p>这就是你定制的“机器人”蓝图。</p><ul><li><p><code>T</code>：输入类型（流水线上的零件类型）。</p></li><li><p><code>A</code>：（可选）机器人内部状态的类型。比如“打包机器人”需要个“篮子”来临时放零件。</p></li><li><p><code>R</code>：输出类型（机器人处理后的产品类型）。</p></li></ul><h3 id="如何造-机器人-gatherer-of-工厂方法" tabindex="-1"><a class="header-anchor" href="#如何造-机器人-gatherer-of-工厂方法"><span>如何造“机器人”？<code>Gatherer.of()</code> 工厂方法</span></a></h3><p>最常用的方法是接收三个参数：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"></span>
<span class="line"><span class="token class-name">Gatherer</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> initializer<span class="token punctuation">,</span>      <span class="token comment">// 1. 如何初始化状态（给我个新篮子）</span></span>
<span class="line">    <span class="token class-name">Integrator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">&gt;</span></span> integrator<span class="token punctuation">,</span> <span class="token comment">// 2. 核心逻辑（每个零件来了怎么处理）</span></span>
<span class="line">    <span class="token class-name">BiConsumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">Downstream</span><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> finisher <span class="token comment">// 3. 流水线结束时做什么（清空篮子）</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子： 我们来实现一个“每遇到”B“就发出一个信号”的机器人。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// 自定义Gatherer：每遇到一个 &quot;B&quot; 就输出字符串 &quot;Found B!&quot;</span></span>
<span class="line"><span class="token class-name">Gatherer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> findBGatherer <span class="token operator">=</span> <span class="token class-name">Gatherer</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token comment">// 1. 初始状态：不需要状态，返回null</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2. 处理逻辑：如果元素是&quot;B&quot;，就向下游发出&quot;Found B!&quot;</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token punctuation">,</span> element<span class="token punctuation">,</span> downstream<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;B&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            downstream<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&quot;Found B!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 继续处理下一个元素</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 3. 结束逻辑：无事可做</span></span>
<span class="line">    <span class="token punctuation">(</span>state<span class="token punctuation">,</span> downstream<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用它</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;B&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">gather</span><span class="token punctuation">(</span>findBGatherer<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [Found B!, Found B!]</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gatherers-工具类及替代方案对比" tabindex="-1"><a class="header-anchor" href="#gatherers-工具类及替代方案对比"><span><code>Gatherers</code> 工具类及替代方案对比</span></a></h2><p>JDK 贴心地提供了许多现成的“机器人”，放在 <code>Gatherers</code> 类里。</p><table><thead><tr><th style="text-align:left;">收集器 (Gatherer)</th><th style="text-align:left;">功能描述</th><th style="text-align:left;">优雅版（JEP 485）</th><th style="text-align:left;">蹩脚版（替代方案）</th></tr></thead><tbody><tr><td style="text-align:left;"><code>windowFixed(int size)</code></td><td style="text-align:left;">固定大小窗口</td><td style="text-align:left;"><code>.gather(Gatherers.windowFixed(2))</code></td><td style="text-align:left;"><code>Stream.iterate(0, i-&gt;i+size)</code><br><code>.map(i-&gt;list.stream().skip(i).limit(size).collect(Collectors.toList()))</code><br><code>.takeWhile(w-&gt;!w.isEmpty())</code></td></tr><tr><td style="text-align:left;"><code>windowSliding(int size)</code></td><td style="text-align:left;">滑动窗口</td><td style="text-align:left;"><code>.gather(Gatherers.windowSliding(2))</code></td><td style="text-align:left;">极其复杂，需要维护状态和列表拷贝，代码冗长，会终止流</td></tr><tr><td style="text-align:left;"><code>fold(init, folder)</code></td><td style="text-align:left;">累积并发出中间结果</td><td style="text-align:left;"><code>.gather(Gatherers.fold(()-&gt;0, (sum, e)-&gt;sum+e))</code></td><td style="text-align:left;">代码冗长，会终止流</td></tr><tr><td style="text-align:left;"><code>scan(init, scanner)</code></td><td style="text-align:left;">带初始值的累积</td><td style="text-align:left;"><code>.gather(Gatherers.scan(()-&gt;0, (sum, e)-&gt;sum+e))</code></td><td style="text-align:left;">代码冗长，会终止流</td></tr><tr><td style="text-align:left;"><code>distinct()</code></td><td style="text-align:left;">去重</td><td style="text-align:left;"><code>.gather(Gatherers.distinct())</code></td><td style="text-align:left;"><code>.distinct()</code>（这个本来就有，但展示了API统一性）</td></tr><tr><td style="text-align:left;"><code>distinctBy(Function)</code></td><td style="text-align:left;">根据Key去重</td><td style="text-align:left;"><code>.gather(Gatherers.distinctBy(Person::name))</code></td><td style="text-align:left;">代码冗长，会终止流</td></tr><tr><td style="text-align:left;"><code>mapConcurrent(...)</code></td><td style="text-align:left;">并发映射</td><td style="text-align:left;"><code>.gather(Gatherers.mapConcurrent(4, func))</code></td><td style="text-align:left;">几乎无法正确实现，涉及复杂的线程池和同步</td></tr><tr><td style="text-align:left;"><code>peek(Consumer)</code></td><td style="text-align:left;">查看元素</td><td style="text-align:left;"><code>.gather(Gatherers.peek(System.out::println))</code></td><td style="text-align:left;"><code>.peek(System.out::println)</code>（已有）</td></tr><tr><td style="text-align:left;"><code>takeWhile(Predicate)</code></td><td style="text-align:left;">条件获取</td><td style="text-align:left;"><code>.gather(Gatherers.takeWhile(e-&gt;e&lt;5))</code></td><td style="text-align:left;"><code>.takeWhile(e-&gt;e&lt;5)</code>（已有）</td></tr><tr><td style="text-align:left;"><code>dropWhile(Predicate)</code></td><td style="text-align:left;">条件丢弃</td><td style="text-align:left;"><code>.gather(Gatherers.dropWhile(e-&gt;e&lt;5))</code></td><td style="text-align:left;"><code>.dropWhile(e-&gt;e&lt;5)</code>（已有）</td></tr></tbody></table><p>总结一下表格：</p><ul><li><p>优雅版：一行代码，意图清晰，性能高效。</p></li><li><p>蹩脚版：要么无法实现，要么代码复杂难懂，要么性能极差，甚至会终止流，违背了“中间操作”的初衷。</p></li></ul><h3 id="windowfixed-固定大小窗口" tabindex="-1"><a class="header-anchor" href="#windowfixed-固定大小窗口"><span>windowFixed 固定大小窗口</span></a></h3><p>可以看作是flatMap的逆操作。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">-&gt;</span>i<span class="token operator">+</span>size<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i<span class="token operator">-&gt;</span>list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>w<span class="token operator">-&gt;</span><span class="token operator">!</span>w<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="windowsliding-滑动窗口" tabindex="-1"><a class="header-anchor" href="#windowsliding-滑动窗口"><span>windowSliding 滑动窗口</span></a></h3>`,40)),e(u,{id:"349",data:[{id:"List版本"},{id:"通用版本"}]},{title0:t(({value:l,isActive:o})=>a[15]||(a[15]=[s("List版本")])),title1:t(({value:l,isActive:o})=>a[16]||(a[16]=[s("通用版本")])),tab0:t(({value:l,isActive:o})=>a[17]||(a[17]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" list "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"of"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"A"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"B"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"C"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"D"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"E"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"int"),s(" windowSize "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},'// 手动实现滑动窗口的"蹩脚"版本')]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(" result "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"IntStream"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"range"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(" list"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"size"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),s(" windowSize "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"mapToObj"),n("span",{class:"token punctuation"},"("),s("startIndex "),n("span",{class:"token operator"},"->"),s(" list"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"subList"),n("span",{class:"token punctuation"},"("),s("startIndex"),n("span",{class:"token punctuation"},","),s(" startIndex "),n("span",{class:"token operator"},"+"),s(" windowSize"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"collect"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Collectors"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("result"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:t(({value:l,isActive:o})=>a[18]||(a[18]=[n("div",{class:"language-text line-numbers-mode","data-highlighter":"prismjs","data-ext":"text"},[n("pre",null,[n("code",null,[n("span",{class:"line"},'List<String> list = List.of("A", "B", "C", "D", "E");'),s(`
`),n("span",{class:"line"},"int windowSize = 2;"),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},"// 使用状态管理的复杂版本"),s(`
`),n("span",{class:"line"},"List<List<String>> result = list.stream()"),s(`
`),n("span",{class:"line"},"    .collect(Collector.of("),s(`
`),n("span",{class:"line"},"        () -> {"),s(`
`),n("span",{class:"line"},"            List<List<String>> windows = new ArrayList<>();"),s(`
`),n("span",{class:"line"},"            LinkedList<String> buffer = new LinkedList<>();"),s(`
`),n("span",{class:"line"},"            return new Object() {"),s(`
`),n("span",{class:"line"},"                List<List<String>> windows = windows;"),s(`
`),n("span",{class:"line"},"                LinkedList<String> buffer = buffer;"),s(`
`),n("span",{class:"line"},"            };"),s(`
`),n("span",{class:"line"},"        },"),s(`
`),n("span",{class:"line"},"        (state, element) -> {"),s(`
`),n("span",{class:"line"},"            state.buffer.offer(element);"),s(`
`),n("span",{class:"line"},"            if (state.buffer.size() == windowSize) {"),s(`
`),n("span",{class:"line"},"                state.windows.add(new ArrayList<>(state.buffer));"),s(`
`),n("span",{class:"line"},"                state.buffer.poll();"),s(`
`),n("span",{class:"line"},"            }"),s(`
`),n("span",{class:"line"},"        },"),s(`
`),n("span",{class:"line"},"        (state1, state2) -> { throw new UnsupportedOperationException(); },"),s(`
`),n("span",{class:"line"},"        state -> state.windows"),s(`
`),n("span",{class:"line"},"    ));"),s(`
`),n("span",{class:"line"},"System.out.println(result);"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[21]||(a[21]=c(`<h3 id="fold-累积并发出中间结果" tabindex="-1"><a class="header-anchor" href="#fold-累积并发出中间结果"><span>fold 累积并发出中间结果</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collector</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span>list<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>last <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [1, 3, 6, 10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p><ul><li><p>使用 collect 终止流：无法继续后续的流操作</p></li><li><p>代码复杂：需要手动管理状态</p></li><li><p>并行流支持困难</p></li></ul><h3 id="scan-init-scanner-带初始值的累积" tabindex="-1"><a class="header-anchor" href="#scan-init-scanner-带初始值的累积"><span>scan(init, scanner) 带初始值的累积</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 初始值</span></span>
<span class="line">    numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> last <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>last <span class="token operator">+</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: [0, 1, 3, 6, 10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p><ul><li><p>性能低下：多次流转换</p></li><li><p>代码晦涩：难以理解和维护</p></li><li><p>依然终止流：本质还是收集操作</p></li></ul><h3 id="distinctby" tabindex="-1"><a class="header-anchor" href="#distinctby"><span>distinctBy</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">people.stream()</span>
<span class="line">.collect(Collectors.toMap(Person::name, p-&gt;p, (p1,p2)-&gt;p1)) // 把流转换成了一个 Map&lt;String, Person&gt;</span>
<span class="line">.values() // 从 Map 中提取所有的 value，得到一个 Collection&lt;Person&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>问题：</p><ul><li><p>代码晦涩：难以理解和维护</p></li><li><p>依然终止流：本质还是收集操作</p></li></ul><h2 id="最终总结" tabindex="-1"><a class="header-anchor" href="#最终总结"><span>最终总结</span></a></h2><p>JEP 485 就像是为 Java 流生态系统开启了“模组（Mod）”支持。 以前，你只能使用游戏本体自带的武器（内置操作）。现在，你可以自己制作武器（自定义 Gatherer），或者下载别人制作好的精美武器（使用 <code>Gatherers</code> 工具类或第三方库）。</p><p>它将流从一套固定的操作变成了一个可扩展的数据处理平台，解决了社区多年来的痛点，是流 API 一次真正意义上的进化。</p>`,15))])}const h=r(m,[["render",g]]),y=JSON.parse('{"path":"/java/new-features/stream-gatherers-guide.html","title":"JEP 485：流收集器","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1758607541000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"45e9da4f9c89c3a73aba5fd1e310a07b0499f433","time":1758607541000,"email":"3036190149@qq.com","author":"zhaomy","message":"java 24 新特性"}]},"filePathRelative":"java/new-features/stream-gatherers-guide.md","excerpt":"\\n\\n<h2>核心目标：为什么需要流收集器？</h2>\\n<p>想象一下，Java 的流（Stream）是一条智能工厂流水线。流水线上有各种现成的机器人（内置操作）：</p>\\n<ul>\\n<li>\\n<p><code>map</code> 机器人：把每个零件换成另一个零件。</p>\\n</li>\\n<li>\\n<p><code>filter</code> 机器人：把不合格的零件扔掉。</p>\\n</li>\\n<li>\\n<p><code>limit</code> 机器人：只放行前 N 个零件。</p>\\n</li>\\n</ul>\\n<p>这些机器人很好用，但功能是固定的。有一天，厂长想：</p>\\n<blockquote>\\n<p>“能不能每两个零件来了，就把它俩打包成一个盒子，然后继续在流水线上传送？”</p>\\n</blockquote>"}');export{h as comp,y as data};
