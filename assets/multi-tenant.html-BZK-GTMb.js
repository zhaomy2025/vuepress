import{_ as e,c as o,a as i,d as r,e as t,w as a,r as u,o as h,b as s}from"./app-DW8Bfb9C.js";const d={},c={class:"table-of-contents"};function g(p,l){const n=u("router-link");return h(),o("div",null,[l[6]||(l[6]=i("h1",{id:"多租户数据存储",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#多租户数据存储"},[i("span",null,"多租户数据存储")])],-1)),i("nav",c,[i("ul",null,[i("li",null,[t(n,{to:"#什么是多租户"},{default:a(()=>l[0]||(l[0]=[s("什么是多租户")])),_:1,__:[0]})]),i("li",null,[t(n,{to:"#多租户数据存储实现方式"},{default:a(()=>l[1]||(l[1]=[s("多租户数据存储实现方式")])),_:1,__:[1]})]),i("li",null,[t(n,{to:"#_1-独立数据库模式"},{default:a(()=>l[2]||(l[2]=[s("1. 独立数据库模式")])),_:1,__:[2]})]),i("li",null,[t(n,{to:"#_2-共享数据库-独立schema"},{default:a(()=>l[3]||(l[3]=[s("2. 共享数据库，独立Schema")])),_:1,__:[3]})]),i("li",null,[t(n,{to:"#_3-共享数据库-共享schema"},{default:a(()=>l[4]||(l[4]=[s("3. 共享数据库，共享Schema")])),_:1,__:[4]})]),i("li",null,[t(n,{to:"#_4-混合模式"},{default:a(()=>l[5]||(l[5]=[s("4. 混合模式")])),_:1,__:[5]})])])]),l[7]||(l[7]=r('<h2 id="什么是多租户" tabindex="-1"><a class="header-anchor" href="#什么是多租户"><span>什么是多租户</span></a></h2><p>多租户技术（multi-tenancy technology）是一种软件架构技术，可以让多个租户共享同一个系统或程序组件，并且仍可确保各用户间数据的隔离性。</p><h2 id="多租户数据存储实现方式" tabindex="-1"><a class="header-anchor" href="#多租户数据存储实现方式"><span>多租户数据存储实现方式</span></a></h2><p>多租户架构在数据存储层面主要有三种实现方式，各有优缺点和适用场景：</p><h2 id="_1-独立数据库模式" tabindex="-1"><a class="header-anchor" href="#_1-独立数据库模式"><span>1. 独立数据库模式</span></a></h2><ul><li><strong>描述</strong>：每个租户拥有完全独立的数据库实例</li><li><strong>优点</strong>： <ul><li>数据完全隔离，安全性最高</li><li>可针对不同租户进行定制化优化</li><li>故障影响范围小</li></ul></li><li><strong>缺点</strong>： <ul><li>硬件资源消耗大</li><li>维护成本高</li><li>升级迁移复杂</li></ul></li><li><strong>适用场景</strong>：对数据隔离要求极高的大型企业客户</li></ul><h2 id="_2-共享数据库-独立schema" tabindex="-1"><a class="header-anchor" href="#_2-共享数据库-独立schema"><span>2. 共享数据库，独立Schema</span></a></h2><ul><li><strong>描述</strong>：同一数据库实例，不同租户使用不同Schema</li><li><strong>优点</strong>： <ul><li>较好的数据隔离性</li><li>资源利用率较高</li><li>维护成本相对较低</li></ul></li><li><strong>缺点</strong>： <ul><li>跨租户查询复杂</li><li>单个租户数据量大时可能影响性能</li><li>如果出现故障，数据恢复比较困难</li></ul></li><li><strong>适用场景</strong>：中等规模SaaS应用</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在数据库和数据存储领域，Schema（模式/架构） 是指数据库的逻辑结构定义，它描述了数据的组织方式，包括：</p><ul><li>表（Tables） 及其字段（Columns）</li><li>数据类型（Data Types）（如整数、字符串、日期等）</li><li>约束（Constraints）（如主键、外键、唯一性约束）</li><li>索引（Indexes）</li><li>视图（Views）</li><li>存储过程（Stored Procedures）</li><li>权限（Permissions）</li></ul></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>SaaS（Software as a Service，软件即服务） 是一种通过互联网提供软件服务的模式。用户无需本地安装和维护软件，而是直接通过浏览器或客户端访问云端应用，按需订阅使用。</p></div><h2 id="_3-共享数据库-共享schema" tabindex="-1"><a class="header-anchor" href="#_3-共享数据库-共享schema"><span>3. 共享数据库，共享Schema</span></a></h2><ul><li><strong>描述</strong>：所有租户共享相同的数据库和表结构，通过租户ID字段区分</li><li><strong>优点</strong>： <ul><li>资源利用率最高</li><li>维护最简单</li><li>扩展性好</li></ul></li><li><strong>缺点</strong>： <ul><li>数据隔离性最差</li><li>需要应用层严格控制数据访问</li><li>单个租户性能问题可能影响整体</li><li>数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul></li><li><strong>适用场景</strong>：小型SaaS应用或对隔离要求不高的场景</li></ul><h2 id="_4-混合模式" tabindex="-1"><a class="header-anchor" href="#_4-混合模式"><span>4. 混合模式</span></a></h2><ul><li><strong>描述</strong>：结合上述多种方式，如重要客户用独立数据库，普通客户用共享模式</li><li><strong>优点</strong>： <ul><li>灵活满足不同需求</li><li>资源分配更合理</li></ul></li><li><strong>缺点</strong>： <ul><li>架构复杂</li><li>实现和维护难度大</li></ul></li></ul><p>现代云数据库服务(如AWS RDS多租户功能、Azure SQL数据库弹性池)也提供了多租户支持的基础设施解决方案。</p>',15))])}const _=e(d,[["render",g]]),f=JSON.parse('{"path":"/posts/db/arch/multi-tenant.html","title":"多租户数据存储","lang":"zh-CN","frontmatter":{"title":"多租户数据存储","date":"2025-06-25T02:23:52.269Z","category":["db","arch","multi-tenant"],"tags":["db","arch","multi-tenant"]},"git":{"updatedTime":1751013436000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"adc3f42bbb37a3ad17f1c47bd9ce54236fc5fc9c","time":1751013436000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、多租户 2、MyBatis-Plus 3、SpringBoot 集成 Oracle"}]},"filePathRelative":"posts/db/arch/multi-tenant.md","excerpt":"\\n\\n<h2>什么是多租户</h2>\\n<p>多租户技术（multi-tenancy technology）是一种软件架构技术，可以让多个租户共享同一个系统或程序组件，并且仍可确保各用户间数据的隔离性。</p>\\n<h2>多租户数据存储实现方式</h2>\\n<p>多租户架构在数据存储层面主要有三种实现方式，各有优缺点和适用场景：</p>\\n<h2>1. 独立数据库模式</h2>\\n<ul>\\n<li><strong>描述</strong>：每个租户拥有完全独立的数据库实例</li>\\n<li><strong>优点</strong>：\\n<ul>\\n<li>数据完全隔离，安全性最高</li>\\n<li>可针对不同租户进行定制化优化</li>\\n<li>故障影响范围小</li>\\n</ul>\\n</li>\\n<li><strong>缺点</strong>：\\n<ul>\\n<li>硬件资源消耗大</li>\\n<li>维护成本高</li>\\n<li>升级迁移复杂</li>\\n</ul>\\n</li>\\n<li><strong>适用场景</strong>：对数据隔离要求极高的大型企业客户</li>\\n</ul>"}');export{_ as comp,f as data};
