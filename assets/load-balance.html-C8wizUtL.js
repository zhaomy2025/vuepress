import{_ as s,c as h,a as o,d as r,e as a,w as i,r as e,o as u,b as t}from"./app-DW8Bfb9C.js";const m={},p={class:"table-of-contents"};function b(g,n){const l=e("router-link"),d=e("RouteLink");return u(),h("div",null,[n[9]||(n[9]=o("h1",{id:"负载均衡算法",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#负载均衡算法"},[o("span",null,"负载均衡算法")])],-1)),o("nav",p,[o("ul",null,[o("li",null,[a(l,{to:"#常见的负载均衡算法"},{default:i(()=>n[0]||(n[0]=[t("常见的负载均衡算法")])),_:1,__:[0]}),o("ul",null,[o("li",null,[a(l,{to:"#轮询法-round-robin"},{default:i(()=>n[1]||(n[1]=[t("轮询法(Round Robin)")])),_:1,__:[1]})]),o("li",null,[a(l,{to:"#加权轮询法-weight-round-robin"},{default:i(()=>n[2]||(n[2]=[t("加权轮询法(Weight Round Robin)")])),_:1,__:[2]})]),o("li",null,[a(l,{to:"#平滑加权轮询法-smooth-weight-round-robin"},{default:i(()=>n[3]||(n[3]=[t("平滑加权轮询法(Smooth Weight Round Robin)")])),_:1,__:[3]})]),o("li",null,[a(l,{to:"#随机法-random"},{default:i(()=>n[4]||(n[4]=[t("随机法(Random)")])),_:1,__:[4]})]),o("li",null,[a(l,{to:"#加权随机法-weight-random"},{default:i(()=>n[5]||(n[5]=[t("加权随机法(Weight Random)")])),_:1,__:[5]})]),o("li",null,[a(l,{to:"#源地址哈希法-hash"},{default:i(()=>n[6]||(n[6]=[t("源地址哈希法(Hash)")])),_:1,__:[6]})]),o("li",null,[a(l,{to:"#最小连接数法-least-connections"},{default:i(()=>n[7]||(n[7]=[t("最小连接数法(Least Connections)")])),_:1,__:[7]})])])])])]),n[10]||(n[10]=r('<h2 id="常见的负载均衡算法" tabindex="-1"><a class="header-anchor" href="#常见的负载均衡算法"><span>常见的负载均衡算法</span></a></h2><p>常见的负载均衡算法包含:</p><ul><li>轮询法(Round Robin)</li><li>加权轮询法(Weight Round Robin)</li><li>平滑加权轮询法(Smooth Weight Round Robin)</li><li>随机法(Random)</li><li>加权随机法(Weight Random)</li><li>源地址哈希法(Hash)</li><li>最小连接数法(Least Connections</li></ul><h3 id="轮询法-round-robin" tabindex="-1"><a class="header-anchor" href="#轮询法-round-robin"><span>轮询法(Round Robin)</span></a></h3><p>轮询法是最简单的负载均衡算法。它将请求按顺序轮流分配到各个服务器上，如果某个服务器负载过高，则会出现请求超时或连接失败。</p><h3 id="加权轮询法-weight-round-robin" tabindex="-1"><a class="header-anchor" href="#加权轮询法-weight-round-robin"><span>加权轮询法(Weight Round Robin)</span></a></h3><p>加权轮询法是对轮询法的一种改进，它可以根据服务器的权重来分配请求。给配置高、负载低的机器配置更高的权重，让其处理更多的请求，而配置低、负载高的机器则分配较低的权重，降低其系统负载。</p><p>加权轮询法会严格按照预设权重比例直接分配请求，实现简单，但请求分配不连续，高权重服务器可能集中接收请求。假设服务器权重：A(3), B(2), C(1)，会严格按照A → A → A → B → B → C序列分配请求。</p><h3 id="平滑加权轮询法-smooth-weight-round-robin" tabindex="-1"><a class="header-anchor" href="#平滑加权轮询法-smooth-weight-round-robin"><span>平滑加权轮询法(Smooth Weight Round Robin)</span></a></h3><p>平滑加权轮询法是对加权轮询法的一种改进，它可以平滑地分配请求，避免瞬时过载，使各个服务器的负载相对均衡。</p><p>算法步骤：</p><ol><li>初始当前权重（Current Weight）= 固定权重（Weight）</li><li>每次选择当前权重最高的服务器</li><li>被选中的服务器：当前权重 -= 总权重</li><li>所有服务器：当前权重 += 固定权重</li><li>重复步骤2-4</li></ol><h3 id="随机法-random" tabindex="-1"><a class="header-anchor" href="#随机法-random"><span>随机法(Random)</span></a></h3><p>随机法是另一种简单负载均衡算法。它将请求随机分配到各个服务器上。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于轮询法。</p><h3 id="加权随机法-weight-random" tabindex="-1"><a class="header-anchor" href="#加权随机法-weight-random"><span>加权随机法(Weight Random)</span></a></h3><p>加权随机法是对随机法的一种改进，它可以根据服务器的权重来分配请求。与加权轮询法不同的是，它是按照权重随机请求后端服务器，而非顺序。</p><h3 id="源地址哈希法-hash" tabindex="-1"><a class="header-anchor" href="#源地址哈希法-hash"><span>源地址哈希法(Hash)</span></a></h3><p>源地址哈希法是根据客户端的IP地址进行哈希，再用结果值对服务器列表的大小进行取模运算，得到要访问服务器的序号。这种算法可以保证当服务器列表不变时，同一IP地址的请求被分配到同一台服务器上。</p><h3 id="最小连接数法-least-connections" tabindex="-1"><a class="header-anchor" href="#最小连接数法-least-connections"><span>最小连接数法(Least Connections)</span></a></h3><p>最小连接数法是根据服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器。</p>',20)),o("p",null,[a(d,{to:"/posts/linux/web/nginx-load-balance.html"},{default:i(()=>n[8]||(n[8]=[t("Linux > Web服务器 > Nginx的负载均衡算法")])),_:1,__:[8]})])])}const f=s(m,[["render",b]]),c=JSON.parse('{"path":"/posts/algorithm/domain/load-balance.html","title":"负载均衡算法","lang":"zh-CN","frontmatter":{"title":"负载均衡算法","date":"2025-07-10T07:56:14.627Z","category":["algorithm","domain","load-balance"],"tags":["algorithm","domain","load-balance"]},"git":{"updatedTime":1752195777000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"e5db736c87d043812b2106b05ada7017fab60b62","time":1752195777000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、目录调整 2、算法：动态规划、领域算法-负载均衡 3、Nginx负载均衡、配置文件"}]},"filePathRelative":"posts/algorithm/domain/load-balance.md","excerpt":"\\n\\n<h2>常见的负载均衡算法</h2>\\n<p>常见的负载均衡算法包含:</p>\\n<ul>\\n<li>轮询法(Round Robin)</li>\\n<li>加权轮询法(Weight Round Robin)</li>\\n<li>平滑加权轮询法(Smooth Weight Round Robin)</li>\\n<li>随机法(Random)</li>\\n<li>加权随机法(Weight Random)</li>\\n<li>源地址哈希法(Hash)</li>\\n<li>最小连接数法(Least Connections</li>\\n</ul>\\n<h3>轮询法(Round Robin)</h3>\\n<p>轮询法是最简单的负载均衡算法。它将请求按顺序轮流分配到各个服务器上，如果某个服务器负载过高，则会出现请求超时或连接失败。</p>"}');export{f as comp,c as data};
