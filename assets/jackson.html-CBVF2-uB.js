import{_ as r,c as k,a as n,d as i,e as o,w as e,b as s,r as u,o as d}from"./app-CPSQE2j9.js";const m={},v={class:"table-of-contents"};function b(g,a){const p=u("router-link"),c=u("CodeTabs");return d(),k("div",null,[a[30]||(a[30]=n("h1",{id:"jackson库详解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#jackson库详解"},[n("span",null,"Jackson库详解")])],-1)),n("nav",v,[n("ul",null,[n("li",null,[o(p,{to:"#核心模块"},{default:e(()=>a[0]||(a[0]=[s("核心模块")])),_:1,__:[0]})]),n("li",null,[o(p,{to:"#jackson-core"},{default:e(()=>a[1]||(a[1]=[s("jackson-core")])),_:1,__:[1]}),n("ul",null,[n("li",null,[o(p,{to:"#流式api"},{default:e(()=>a[2]||(a[2]=[s("流式API")])),_:1,__:[2]})]),n("li",null,[o(p,{to:"#树模型"},{default:e(()=>a[3]||(a[3]=[s("树模型")])),_:1,__:[3]})])])]),n("li",null,[o(p,{to:"#jackson-annotations"},{default:e(()=>a[4]||(a[4]=[s("jackson-annotations")])),_:1,__:[4]}),n("ul",null,[n("li",null,[o(p,{to:"#jsoninclude-控制何时包含属性"},{default:e(()=>a[5]||(a[5]=[s("@JsonInclude 控制何时包含属性")])),_:1,__:[5]})]),n("li",null,[o(p,{to:"#jsonvalue-自定义转换"},{default:e(()=>a[6]||(a[6]=[s("@JsonValue 自定义转换")])),_:1,__:[6]})]),n("li",null,[o(p,{to:"#jsonproperty-指定属性名"},{default:e(()=>a[7]||(a[7]=[s("@JsonProperty 指定属性名")])),_:1,__:[7]})]),n("li",null,[o(p,{to:"#jsondeserialize-自定义反序列化"},{default:e(()=>a[8]||(a[8]=[s("@JsonDeserialize 自定义反序列化")])),_:1,__:[8]})]),n("li",null,[o(p,{to:"#jsonunwrapped"},{default:e(()=>a[9]||(a[9]=[s("@JsonUnwrapped")])),_:1,__:[9]})])])]),n("li",null,[o(p,{to:"#jackson-databind"},{default:e(()=>a[10]||(a[10]=[s("jackson-databind")])),_:1,__:[10]})]),n("li",null,[o(p,{to:"#安全漏洞问题"},{default:e(()=>a[11]||(a[11]=[s("安全漏洞问题")])),_:1,__:[11]})])])]),a[31]||(a[31]=i('<h2 id="核心模块" tabindex="-1"><a class="header-anchor" href="#核心模块"><span>核心模块</span></a></h2><p>Jackson 主要由三个核心模块组成：</p><ol><li>jackson-core 核心流处理 API，提供了对JSON数据的完整支持，具有最低的开销和最快的读/写操作</li><li>jackson-annotations 标准注解</li><li>jackson-databind 数据绑定功能，依赖于 jackson-core 和 jackson-annotations</li></ol><h2 id="jackson-core" tabindex="-1"><a class="header-anchor" href="#jackson-core"><span>jackson-core</span></a></h2><p>jackson-core提供了两种处理JSON的方式：</p><ul><li>流式API：JsonParser读取数据，而JsonGenerator负责写入数据。</li><li>树模型：JSON文件在内存里以树形式表示。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>Spring MVC对JSON消息的转换器AbstractJackson2HttpMessageConverter它就用到了底层流式API -&gt; JsonGenerator写数据。</p></div><h3 id="流式api" tabindex="-1"><a class="header-anchor" href="#流式api"><span>流式API</span></a></h3><p>底层流式API一般面向“专业人士”，应用级开发使用高阶API ObjectMapper即可。使用步骤如下：</p><ol><li>使用JsonFactory工厂来创建JsonJsonParser和JsonGenerator实例</li><li>使用JsonParser读取JSON数据，使用JsonGenerator写入JSON数据</li></ol><hr><p>对于JsonFactory的实例的创建共有三种方式：</p><ol><li>直接new实例</li><li>使用JsonFactoryBuilder构建（需要2.10或以上版本）</li><li>SPI方式创建实例</li></ol><hr><p>使用JsonFactory工厂来创建JsonJsonParser实例，通过JsonJsonParser实例把一个JSON字符串的值解析到Person对象：</p>',15)),o(c,{id:"95",data:[{id:"解析JSON字符串"},{id:"Person"}],"tab-id":"java"},{title0:e(({value:t,isActive:l})=>a[12]||(a[12]=[s("解析JSON字符串")])),title1:e(({value:t,isActive:l})=>a[13]||(a[13]=[s("Person")])),tab0:e(({value:t,isActive:l})=>a[14]||(a[14]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"test1"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"String"),s(" jsonStr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"{\\"name\\":\\"YourBatman\\",\\"age\\":18}"'),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"Person"),s(" person "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Person"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"JsonFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"JsonFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"JsonParser"),s(" jsonParser "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createParser"),n("span",{class:"token punctuation"},"("),s("jsonStr"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"while"),s(),n("span",{class:"token punctuation"},"("),s("jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextToken"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token class-name"},"JsonToken"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"END_OBJECT"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token class-name"},"String"),s(" fieldname "),n("span",{class:"token operator"},"="),s(" jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getCurrentName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),s("fieldname"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextToken"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                person"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setName"),n("span",{class:"token punctuation"},"("),s("jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getText"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"age"'),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"equals"),n("span",{class:"token punctuation"},"("),s("fieldname"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"nextToken"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                person"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setAge"),n("span",{class:"token punctuation"},"("),s("jsonParser"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getIntValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s("        ")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"println"),n("span",{class:"token punctuation"},"("),s("person"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[15]||(a[15]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Data")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" age"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[32]||(a[32]=n("hr",null,null,-1)),a[33]||(a[33]=n("p",null,"使用JsonFactory工厂来创建JsonGenerator实例，通过JsonGenerator实例把Person对象序列化为JSON字符串。",-1)),a[34]||(a[34]=n("ul",null,[n("li",null,"JsonGenerator提供了writeFieldName()方法用于写JSON的key"),n("li",null,[s("Java中的数据类型和JSON中的值类型并不是一一对应的关系，那么这就需要JsonGenerator在写入时起到一个桥梁（适配）作用 "),n("ul",null,[n("li",null,"writeString() 写入字符串，包括String、Reader、char[]"),n("li",null,"writeNumber() 写入数字，除数字类型外，还包括String、char[]")])])],-1)),o(c,{id:"131",data:[{id:"序列化Person对象"},{id:"Person"}],"tab-id":"java"},{title0:e(({value:t,isActive:l})=>a[16]||(a[16]=[s("序列化Person对象")])),title1:e(({value:t,isActive:l})=>a[17]||(a[17]=[s("Person")])),tab0:e(({value:t,isActive:l})=>a[18]||(a[18]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Test")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"test2"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token class-name"},"JsonFactory"),s(" factory "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"JsonFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"JsonGenerator"),s(" jsonGenerator "),n("span",{class:"token operator"},"="),s(" factory"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"createGenerator"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"System"),n("span",{class:"token punctuation"},"."),s("out"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"JsonEncoding"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"UTF8"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeStartObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 1、写字符串")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeFieldName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"test"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 2、写数组（记得先写key 否则无效）")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeFieldName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"objects"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeStartArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 2.1、写字符串")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeString"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"String"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 2.2、写对象")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeStartObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeStringField"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"name"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"Alice"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeEndObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 2.3、写数字")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeNumber"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeEndArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 3、快捷写入数组（从第index = 2位开始，取3个）")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeFieldName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"arrays"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeArray"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token keyword"},"int"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"{"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 4、写布尔值")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeFieldName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"success"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeBoolean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// 5、写null值")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeFieldName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"null"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeNull"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        jsonGenerator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"writeEndObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[19]||(a[19]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@Data")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Person"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"Integer"),s(" age"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[35]||(a[35]=i('<h3 id="树模型" tabindex="-1"><a class="header-anchor" href="#树模型"><span>树模型</span></a></h3><ul><li>JsonNodeFactory 创建JsonNode实例</li><li>JsonNode <ul><li>ValueNode 值类型节点</li><li>ContainerNode 容器类型节点 <ul><li>ObjectNode 类比Map，采用K-V结构存储。</li><li>ArrayNode 类比Collection、数组。里面可以放置任何节点</li></ul></li></ul></li></ul><h2 id="jackson-annotations" tabindex="-1"><a class="header-anchor" href="#jackson-annotations"><span>jackson-annotations</span></a></h2><ol><li><p>序列化控制</p><ol><li>属性包含控制 <ul><li><strong>@JsonInclude</strong> 控制何时包含属性</li><li><strong>@JsonIncludeProperties</strong> 类级别控制包含哪些属性</li><li><strong>@JsonIgnore</strong> 忽略该属性</li><li><strong>@JsonIgnoreProperties</strong> 类级别忽略多个属性</li></ul></li><li>格式化控制 <ul><li><strong>@JsonFormat</strong> 格式化日期</li></ul></li><li>自定义序列化 <ul><li><strong>@JsonSerialize</strong></li><li><strong>@JsonValue</strong> 自定义转换</li></ul></li></ol></li><li><p>反序列化控制</p><ol><li>构造与创建<br> - <strong>@JsonCreator</strong> 指定构造方法或工厂方法<br> - @JacksonInject 注入值</li><li>内容处理<br> - @JsonAnySetter 处理未知属性</li><li>自定义反序列化<br> - <strong>@JsonDeserialize</strong></li></ol></li><li><p>属性名控制</p><ul><li><strong>@JsonProperty</strong> 指定属性名</li><li>@JsonSetter 指定setter方法对应的JSON属性</li><li>@JsonGetter 指定getter方法对应的JSON属性</li></ul></li><li><p>展开属性</p><ul><li><strong>@JsonUnwrapped</strong> 展开属性</li></ul></li><li><p>类型处理</p><ol><li>多态类型处理<br> - @JsonTypeInfo 多态类型<br> - @JsonSubTypes 子类类型</li><li>视图控制<br> - @JsonView 控制序列化视图</li></ol></li><li><p>集合与引用处理</p><ol><li>集合处理<br> - @JsonFilter 过滤属性</li><li>引用处理<br> - @JsonIdentityInfo 处理循环引用</li></ol></li></ol><h3 id="jsoninclude-控制何时包含属性" tabindex="-1"><a class="header-anchor" href="#jsoninclude-控制何时包含属性"><span>@JsonInclude 控制何时包含属性</span></a></h3>',5)),o(c,{id:"339",data:[{id:"修饰类"},{id:"修饰属性"}],"tab-id":"java"},{title0:e(({value:t,isActive:l})=>a[20]||(a[20]=[s("修饰类")])),title1:e(({value:t,isActive:l})=>a[21]||(a[21]=[s("修饰属性")])),tab0:e(({value:t,isActive:l})=>a[22]||(a[22]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token annotation punctuation"},"@JsonInclude"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},[s("JsonInclude"),n("span",{class:"token punctuation"},"."),s("Include")]),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"NON_NULL"),n("span",{class:"token punctuation"},")"),s("  ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{"),s("  ")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token comment"},"// 类定义  ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s("  ")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[23]||(a[23]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{"),s("  ")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@JsonInclude"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Include"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"NON_EMPTY"),n("span",{class:"token punctuation"},")"),s("  ")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";"),s("  ")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),s("  ")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[36]||(a[36]=i('<p>可以定义在类、方法或字段上，优先级从高到低为：</p><ol><li>字段上的注解</li><li>方法上的注解</li><li>类上的注解</li><li>ObjectMapper 的全局配置</li></ol><hr><p>Jackson 提供了多种包含规则，通过 JsonInclude.Include 枚举指定：</p><ul><li>ALWAYS 包含所有属性</li><li>NON_NULL 只包含非null属性</li><li>NON_ABSENT 属性值不为 null 或&quot;absent&quot;（如 Optional.empty()）时包含</li><li>NON_EMPTY 只包含非空属性</li><li>NON_DEFAULT 只包含非默认值属性</li><li>CUSTOM 自定义规则</li></ul><hr><p>最佳实践：</p><ul><li>谨慎使用 NON_DEFAULT - 依赖于默认构造方法，可能造成混淆</li><li>优先使用类级别注解 - 保持一致性</li><li>考虑使用 @JsonIncludeProperties - Jackson 2.12+ 支持只包含特定属性</li><li>与 @JsonIgnore 配合使用：特别敏感的数据使用 @JsonIgnore</li></ul><h3 id="jsonvalue-自定义转换" tabindex="-1"><a class="header-anchor" href="#jsonvalue-自定义转换"><span>@JsonValue 自定义转换</span></a></h3><p>@JsonValue指定一个方法或字段作为类序列化的唯一表示形式。它提供了一种简洁高效的方式来控制对象如何被序列化为 JSON。具有以下特点：</p><ul><li>标注在类的一个方法或字段上</li><li>被标注的元素返回值将作为整个对象的序列化结果</li><li>一个类只能有一个 @JsonValue 注解</li><li>@JsonValue注解会覆盖其他序列化配置，但不影响反序列化</li><li>主要用于简化对象的序列化表示，常用于枚举和简单值对象的序列化控制</li></ul><hr><p>注意事项：</p><ul><li>为了完整支持双向转换，通常需要配合 @JsonCreator 实现反序列化</li><li>如果用于值对象，建议使类不可变</li></ul><h3 id="jsonproperty-指定属性名" tabindex="-1"><a class="header-anchor" href="#jsonproperty-指定属性名"><span>@JsonProperty 指定属性名</span></a></h3><p>Jaskson序列化时首字母或第二个字母为大写，序列化会有问题，可以使用@JsonProperty注解指定属性名。</p><h3 id="jsondeserialize-自定义反序列化" tabindex="-1"><a class="header-anchor" href="#jsondeserialize-自定义反序列化"><span>@JsonDeserialize 自定义反序列化</span></a></h3><p>嵌套列表反序列化时，列表对象对应实际数据为JSON字符串，会导致反序列化失败，可以使用@JsonDeserialize注解指定自定义反序列化器。</p>',18)),o(c,{id:"495",data:[{id:"MyClass"},{id:"自定义反序列化器"},{id:"s 使用实例"}],"tab-id":"java"},{title0:e(({value:t,isActive:l})=>a[24]||(a[24]=[s("MyClass")])),title1:e(({value:t,isActive:l})=>a[25]||(a[25]=[s("自定义反序列化器")])),title2:e(({value:t,isActive:l})=>a[26]||(a[26]=[s("s 使用实例")])),tab0:e(({value:t,isActive:l})=>a[27]||(a[27]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"MyListItem"),n("span",{class:"token punctuation"},">")]),s(" list"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyClass"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" code"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"String"),s(" name"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab1:e(({value:t,isActive:l})=>a[28]||(a[28]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyDeserializer"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"JsonDeserializer"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token annotation punctuation"},"@Override")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"deserialize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"JsonParser"),s(" p"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"DeserializationContext"),s(" ctxt"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"IOException"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token comment"},"// ")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"Object"),s(" fieldValue "),n("span",{class:"token operator"},"="),s(" p"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readValueAs"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token class-name"},"Class"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},">")]),s(" targetType "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},"        "),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fieldValue "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果已经是目标类型直接返回")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("targetType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isInstance"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"return"),s(" targetType"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"cast"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 如果是字符串但实际是JSON")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("fieldValue "),n("span",{class:"token keyword"},"instanceof"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token class-name"},"String"),s(" strValue "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},")"),s(" fieldValue"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("strValue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"{"'),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"||"),s(" strValue"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"["'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                    "),n("span",{class:"token keyword"},"return"),s(" mapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"readValue"),n("span",{class:"token punctuation"},"("),s("strValue"),n("span",{class:"token punctuation"},","),s(" targetType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token comment"},"// 默认转换")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"return"),s(" mapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertValue"),n("span",{class:"token punctuation"},"("),s("fieldValue"),n("span",{class:"token punctuation"},","),s(" targetType"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"catch"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Exception"),s(" e"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RuntimeException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"转换嵌套字段失败"'),n("span",{class:"token punctuation"},","),s(" e"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),tab2:e(({value:t,isActive:l})=>a[29]||(a[29]=[n("div",{class:"language-java line-numbers-mode","data-highlighter":"prismjs","data-ext":"java"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),s(" linkedHashMap "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},")"),s(" responseEntity"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBody"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"ArrayList"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token punctuation"},">")]),s(" records "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ArrayList"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"LinkedHashMap"),n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Object"),n("span",{class:"token punctuation"},">"),s(),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},")"),s("linkedHashMap"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"records"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"ObjectMapper"),s(" objectMapper "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ObjectMapper"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"RaiseChangeNoticeVO"),n("span",{class:"token punctuation"},">")]),s(" result "),n("span",{class:"token operator"},"="),s(" objectMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"convertValue"),n("span",{class:"token punctuation"},"("),s("records"),n("span",{class:"token punctuation"},",")]),s(`
`),n("span",{class:"line"},[s("  objectMapper"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getTypeFactory"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"constructCollectionType"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"List"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"MyClass"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1}),a[37]||(a[37]=i(`<h3 id="jsonunwrapped" tabindex="-1"><a class="header-anchor" href="#jsonunwrapped"><span>@JsonUnwrapped</span></a></h3><p>@JsonUnwrapped 将一个嵌套对象的属性&quot;展开&quot;到其父对象的 JSON 表示中，从而扁平化数据结构，支持前缀和后缀配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line">    <span class="token annotation punctuation">@JsonUnwrapped</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;addr_&quot;</span><span class="token punctuation">)</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> street<span class="token punctuation">;</span>  </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化结果：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span>  </span>
<span class="line">  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token property">&quot;addr_street&quot;</span><span class="token operator">:</span> <span class="token string">&quot;人民路&quot;</span><span class="token punctuation">,</span>  </span>
<span class="line">  <span class="token property">&quot;addr_city&quot;</span><span class="token operator">:</span> <span class="token string">&quot;北京&quot;</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点：减少嵌套层级，减小 JSON 体积<br> 缺点：增加属性名解析复杂度<br> 注意事项：<br> - 不可与 @JsonValue 混用<br> - 展开可能导致循环引用问题，需要注意处理</p><h2 id="jackson-databind" tabindex="-1"><a class="header-anchor" href="#jackson-databind"><span>jackson-databind</span></a></h2><p>ObjectMapper是jackson-databind模块最为重要的一个类，主要用于读取和写入Json数据，能够很方便地将Java对象转为Json格式的数据。它是面向用户的高层API，底层依赖于Streaming API来实现读/写。ObjectMapper主要提供的功能点如下：</p><ul><li>它提供读取和写入JSON的功能（最重要的功能） <ul><li>普通POJO的序列化/反序列化</li><li>JSON树模型的读/写</li></ul></li><li>它可以被高度定制，以使用不同风格的JSON内容 <ul><li>使用Feature进行定制</li><li>使用可插拔com.fasterxml.jackson.databind.Module模块来扩展/丰富功能</li></ul></li><li>它还支持更高级的对象概念：比如多态泛型、对象标识</li><li>它还充当了更为高级（更强大）的API：ObjectReader和ObjectWriter的工厂 <ul><li>ObjectReader和ObjectWriter底层亦是依赖于Streaming API实现读写</li></ul></li></ul><h4 id="数据绑定-json-对象" tabindex="-1"><a class="header-anchor" href="#数据绑定-json-对象"><span>数据绑定（JSON -&gt; 对象）</span></a></h4><p>数据绑定分为简单数据绑定和完全数据绑定：</p><ul><li>简单数据绑定：比如绑定int类型、List、Map等</li><li>完全数据绑定：绑定到任意的Java Bean对象</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 绑定简单类型 和 Map类型</span></span>
<span class="line"><span class="token class-name">Integer</span> age <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Map</span> map <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token string">&quot;{\\&quot;name\\&quot;:  \\&quot;YourBatman\\&quot;}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// JSON字符串转对象</span></span>
<span class="line"><span class="token class-name">MyClass</span> obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// JSON字节数组转对象</span></span>
<span class="line"><span class="token class-name">MyClass</span> obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonBytes<span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// JSON文件转对象</span></span>
<span class="line"><span class="token class-name">MyClass</span> obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// InputStream转对象</span></span>
<span class="line"><span class="token class-name">MyClass</span> obj <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="写数据-对象-json" tabindex="-1"><a class="header-anchor" href="#写数据-对象-json"><span>写数据（对象 -&gt; JSON）</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token comment">// Java对象转JSON字符串</span></span>
<span class="line"><span class="token class-name">String</span> json <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>myObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">  </span>
<span class="line"><span class="token comment">// 对象转JSON字节数组</span></span>
<span class="line"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jsonBytes <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsBytes</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 对象转JSON文件</span></span>
<span class="line">mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;data.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 对象转OutputStream</span></span>
<span class="line">mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 对象转Writer</span></span>
<span class="line">mapper<span class="token punctuation">.</span><span class="token function">writeValue</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="泛型类型处理-typereference-t" tabindex="-1"><a class="header-anchor" href="#泛型类型处理-typereference-t"><span>泛型类型处理 <code>TypeReference&lt;T&gt;</code></span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// JSON转List  </span></span>
<span class="line"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span></span> objList <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>jsonString<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">MyClass</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="树模型-1" tabindex="-1"><a class="header-anchor" href="#树模型-1"><span>树模型</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token function">valueToTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">readTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全漏洞问题" tabindex="-1"><a class="header-anchor" href="#安全漏洞问题"><span>安全漏洞问题</span></a></h2><p>罪魁祸首 AutoType：fastjson、jackson 都支持 AutoType 功能，这个功能在序列化的 JSON 字符串中带上类型信息，在反序列化时，不需要传入类型，实现自动类型识别。</p>`,21))])}const y=r(m,[["render",b]]),w=JSON.parse('{"path":"/posts/java/json/jackson.html","title":"Jackson库详解","lang":"zh-CN","frontmatter":{"title":"Jackson库详解","date":"2025-06-18T06:57:41.938Z","category":["java","jackson"],"tags":["java","jackson"]},"git":{"updatedTime":1750750917000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"d72ca8e867076fb230331ac91b3c1b164a0e500f","time":1750750917000,"email":"3036190149@qq.com","author":"zhaomy","message":"1、java：json、MyBatis 2、Spring集成Oracle 3、源码解析 4、Markdown文件格式化：去除字体"}]},"filePathRelative":"posts/java/json/jackson.md","excerpt":"\\n\\n<h2>核心模块</h2>\\n<p>Jackson 主要由三个核心模块组成：</p>\\n<ol>\\n<li>jackson-core  核心流处理 API，提供了对JSON数据的完整支持，具有最低的开销和最快的读/写操作</li>\\n<li>jackson-annotations  标准注解</li>\\n<li>jackson-databind  数据绑定功能，依赖于 jackson-core 和 jackson-annotations</li>\\n</ol>\\n<h2>jackson-core</h2>\\n<p>jackson-core提供了两种处理JSON的方式：</p>\\n<ul>\\n<li>流式API：JsonParser读取数据，而JsonGenerator负责写入数据。</li>\\n<li>树模型：JSON文件在内存里以树形式表示。</li>\\n</ul>"}');export{y as comp,w as data};
