import{_ as l,c as p,a,d as i,e,w as t,r as c,o as u,b as o}from"./app-BAyazsnA.js";const r={},k={class:"table-of-contents"};function d(h,n){const s=c("router-link");return u(),p("div",null,[n[9]||(n[9]=a("h1",{id:"zookeeper客户端",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#zookeeper客户端"},[a("span",null,"Zookeeper客户端")])],-1)),a("nav",k,[a("ul",null,[a("li",null,[e(s,{to:"#简介"},{default:t(()=>n[0]||(n[0]=[o("简介")])),_:1,__:[0]})]),a("li",null,[e(s,{to:"#原生java客户端"},{default:t(()=>n[1]||(n[1]=[o("原生Java客户端")])),_:1,__:[1]})]),a("li",null,[e(s,{to:"#zkclient"},{default:t(()=>n[2]||(n[2]=[o("ZkClient")])),_:1,__:[2]})]),a("li",null,[e(s,{to:"#curator"},{default:t(()=>n[3]||(n[3]=[o("Curator")])),_:1,__:[3]})]),a("li",null,[e(s,{to:"#其他语言客户端"},{default:t(()=>n[4]||(n[4]=[o("其他语言客户端")])),_:1,__:[4]})]),a("li",null,[e(s,{to:"#示例代码对比"},{default:t(()=>n[5]||(n[5]=[o("示例代码对比")])),_:1,__:[5]}),a("ul",null,[a("li",null,[e(s,{to:"#原生api创建节点"},{default:t(()=>n[6]||(n[6]=[o("原生API创建节点")])),_:1,__:[6]})]),a("li",null,[e(s,{to:"#zkclient创建节点"},{default:t(()=>n[7]||(n[7]=[o("ZkClient创建节点")])),_:1,__:[7]})]),a("li",null,[e(s,{to:"#curator创建节点-fluent风格"},{default:t(()=>n[8]||(n[8]=[o("Curator创建节点(Fluent风格)")])),_:1,__:[8]})])])])])]),n[10]||(n[10]=i(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>Zookeeper客户端是Zookeeper的重要组成部分，负责与Zookeeper服务器进行交互，包括客户端API、命令行工具、Java客户端等。 常见的Zookeeper客户端有原生Java客户端、ZkClient、Apache Curator等，使用场景如下：</p><ul><li>原生Java客户端：学习ZooKeeper原理时使用</li><li>ZkClient：较为简单、功能有限的客户端，已停止维护</li><li>Curator：功能丰富、稳定、活跃的社区，被Spring Cloud等广泛采用</li></ul><h2 id="原生java客户端" tabindex="-1"><a class="header-anchor" href="#原生java客户端"><span>原生Java客户端</span></a></h2><ul><li>优点：最基础、无额外依赖</li><li>缺点：需要处理大量底层细节(连接管理、重试等)</li><li>使用场景：学习ZooKeeper原理时使用</li></ul><h2 id="zkclient" tabindex="-1"><a class="header-anchor" href="#zkclient"><span>ZkClient</span></a></h2><p>由Datameer开发，是早期对原生ZooKeeper客户端的简单封装，曾经在早期较为流行(2012-2015年左右)，但现在已停止维护，不推荐新项目使用。</p><ul><li>特性： <ul><li>对原生API的简单封装</li><li>支持同步操作(原生API只有异步)</li><li>简单的连接管理</li></ul></li></ul><h2 id="curator" tabindex="-1"><a class="header-anchor" href="#curator"><span>Curator</span></a></h2><p>Curator是由Netflix开发并贡献给Apache，是当前最主流的ZooKeeper客户端，已成为事实标准，广泛用于各大开源项目(HBase, Kafka, Dubbo等)。</p><ul><li>特性： <ul><li>提供Fluent风格的API</li><li>内置连接管理(自动重连)</li><li>提供高级特性(分布式锁、选举、计数器等)</li><li>完善的错误处理</li></ul></li></ul><p><strong>为什么Curator成为标准？</strong></p><ol><li>生产级可靠性：解决了原生API的连接管理难题</li><li>丰富的Recipe实现：提供分布式锁、选举等常见模式</li><li>活跃的社区：由Netflix支持，持续更新</li><li>良好的文档：API设计优秀，学习曲线平缓</li><li>与主流框架集成：被Spring Cloud等广泛采用</li></ol><h2 id="其他语言客户端" tabindex="-1"><a class="header-anchor" href="#其他语言客户端"><span>其他语言客户端</span></a></h2><ul><li>C/C++: zookeeper-client-c</li><li>Python: kazoo</li><li>Go: go-zookeeper</li><li>Node.js: node-zookeeper-client</li></ul><h2 id="示例代码对比" tabindex="-1"><a class="header-anchor" href="#示例代码对比"><span>示例代码对比</span></a></h2><h3 id="原生api创建节点" tabindex="-1"><a class="header-anchor" href="#原生api创建节点"><span>原生API创建节点</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">ZooKeeper</span> zk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> sessionTimeout<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zk<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;/path&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ZooDefs<span class="token punctuation">.</span>Ids</span><span class="token punctuation">.</span><span class="token constant">OPEN_ACL_UNSAFE</span><span class="token punctuation">,</span> <span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="zkclient创建节点" tabindex="-1"><a class="header-anchor" href="#zkclient创建节点"><span>ZkClient创建节点</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">ZkClient</span> zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>connectString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span><span class="token string">&quot;/path&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="curator创建节点-fluent风格" tabindex="-1"><a class="header-anchor" href="#curator创建节点-fluent风格"><span>Curator创建节点(Fluent风格)</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">CuratorFramework</span> client <span class="token operator">=</span> <span class="token class-name">CuratorFrameworkFactory</span><span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>connectString<span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">client<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span><span class="token class-name">CreateMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span><span class="token string">&quot;/path&quot;</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从代码可见，Curator既保留了灵活性又提供了更优雅的API设计。</p>`,23))])}const f=l(r,[["render",d]]),v=JSON.parse('{"path":"/posts/arch/zookeeper/client.html","title":"Zookeeper客户端","lang":"zh-CN","frontmatter":{"title":"Zookeeper客户端","date":"2025-07-14T03:00:41.879Z","category":["arch","zookeeper","client"],"tags":["arch","zookeeper","client"]},"git":{"updatedTime":1752561310000,"contributors":[{"name":"zhaomy","username":"zhaomy","email":"3036190149@qq.com","commits":1,"url":"https://github.com/zhaomy"}],"changelog":[{"hash":"e5512f7153d6d6bfe2919c55419f1a8ef5e3fc96","time":1752561310000,"email":"3036190149@qq.com","author":"zhaomy","message":"1. Zookeeper 2. Java工具库"}]},"filePathRelative":"posts/arch/zookeeper/client.md","excerpt":"\\n\\n<h2>简介</h2>\\n<p>Zookeeper客户端是Zookeeper的重要组成部分，负责与Zookeeper服务器进行交互，包括客户端API、命令行工具、Java客户端等。\\n常见的Zookeeper客户端有原生Java客户端、ZkClient、Apache Curator等，使用场景如下：</p>\\n<ul>\\n<li>原生Java客户端：学习ZooKeeper原理时使用</li>\\n<li>ZkClient：较为简单、功能有限的客户端，已停止维护</li>\\n<li>Curator：功能丰富、稳定、活跃的社区，被Spring Cloud等广泛采用</li>\\n</ul>\\n<h2>原生Java客户端</h2>"}');export{f as comp,v as data};
